   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"lcd.c"
  21              	.Ltext0:
  22              		.file 1 "../src/lcd.c"
 1704              	state:
 1705 0000 00       		.space	1
 1706              		.text
 1707              		.align	2
 1708              		.global	lcd_init
 1710              	lcd_init:
 1711              	.LFB0:
   1:../src/lcd.c  **** #include <s3c44b0x.h>
   2:../src/lcd.c  **** #include <lcd.h>
   3:../src/lcd.c  **** 
   4:../src/lcd.c  **** extern uint8 font[];
   5:../src/lcd.c  **** uint8 lcd_buffer[LCD_BUFFER_SIZE];
   6:../src/lcd.c  **** 
   7:../src/lcd.c  **** static uint8 state;
   8:../src/lcd.c  **** 
   9:../src/lcd.c  **** void lcd_init( void )
  10:../src/lcd.c  **** {      
 1712              		.loc 1 10 0
 1713              		.cfi_startproc
 1714              		@ Function supports interworking.
 1715              		@ args = 0, pretend = 0, frame = 0
 1716              		@ frame_needed = 1, uses_anonymous_args = 0
 1717 0000 0DC0A0E1 		mov	ip, sp
 1718              	.LCFI0:
 1719              		.cfi_def_cfa_register 12
 1720 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1721 0008 04B04CE2 		sub	fp, ip, #4
 1722              		.cfi_offset 14, -8
 1723              		.cfi_offset 13, -12
 1724              		.cfi_offset 11, -16
 1725              	.LCFI1:
 1726              		.cfi_def_cfa 11, 4
  11:../src/lcd.c  ****     DITHMODE = 0x12210;
 1727              		.loc 1 11 0
 1728 000c FC309FE5 		ldr	r3, .L2
 1729 0010 FC209FE5 		ldr	r2, .L2+4
 1730 0014 002083E5 		str	r2, [r3, #0]
  12:../src/lcd.c  ****     DP1_2    = 0xA5A5;
 1731              		.loc 1 12 0
 1732 0018 F8309FE5 		ldr	r3, .L2+8
 1733 001c F8209FE5 		ldr	r2, .L2+12
 1734 0020 002083E5 		str	r2, [r3, #0]
  13:../src/lcd.c  ****     DP4_7    = 0xBA5DA65;
 1735              		.loc 1 13 0
 1736 0024 F4309FE5 		ldr	r3, .L2+16
 1737 0028 F4209FE5 		ldr	r2, .L2+20
 1738 002c 002083E5 		str	r2, [r3, #0]
  14:../src/lcd.c  ****     DP3_5    = 0xA5A5F;
 1739              		.loc 1 14 0
 1740 0030 F0309FE5 		ldr	r3, .L2+24
 1741 0034 F0209FE5 		ldr	r2, .L2+28
 1742 0038 002083E5 		str	r2, [r3, #0]
  15:../src/lcd.c  ****     DP2_3    = 0xD6B;
 1743              		.loc 1 15 0
 1744 003c EC309FE5 		ldr	r3, .L2+32
 1745 0040 EC209FE5 		ldr	r2, .L2+36
 1746 0044 002083E5 		str	r2, [r3, #0]
  16:../src/lcd.c  ****     DP5_7    = 0xEB7B5ED;
 1747              		.loc 1 16 0
 1748 0048 E8309FE5 		ldr	r3, .L2+40
 1749 004c E8209FE5 		ldr	r2, .L2+44
 1750 0050 002083E5 		str	r2, [r3, #0]
  17:../src/lcd.c  ****     DP3_4    = 0x7DBE;
 1751              		.loc 1 17 0
 1752 0054 E4309FE5 		ldr	r3, .L2+48
 1753 0058 E4209FE5 		ldr	r2, .L2+52
 1754 005c 002083E5 		str	r2, [r3, #0]
  18:../src/lcd.c  ****     DP4_5    = 0x7EBDF;
 1755              		.loc 1 18 0
 1756 0060 E0309FE5 		ldr	r3, .L2+56
 1757 0064 E0209FE5 		ldr	r2, .L2+60
 1758 0068 002083E5 		str	r2, [r3, #0]
  19:../src/lcd.c  ****     DP6_7    = 0x7FDFBFE;
 1759              		.loc 1 19 0
 1760 006c DC309FE5 		ldr	r3, .L2+64
 1761 0070 DC209FE5 		ldr	r2, .L2+68
 1762 0074 002083E5 		str	r2, [r3, #0]
  20:../src/lcd.c  ****     
  21:../src/lcd.c  ****     REDLUT   = 0x0;
 1763              		.loc 1 21 0
 1764 0078 D8309FE5 		ldr	r3, .L2+72
 1765 007c 0020A0E3 		mov	r2, #0
 1766 0080 002083E5 		str	r2, [r3, #0]
  22:../src/lcd.c  ****     GREENLUT = 0x0;
 1767              		.loc 1 22 0
 1768 0084 D0309FE5 		ldr	r3, .L2+76
 1769 0088 0020A0E3 		mov	r2, #0
 1770 008c 002083E5 		str	r2, [r3, #0]
  23:../src/lcd.c  ****     BLUELUT  = 0x0;
 1771              		.loc 1 23 0
 1772 0090 C8309FE5 		ldr	r3, .L2+80
 1773 0094 0020A0E3 		mov	r2, #0
 1774 0098 002083E5 		str	r2, [r3, #0]
  24:../src/lcd.c  **** 
  25:../src/lcd.c  ****     LCDCON1  = 0x1C020;
 1775              		.loc 1 25 0
 1776 009c 1F36A0E3 		mov	r3, #32505856
 1777 00a0 BC209FE5 		ldr	r2, .L2+84
 1778 00a4 002083E5 		str	r2, [r3, #0]
  26:../src/lcd.c  ****     LCDCON2  = 0x13CEF;
 1779              		.loc 1 26 0
 1780 00a8 B8309FE5 		ldr	r3, .L2+88
 1781 00ac B8209FE5 		ldr	r2, .L2+92
 1782 00b0 002083E5 		str	r2, [r3, #0]
  27:../src/lcd.c  ****     LCDCON3  = 0x0;
 1783              		.loc 1 27 0
 1784 00b4 B4309FE5 		ldr	r3, .L2+96
 1785 00b8 0020A0E3 		mov	r2, #0
 1786 00bc 002083E5 		str	r2, [r3, #0]
  28:../src/lcd.c  **** 
  29:../src/lcd.c  ****     LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 1787              		.loc 1 29 0
 1788 00c0 AC309FE5 		ldr	r3, .L2+100
 1789 00c4 AC209FE5 		ldr	r2, .L2+104
 1790 00c8 A220A0E1 		mov	r2, r2, lsr #1
 1791 00cc 012282E3 		orr	r2, r2, #268435456
 1792 00d0 002083E5 		str	r2, [r3, #0]
  30:../src/lcd.c  ****     LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 1793              		.loc 1 30 0
 1794 00d4 A0209FE5 		ldr	r2, .L2+108
 1795 00d8 98309FE5 		ldr	r3, .L2+104
 1796 00dc 963C83E2 		add	r3, r3, #38400
 1797 00e0 FF34C3E3 		bic	r3, r3, #-16777216
 1798 00e4 0335C3E3 		bic	r3, r3, #12582912
 1799 00e8 A330A0E1 		mov	r3, r3, lsr #1
 1800 00ec 023283E3 		orr	r3, r3, #536870912
 1801 00f0 003082E5 		str	r3, [r2, #0]
  31:../src/lcd.c  ****     LCDSADDR3 = 0x50;
 1802              		.loc 1 31 0
 1803 00f4 84309FE5 		ldr	r3, .L2+112
 1804 00f8 5020A0E3 		mov	r2, #80
 1805 00fc 002083E5 		str	r2, [r3, #0]
  32:../src/lcd.c  ****     
  33:../src/lcd.c  ****     lcd_off();
 1806              		.loc 1 33 0
 1807 0100 FEFFFFEB 		bl	lcd_off
  34:../src/lcd.c  **** }
 1808              		.loc 1 34 0
 1809 0104 0CD04BE2 		sub	sp, fp, #12
 1810 0108 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1811 010c 1EFF2FE1 		bx	lr
 1812              	.L3:
 1813              		.align	2
 1814              	.L2:
 1815 0110 4400F001 		.word	32505924
 1816 0114 10220100 		.word	74256
 1817 0118 2000F001 		.word	32505888
 1818 011c A5A50000 		.word	42405
 1819 0120 2400F001 		.word	32505892
 1820 0124 65DAA50B 		.word	195418725
 1821 0128 2800F001 		.word	32505896
 1822 012c 5F5A0A00 		.word	678495
 1823 0130 2C00F001 		.word	32505900
 1824 0134 6B0D0000 		.word	3435
 1825 0138 3000F001 		.word	32505904
 1826 013c EDB5B70E 		.word	246920685
 1827 0140 3400F001 		.word	32505908
 1828 0144 BE7D0000 		.word	32190
 1829 0148 3800F001 		.word	32505912
 1830 014c DFEB0700 		.word	519135
 1831 0150 3C00F001 		.word	32505916
 1832 0154 FEFBFD07 		.word	134085630
 1833 0158 1400F001 		.word	32505876
 1834 015c 1800F001 		.word	32505880
 1835 0160 1C00F001 		.word	32505884
 1836 0164 20C00100 		.word	114720
 1837 0168 0400F001 		.word	32505860
 1838 016c EF3C0100 		.word	81135
 1839 0170 4000F001 		.word	32505920
 1840 0174 0800F001 		.word	32505864
 1841 0178 00000000 		.word	lcd_buffer
 1842 017c 0C00F001 		.word	32505868
 1843 0180 1000F001 		.word	32505872
 1844              		.cfi_endproc
 1845              	.LFE0:
 1847              		.align	2
 1848              		.global	lcd_on
 1850              	lcd_on:
 1851              	.LFB1:
  35:../src/lcd.c  **** 
  36:../src/lcd.c  **** void lcd_on( void )
  37:../src/lcd.c  **** {
 1852              		.loc 1 37 0
 1853              		.cfi_startproc
 1854              		@ Function supports interworking.
 1855              		@ args = 0, pretend = 0, frame = 0
 1856              		@ frame_needed = 1, uses_anonymous_args = 0
 1857 0184 0DC0A0E1 		mov	ip, sp
 1858              	.LCFI2:
 1859              		.cfi_def_cfa_register 12
 1860 0188 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1861 018c 04B04CE2 		sub	fp, ip, #4
 1862              		.cfi_offset 14, -8
 1863              		.cfi_offset 13, -12
 1864              		.cfi_offset 11, -16
 1865              	.LCFI3:
 1866              		.cfi_def_cfa 11, 4
  38:../src/lcd.c  ****     LCDCON1 |= (1 << 0);
 1867              		.loc 1 38 0
 1868 0190 1F36A0E3 		mov	r3, #32505856
 1869 0194 1F26A0E3 		mov	r2, #32505856
 1870 0198 002092E5 		ldr	r2, [r2, #0]
 1871 019c 012082E3 		orr	r2, r2, #1
 1872 01a0 002083E5 		str	r2, [r3, #0]
  39:../src/lcd.c  ****     state = ON;
 1873              		.loc 1 39 0
 1874 01a4 10309FE5 		ldr	r3, .L5
 1875 01a8 0120A0E3 		mov	r2, #1
 1876 01ac 0020C3E5 		strb	r2, [r3, #0]
  40:../src/lcd.c  **** }
 1877              		.loc 1 40 0
 1878 01b0 0CD04BE2 		sub	sp, fp, #12
 1879 01b4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1880 01b8 1EFF2FE1 		bx	lr
 1881              	.L6:
 1882              		.align	2
 1883              	.L5:
 1884 01bc 00000000 		.word	state
 1885              		.cfi_endproc
 1886              	.LFE1:
 1888              		.align	2
 1889              		.global	lcd_off
 1891              	lcd_off:
 1892              	.LFB2:
  41:../src/lcd.c  **** 
  42:../src/lcd.c  **** void lcd_off( void )
  43:../src/lcd.c  **** {
 1893              		.loc 1 43 0
 1894              		.cfi_startproc
 1895              		@ Function supports interworking.
 1896              		@ args = 0, pretend = 0, frame = 0
 1897              		@ frame_needed = 1, uses_anonymous_args = 0
 1898 01c0 0DC0A0E1 		mov	ip, sp
 1899              	.LCFI4:
 1900              		.cfi_def_cfa_register 12
 1901 01c4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1902 01c8 04B04CE2 		sub	fp, ip, #4
 1903              		.cfi_offset 14, -8
 1904              		.cfi_offset 13, -12
 1905              		.cfi_offset 11, -16
 1906              	.LCFI5:
 1907              		.cfi_def_cfa 11, 4
  44:../src/lcd.c  **** 	LCDCON1 &= ~(1 << 0);
 1908              		.loc 1 44 0
 1909 01cc 1F36A0E3 		mov	r3, #32505856
 1910 01d0 1F26A0E3 		mov	r2, #32505856
 1911 01d4 002092E5 		ldr	r2, [r2, #0]
 1912 01d8 0120C2E3 		bic	r2, r2, #1
 1913 01dc 002083E5 		str	r2, [r3, #0]
  45:../src/lcd.c  **** 	state = OFF;
 1914              		.loc 1 45 0
 1915 01e0 10309FE5 		ldr	r3, .L8
 1916 01e4 0020A0E3 		mov	r2, #0
 1917 01e8 0020C3E5 		strb	r2, [r3, #0]
  46:../src/lcd.c  **** }
 1918              		.loc 1 46 0
 1919 01ec 0CD04BE2 		sub	sp, fp, #12
 1920 01f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1921 01f4 1EFF2FE1 		bx	lr
 1922              	.L9:
 1923              		.align	2
 1924              	.L8:
 1925 01f8 00000000 		.word	state
 1926              		.cfi_endproc
 1927              	.LFE2:
 1929              		.align	2
 1930              		.global	lcd_status
 1932              	lcd_status:
 1933              	.LFB3:
  47:../src/lcd.c  **** 
  48:../src/lcd.c  **** uint8 lcd_status( void )
  49:../src/lcd.c  **** {
 1934              		.loc 1 49 0
 1935              		.cfi_startproc
 1936              		@ Function supports interworking.
 1937              		@ args = 0, pretend = 0, frame = 0
 1938              		@ frame_needed = 1, uses_anonymous_args = 0
 1939 01fc 0DC0A0E1 		mov	ip, sp
 1940              	.LCFI6:
 1941              		.cfi_def_cfa_register 12
 1942 0200 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1943 0204 04B04CE2 		sub	fp, ip, #4
 1944              		.cfi_offset 14, -8
 1945              		.cfi_offset 13, -12
 1946              		.cfi_offset 11, -16
 1947              	.LCFI7:
 1948              		.cfi_def_cfa 11, 4
  50:../src/lcd.c  ****     return state;
 1949              		.loc 1 50 0
 1950 0208 10309FE5 		ldr	r3, .L11
 1951 020c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  51:../src/lcd.c  **** }
 1952              		.loc 1 51 0
 1953 0210 0300A0E1 		mov	r0, r3
 1954 0214 0CD04BE2 		sub	sp, fp, #12
 1955 0218 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1956 021c 1EFF2FE1 		bx	lr
 1957              	.L12:
 1958              		.align	2
 1959              	.L11:
 1960 0220 00000000 		.word	state
 1961              		.cfi_endproc
 1962              	.LFE3:
 1964              		.align	2
 1965              		.global	lcd_clear
 1967              	lcd_clear:
 1968              	.LFB4:
  52:../src/lcd.c  **** 
  53:../src/lcd.c  **** void lcd_clear( void )
  54:../src/lcd.c  **** {
 1969              		.loc 1 54 0
 1970              		.cfi_startproc
 1971              		@ Function supports interworking.
 1972              		@ args = 0, pretend = 0, frame = 8
 1973              		@ frame_needed = 1, uses_anonymous_args = 0
 1974 0224 0DC0A0E1 		mov	ip, sp
 1975              	.LCFI8:
 1976              		.cfi_def_cfa_register 12
 1977 0228 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1978 022c 04B04CE2 		sub	fp, ip, #4
 1979              		.cfi_offset 14, -8
 1980              		.cfi_offset 13, -12
 1981              		.cfi_offset 11, -16
 1982              	.LCFI9:
 1983              		.cfi_def_cfa 11, 4
 1984 0230 08D04DE2 		sub	sp, sp, #8
  55:../src/lcd.c  ****     uint16 x, y;
  56:../src/lcd.c  **** 
  57:../src/lcd.c  ****     for (x = 0; x < LCD_WIDTH; ++x){
 1985              		.loc 1 57 0
 1986 0234 0030A0E3 		mov	r3, #0
 1987 0238 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 1988 023c 110000EA 		b	.L14
 1989              	.L17:
  58:../src/lcd.c  ****     	for (y = 0; y < LCD_HEIGHT; ++y){
 1990              		.loc 1 58 0
 1991 0240 0030A0E3 		mov	r3, #0
 1992 0244 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 1993 0248 080000EA 		b	.L15
 1994              	.L16:
  59:../src/lcd.c  ****     		lcd_putpixel(x, y, WHITE);
 1995              		.loc 1 59 0 discriminator 2
 1996 024c BE205BE1 		ldrh	r2, [fp, #-14]
 1997 0250 B0315BE1 		ldrh	r3, [fp, #-16]
 1998 0254 0200A0E1 		mov	r0, r2
 1999 0258 0310A0E1 		mov	r1, r3
 2000 025c 0020A0E3 		mov	r2, #0
 2001 0260 FEFFFFEB 		bl	lcd_putpixel
  58:../src/lcd.c  ****     	for (y = 0; y < LCD_HEIGHT; ++y){
 2002              		.loc 1 58 0 discriminator 2
 2003 0264 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2004 0268 013083E2 		add	r3, r3, #1
 2005 026c B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2006              	.L15:
  58:../src/lcd.c  ****     	for (y = 0; y < LCD_HEIGHT; ++y){
 2007              		.loc 1 58 0 is_stmt 0 discriminator 1
 2008 0270 B0315BE1 		ldrh	r3, [fp, #-16]
 2009 0274 EF0053E3 		cmp	r3, #239
 2010 0278 F3FFFF9A 		bls	.L16
  57:../src/lcd.c  ****     for (x = 0; x < LCD_WIDTH; ++x){
 2011              		.loc 1 57 0 is_stmt 1
 2012 027c BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2013 0280 013083E2 		add	r3, r3, #1
 2014 0284 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2015              	.L14:
  57:../src/lcd.c  ****     for (x = 0; x < LCD_WIDTH; ++x){
 2016              		.loc 1 57 0 is_stmt 0 discriminator 1
 2017 0288 BE205BE1 		ldrh	r2, [fp, #-14]
 2018 028c 10309FE5 		ldr	r3, .L18
 2019 0290 030052E1 		cmp	r2, r3
 2020 0294 E9FFFF9A 		bls	.L17
  60:../src/lcd.c  ****     	}
  61:../src/lcd.c  ****     }
  62:../src/lcd.c  **** }
 2021              		.loc 1 62 0 is_stmt 1
 2022 0298 0CD04BE2 		sub	sp, fp, #12
 2023 029c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2024 02a0 1EFF2FE1 		bx	lr
 2025              	.L19:
 2026              		.align	2
 2027              	.L18:
 2028 02a4 3F010000 		.word	319
 2029              		.cfi_endproc
 2030              	.LFE4:
 2032              		.align	2
 2033              		.global	lcd_putpixel
 2035              	lcd_putpixel:
 2036              	.LFB5:
  63:../src/lcd.c  **** 
  64:../src/lcd.c  **** void lcd_putpixel( uint16 x, uint16 y, uint8 c)
  65:../src/lcd.c  **** {
 2037              		.loc 1 65 0
 2038              		.cfi_startproc
 2039              		@ Function supports interworking.
 2040              		@ args = 0, pretend = 0, frame = 16
 2041              		@ frame_needed = 1, uses_anonymous_args = 0
 2042 02a8 0DC0A0E1 		mov	ip, sp
 2043              	.LCFI10:
 2044              		.cfi_def_cfa_register 12
 2045 02ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2046 02b0 04B04CE2 		sub	fp, ip, #4
 2047              		.cfi_offset 14, -8
 2048              		.cfi_offset 13, -12
 2049              		.cfi_offset 11, -16
 2050              	.LCFI11:
 2051              		.cfi_def_cfa 11, 4
 2052 02b4 10D04DE2 		sub	sp, sp, #16
 2053 02b8 0230A0E1 		mov	r3, r2
 2054 02bc B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2055 02c0 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2056 02c4 19304BE5 		strb	r3, [fp, #-25]
  66:../src/lcd.c  ****     uint8 byte, bit;
  67:../src/lcd.c  ****     uint16 i;
  68:../src/lcd.c  **** 
  69:../src/lcd.c  ****     i = x/2 + y*(LCD_WIDTH/2);
 2057              		.loc 1 69 0
 2058 02c8 B6315BE1 		ldrh	r3, [fp, #-22]
 2059 02cc A330A0E1 		mov	r3, r3, lsr #1
 2060 02d0 0338A0E1 		mov	r3, r3, asl #16
 2061 02d4 2328A0E1 		mov	r2, r3, lsr #16
 2062 02d8 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2063 02dc 0310A0E1 		mov	r1, r3	@ movhi
 2064 02e0 0111A0E1 		mov	r1, r1, asl #2
 2065 02e4 033081E0 		add	r3, r1, r3
 2066 02e8 8332A0E1 		mov	r3, r3, asl #5
 2067 02ec 0338A0E1 		mov	r3, r3, asl #16
 2068 02f0 2338A0E1 		mov	r3, r3, lsr #16
 2069 02f4 033082E0 		add	r3, r2, r3
 2070 02f8 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  70:../src/lcd.c  ****     bit = (1-x%2)*4;
 2071              		.loc 1 70 0
 2072 02fc B6315BE1 		ldrh	r3, [fp, #-22]
 2073 0300 013003E2 		and	r3, r3, #1
 2074 0304 000053E3 		cmp	r3, #0
 2075 0308 0100001A 		bne	.L21
 2076              		.loc 1 70 0 is_stmt 0 discriminator 1
 2077 030c 0430A0E3 		mov	r3, #4
 2078 0310 000000EA 		b	.L22
 2079              	.L21:
 2080              		.loc 1 70 0 discriminator 2
 2081 0314 0030A0E3 		mov	r3, #0
 2082              	.L22:
 2083              		.loc 1 70 0 discriminator 3
 2084 0318 0F304BE5 		strb	r3, [fp, #-15]
  71:../src/lcd.c  ****     
  72:../src/lcd.c  ****     byte = lcd_buffer[i];
 2085              		.loc 1 72 0 is_stmt 1 discriminator 3
 2086 031c BE305BE1 		ldrh	r3, [fp, #-14]
 2087 0320 68209FE5 		ldr	r2, .L23
 2088 0324 0330D2E7 		ldrb	r3, [r2, r3]
 2089 0328 10304BE5 		strb	r3, [fp, #-16]
  73:../src/lcd.c  ****     byte &= ~(0xF << bit);
 2090              		.loc 1 73 0 discriminator 3
 2091 032c 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2092 0330 0F20A0E3 		mov	r2, #15
 2093 0334 1233A0E1 		mov	r3, r2, asl r3
 2094 0338 FF3003E2 		and	r3, r3, #255
 2095 033c 0330E0E1 		mvn	r3, r3
 2096 0340 FF2003E2 		and	r2, r3, #255
 2097 0344 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2098 0348 033002E0 		and	r3, r2, r3
 2099 034c FF3003E2 		and	r3, r3, #255
 2100 0350 10304BE5 		strb	r3, [fp, #-16]
  74:../src/lcd.c  ****     byte |= c << bit;
 2101              		.loc 1 74 0 discriminator 3
 2102 0354 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 2103 0358 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2104 035c 1233A0E1 		mov	r3, r2, asl r3
 2105 0360 FF2003E2 		and	r2, r3, #255
 2106 0364 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2107 0368 033082E1 		orr	r3, r2, r3
 2108 036c FF3003E2 		and	r3, r3, #255
 2109 0370 10304BE5 		strb	r3, [fp, #-16]
  75:../src/lcd.c  ****     lcd_buffer[i] = byte;
 2110              		.loc 1 75 0 discriminator 3
 2111 0374 BE305BE1 		ldrh	r3, [fp, #-14]
 2112 0378 10209FE5 		ldr	r2, .L23
 2113 037c 10105BE5 		ldrb	r1, [fp, #-16]
 2114 0380 0310C2E7 		strb	r1, [r2, r3]
  76:../src/lcd.c  **** }
 2115              		.loc 1 76 0 discriminator 3
 2116 0384 0CD04BE2 		sub	sp, fp, #12
 2117 0388 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2118 038c 1EFF2FE1 		bx	lr
 2119              	.L24:
 2120              		.align	2
 2121              	.L23:
 2122 0390 00000000 		.word	lcd_buffer
 2123              		.cfi_endproc
 2124              	.LFE5:
 2126              		.align	2
 2127              		.global	lcd_getpixel
 2129              	lcd_getpixel:
 2130              	.LFB6:
  77:../src/lcd.c  **** 
  78:../src/lcd.c  **** uint8 lcd_getpixel( uint16 x, uint16 y )
  79:../src/lcd.c  **** {
 2131              		.loc 1 79 0
 2132              		.cfi_startproc
 2133              		@ Function supports interworking.
 2134              		@ args = 0, pretend = 0, frame = 16
 2135              		@ frame_needed = 1, uses_anonymous_args = 0
 2136 0394 0DC0A0E1 		mov	ip, sp
 2137              	.LCFI12:
 2138              		.cfi_def_cfa_register 12
 2139 0398 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2140 039c 04B04CE2 		sub	fp, ip, #4
 2141              		.cfi_offset 14, -8
 2142              		.cfi_offset 13, -12
 2143              		.cfi_offset 11, -16
 2144              	.LCFI13:
 2145              		.cfi_def_cfa 11, 4
 2146 03a0 10D04DE2 		sub	sp, sp, #16
 2147 03a4 0020A0E1 		mov	r2, r0
 2148 03a8 0130A0E1 		mov	r3, r1
 2149 03ac B6214BE1 		strh	r2, [fp, #-22]	@ movhi
 2150 03b0 B8314BE1 		strh	r3, [fp, #-24]	@ movhi
  80:../src/lcd.c  ****     uint8 byte, bit;
  81:../src/lcd.c  ****     uint16 i;
  82:../src/lcd.c  **** 
  83:../src/lcd.c  ****     i = x/2 + y*(LCD_WIDTH/2);
 2151              		.loc 1 83 0
 2152 03b4 B6315BE1 		ldrh	r3, [fp, #-22]
 2153 03b8 A330A0E1 		mov	r3, r3, lsr #1
 2154 03bc 0338A0E1 		mov	r3, r3, asl #16
 2155 03c0 2328A0E1 		mov	r2, r3, lsr #16
 2156 03c4 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2157 03c8 0310A0E1 		mov	r1, r3	@ movhi
 2158 03cc 0111A0E1 		mov	r1, r1, asl #2
 2159 03d0 033081E0 		add	r3, r1, r3
 2160 03d4 8332A0E1 		mov	r3, r3, asl #5
 2161 03d8 0338A0E1 		mov	r3, r3, asl #16
 2162 03dc 2338A0E1 		mov	r3, r3, lsr #16
 2163 03e0 033082E0 		add	r3, r2, r3
 2164 03e4 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  84:../src/lcd.c  ****     bit = (1-x%2)*4;
 2165              		.loc 1 84 0
 2166 03e8 B6315BE1 		ldrh	r3, [fp, #-22]
 2167 03ec 013003E2 		and	r3, r3, #1
 2168 03f0 000053E3 		cmp	r3, #0
 2169 03f4 0100001A 		bne	.L26
 2170              		.loc 1 84 0 is_stmt 0 discriminator 1
 2171 03f8 0430A0E3 		mov	r3, #4
 2172 03fc 000000EA 		b	.L27
 2173              	.L26:
 2174              		.loc 1 84 0 discriminator 2
 2175 0400 0030A0E3 		mov	r3, #0
 2176              	.L27:
 2177              		.loc 1 84 0 discriminator 3
 2178 0404 0F304BE5 		strb	r3, [fp, #-15]
  85:../src/lcd.c  **** 
  86:../src/lcd.c  ****     byte = lcd_buffer[i];
 2179              		.loc 1 86 0 is_stmt 1 discriminator 3
 2180 0408 BE305BE1 		ldrh	r3, [fp, #-14]
 2181 040c 18209FE5 		ldr	r2, .L28
 2182 0410 0330D2E7 		ldrb	r3, [r2, r3]
 2183 0414 10304BE5 		strb	r3, [fp, #-16]
  87:../src/lcd.c  **** 
  88:../src/lcd.c  ****     return byte;
 2184              		.loc 1 88 0 discriminator 3
 2185 0418 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
  89:../src/lcd.c  **** }
 2186              		.loc 1 89 0 discriminator 3
 2187 041c 0300A0E1 		mov	r0, r3
 2188 0420 0CD04BE2 		sub	sp, fp, #12
 2189 0424 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2190 0428 1EFF2FE1 		bx	lr
 2191              	.L29:
 2192              		.align	2
 2193              	.L28:
 2194 042c 00000000 		.word	lcd_buffer
 2195              		.cfi_endproc
 2196              	.LFE6:
 2198              		.align	2
 2199              		.global	lcd_draw_hrow
 2201              	lcd_draw_hrow:
 2202              	.LFB7:
  90:../src/lcd.c  **** 
  91:../src/lcd.c  **** void lcd_draw_hrow( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
  92:../src/lcd.c  **** {
 2203              		.loc 1 92 0
 2204              		.cfi_startproc
 2205              		@ Function supports interworking.
 2206              		@ args = 4, pretend = 0, frame = 16
 2207              		@ frame_needed = 1, uses_anonymous_args = 0
 2208 0430 0DC0A0E1 		mov	ip, sp
 2209              	.LCFI14:
 2210              		.cfi_def_cfa_register 12
 2211 0434 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2212 0438 04B04CE2 		sub	fp, ip, #4
 2213              		.cfi_offset 14, -8
 2214              		.cfi_offset 13, -12
 2215              		.cfi_offset 11, -16
 2216              	.LCFI15:
 2217              		.cfi_def_cfa 11, 4
 2218 043c 10D04DE2 		sub	sp, sp, #16
 2219 0440 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2220 0444 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2221 0448 BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2222 044c 1B304BE5 		strb	r3, [fp, #-27]
  93:../src/lcd.c  ****     uint16 lenght;
  94:../src/lcd.c  **** 
  95:../src/lcd.c  ****     while (width > 0){
 2223              		.loc 1 95 0
 2224 0450 1E0000EA 		b	.L31
 2225              	.L34:
  96:../src/lcd.c  ****     	lenght = xright - xleft + 1;
 2226              		.loc 1 96 0
 2227 0454 B8215BE1 		ldrh	r2, [fp, #-24]	@ movhi
 2228 0458 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2229 045c 023063E0 		rsb	r3, r3, r2
 2230 0460 0338A0E1 		mov	r3, r3, asl #16
 2231 0464 2338A0E1 		mov	r3, r3, lsr #16
 2232 0468 013083E2 		add	r3, r3, #1
 2233 046c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  97:../src/lcd.c  ****     	while (lenght > 0){
 2234              		.loc 1 97 0
 2235 0470 0D0000EA 		b	.L32
 2236              	.L33:
  98:../src/lcd.c  ****     		lcd_putpixel(xleft + lenght, y, color);
 2237              		.loc 1 98 0
 2238 0474 B6215BE1 		ldrh	r2, [fp, #-22]	@ movhi
 2239 0478 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2240 047c 033082E0 		add	r3, r2, r3
 2241 0480 0338A0E1 		mov	r3, r3, asl #16
 2242 0484 2318A0E1 		mov	r1, r3, lsr #16
 2243 0488 BA215BE1 		ldrh	r2, [fp, #-26]
 2244 048c 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2245 0490 0100A0E1 		mov	r0, r1
 2246 0494 0210A0E1 		mov	r1, r2
 2247 0498 0320A0E1 		mov	r2, r3
 2248 049c FEFFFFEB 		bl	lcd_putpixel
  99:../src/lcd.c  ****     		--lenght;
 2249              		.loc 1 99 0
 2250 04a0 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2251 04a4 013043E2 		sub	r3, r3, #1
 2252 04a8 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2253              	.L32:
  97:../src/lcd.c  ****     	while (lenght > 0){
 2254              		.loc 1 97 0 discriminator 1
 2255 04ac BE305BE1 		ldrh	r3, [fp, #-14]
 2256 04b0 000053E3 		cmp	r3, #0
 2257 04b4 EEFFFF1A 		bne	.L33
 100:../src/lcd.c  ****     	}
 101:../src/lcd.c  ****     	++y;
 2258              		.loc 1 101 0
 2259 04b8 BA315BE1 		ldrh	r3, [fp, #-26]	@ movhi
 2260 04bc 013083E2 		add	r3, r3, #1
 2261 04c0 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 102:../src/lcd.c  ****     	--width;
 2262              		.loc 1 102 0
 2263 04c4 B430DBE1 		ldrh	r3, [fp, #4]	@ movhi
 2264 04c8 013043E2 		sub	r3, r3, #1
 2265 04cc B430CBE1 		strh	r3, [fp, #4]	@ movhi
 2266              	.L31:
  95:../src/lcd.c  ****     while (width > 0){
 2267              		.loc 1 95 0 discriminator 1
 2268 04d0 B430DBE1 		ldrh	r3, [fp, #4]
 2269 04d4 000053E3 		cmp	r3, #0
 2270 04d8 DDFFFF1A 		bne	.L34
 103:../src/lcd.c  ****     }
 104:../src/lcd.c  **** }
 2271              		.loc 1 104 0
 2272 04dc 0CD04BE2 		sub	sp, fp, #12
 2273 04e0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2274 04e4 1EFF2FE1 		bx	lr
 2275              		.cfi_endproc
 2276              	.LFE7:
 2278              		.align	2
 2279              		.global	lcd_draw_vrow
 2281              	lcd_draw_vrow:
 2282              	.LFB8:
 105:../src/lcd.c  **** 
 106:../src/lcd.c  **** void lcd_draw_vrow( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
 107:../src/lcd.c  **** {
 2283              		.loc 1 107 0
 2284              		.cfi_startproc
 2285              		@ Function supports interworking.
 2286              		@ args = 4, pretend = 0, frame = 16
 2287              		@ frame_needed = 1, uses_anonymous_args = 0
 2288 04e8 0DC0A0E1 		mov	ip, sp
 2289              	.LCFI16:
 2290              		.cfi_def_cfa_register 12
 2291 04ec 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2292 04f0 04B04CE2 		sub	fp, ip, #4
 2293              		.cfi_offset 14, -8
 2294              		.cfi_offset 13, -12
 2295              		.cfi_offset 11, -16
 2296              	.LCFI17:
 2297              		.cfi_def_cfa 11, 4
 2298 04f4 10D04DE2 		sub	sp, sp, #16
 2299 04f8 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2300 04fc B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2301 0500 BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2302 0504 1B304BE5 		strb	r3, [fp, #-27]
 108:../src/lcd.c  ****     uint16 lenght;
 109:../src/lcd.c  **** 
 110:../src/lcd.c  ****     while (width > 0){
 2303              		.loc 1 110 0
 2304 0508 1E0000EA 		b	.L36
 2305              	.L39:
 111:../src/lcd.c  ****     	lenght = ydown - yup + 1;
 2306              		.loc 1 111 0
 2307 050c B8215BE1 		ldrh	r2, [fp, #-24]	@ movhi
 2308 0510 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2309 0514 023063E0 		rsb	r3, r3, r2
 2310 0518 0338A0E1 		mov	r3, r3, asl #16
 2311 051c 2338A0E1 		mov	r3, r3, lsr #16
 2312 0520 013083E2 		add	r3, r3, #1
 2313 0524 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 112:../src/lcd.c  ****     	while (lenght > 0){
 2314              		.loc 1 112 0
 2315 0528 0D0000EA 		b	.L37
 2316              	.L38:
 113:../src/lcd.c  ****     		lcd_putpixel(x, yup + lenght, color);
 2317              		.loc 1 113 0
 2318 052c B6215BE1 		ldrh	r2, [fp, #-22]	@ movhi
 2319 0530 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2320 0534 033082E0 		add	r3, r2, r3
 2321 0538 0338A0E1 		mov	r3, r3, asl #16
 2322 053c 2328A0E1 		mov	r2, r3, lsr #16
 2323 0540 BA115BE1 		ldrh	r1, [fp, #-26]
 2324 0544 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2325 0548 0100A0E1 		mov	r0, r1
 2326 054c 0210A0E1 		mov	r1, r2
 2327 0550 0320A0E1 		mov	r2, r3
 2328 0554 FEFFFFEB 		bl	lcd_putpixel
 114:../src/lcd.c  ****     		--lenght;
 2329              		.loc 1 114 0
 2330 0558 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2331 055c 013043E2 		sub	r3, r3, #1
 2332 0560 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2333              	.L37:
 112:../src/lcd.c  ****     	while (lenght > 0){
 2334              		.loc 1 112 0 discriminator 1
 2335 0564 BE305BE1 		ldrh	r3, [fp, #-14]
 2336 0568 000053E3 		cmp	r3, #0
 2337 056c EEFFFF1A 		bne	.L38
 115:../src/lcd.c  ****     	}
 116:../src/lcd.c  ****     	++x;
 2338              		.loc 1 116 0
 2339 0570 BA315BE1 		ldrh	r3, [fp, #-26]	@ movhi
 2340 0574 013083E2 		add	r3, r3, #1
 2341 0578 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 117:../src/lcd.c  ****     	--width;
 2342              		.loc 1 117 0
 2343 057c B430DBE1 		ldrh	r3, [fp, #4]	@ movhi
 2344 0580 013043E2 		sub	r3, r3, #1
 2345 0584 B430CBE1 		strh	r3, [fp, #4]	@ movhi
 2346              	.L36:
 110:../src/lcd.c  ****     while (width > 0){
 2347              		.loc 1 110 0 discriminator 1
 2348 0588 B430DBE1 		ldrh	r3, [fp, #4]
 2349 058c 000053E3 		cmp	r3, #0
 2350 0590 DDFFFF1A 		bne	.L39
 118:../src/lcd.c  ****     }
 119:../src/lcd.c  **** }
 2351              		.loc 1 119 0
 2352 0594 0CD04BE2 		sub	sp, fp, #12
 2353 0598 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2354 059c 1EFF2FE1 		bx	lr
 2355              		.cfi_endproc
 2356              	.LFE8:
 2358              		.align	2
 2359              		.global	lcd_draw_box
 2361              	lcd_draw_box:
 2362              	.LFB9:
 120:../src/lcd.c  **** 
 121:../src/lcd.c  **** void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width
 122:../src/lcd.c  **** {
 2363              		.loc 1 122 0
 2364              		.cfi_startproc
 2365              		@ Function supports interworking.
 2366              		@ args = 8, pretend = 0, frame = 8
 2367              		@ frame_needed = 1, uses_anonymous_args = 0
 2368 05a0 0DC0A0E1 		mov	ip, sp
 2369              	.LCFI18:
 2370              		.cfi_def_cfa_register 12
 2371 05a4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2372 05a8 04B04CE2 		sub	fp, ip, #4
 2373              		.cfi_offset 14, -8
 2374              		.cfi_offset 13, -12
 2375              		.cfi_offset 11, -16
 2376              	.LCFI19:
 2377              		.cfi_def_cfa 11, 4
 2378 05ac 10D04DE2 		sub	sp, sp, #16
 2379 05b0 BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2380 05b4 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 2381 05b8 B2214BE1 		strh	r2, [fp, #-18]	@ movhi
 2382 05bc B4314BE1 		strh	r3, [fp, #-20]	@ movhi
 123:../src/lcd.c  **** 	lcd_draw_hrow(xleft, xright, yup, color, width);
 2383              		.loc 1 123 0
 2384 05c0 BE005BE1 		ldrh	r0, [fp, #-14]
 2385 05c4 B2115BE1 		ldrh	r1, [fp, #-18]
 2386 05c8 B0215BE1 		ldrh	r2, [fp, #-16]
 2387 05cc 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2388 05d0 B8C0DBE1 		ldrh	ip, [fp, #8]
 2389 05d4 00C08DE5 		str	ip, [sp, #0]
 2390 05d8 FEFFFFEB 		bl	lcd_draw_hrow
 124:../src/lcd.c  **** 	lcd_draw_hrow(xleft, xright, ydown, color, width);
 2391              		.loc 1 124 0
 2392 05dc BE005BE1 		ldrh	r0, [fp, #-14]
 2393 05e0 B2115BE1 		ldrh	r1, [fp, #-18]
 2394 05e4 B4215BE1 		ldrh	r2, [fp, #-20]
 2395 05e8 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2396 05ec B8C0DBE1 		ldrh	ip, [fp, #8]
 2397 05f0 00C08DE5 		str	ip, [sp, #0]
 2398 05f4 FEFFFFEB 		bl	lcd_draw_hrow
 125:../src/lcd.c  ****     lcd_draw_vrow(yup, ydown, xleft, color, width);
 2399              		.loc 1 125 0
 2400 05f8 B0015BE1 		ldrh	r0, [fp, #-16]
 2401 05fc B4115BE1 		ldrh	r1, [fp, #-20]
 2402 0600 BE205BE1 		ldrh	r2, [fp, #-14]
 2403 0604 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2404 0608 B8C0DBE1 		ldrh	ip, [fp, #8]
 2405 060c 00C08DE5 		str	ip, [sp, #0]
 2406 0610 FEFFFFEB 		bl	lcd_draw_vrow
 126:../src/lcd.c  ****     lcd_draw_vrow(yup, ydown, xright, color, width);
 2407              		.loc 1 126 0
 2408 0614 B0015BE1 		ldrh	r0, [fp, #-16]
 2409 0618 B4115BE1 		ldrh	r1, [fp, #-20]
 2410 061c B2215BE1 		ldrh	r2, [fp, #-18]
 2411 0620 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2412 0624 B8C0DBE1 		ldrh	ip, [fp, #8]
 2413 0628 00C08DE5 		str	ip, [sp, #0]
 2414 062c FEFFFFEB 		bl	lcd_draw_vrow
 127:../src/lcd.c  **** }
 2415              		.loc 1 127 0
 2416 0630 0CD04BE2 		sub	sp, fp, #12
 2417 0634 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2418 0638 1EFF2FE1 		bx	lr
 2419              		.cfi_endproc
 2420              	.LFE9:
 2422              		.align	2
 2423              		.global	lcd_putchar
 2425              	lcd_putchar:
 2426              	.LFB10:
 128:../src/lcd.c  **** 
 129:../src/lcd.c  **** void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
 130:../src/lcd.c  **** {
 2427              		.loc 1 130 0
 2428              		.cfi_startproc
 2429              		@ Function supports interworking.
 2430              		@ args = 0, pretend = 0, frame = 16
 2431              		@ frame_needed = 1, uses_anonymous_args = 0
 2432 063c 0DC0A0E1 		mov	ip, sp
 2433              	.LCFI20:
 2434              		.cfi_def_cfa_register 12
 2435 0640 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2436 0644 04B04CE2 		sub	fp, ip, #4
 2437              		.cfi_offset 14, -8
 2438              		.cfi_offset 13, -12
 2439              		.cfi_offset 11, -16
 2440              	.LCFI21:
 2441              		.cfi_def_cfa 11, 4
 2442 0648 10D04DE2 		sub	sp, sp, #16
 2443 064c B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2444 0650 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2445 0654 19204BE5 		strb	r2, [fp, #-25]
 2446 0658 1A304BE5 		strb	r3, [fp, #-26]
 131:../src/lcd.c  ****     uint8 row, col;
 132:../src/lcd.c  ****     uint8 *bitmap;
 133:../src/lcd.c  **** 
 134:../src/lcd.c  ****     bitmap = font + ch*16;
 2447              		.loc 1 134 0
 2448 065c 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2449 0660 0332A0E1 		mov	r3, r3, asl #4
 2450 0664 0320A0E1 		mov	r2, r3
 2451 0668 1C319FE5 		ldr	r3, .L48
 2452 066c 033082E0 		add	r3, r2, r3
 2453 0670 14300BE5 		str	r3, [fp, #-20]
 135:../src/lcd.c  ****     for( row=0; row<16; row++ )
 2454              		.loc 1 135 0
 2455 0674 0030A0E3 		mov	r3, #0
 2456 0678 0D304BE5 		strb	r3, [fp, #-13]
 2457 067c 3C0000EA 		b	.L42
 2458              	.L47:
 136:../src/lcd.c  ****         for( col=0; col<8; col++ )                    
 2459              		.loc 1 136 0
 2460 0680 0030A0E3 		mov	r3, #0
 2461 0684 0E304BE5 		strb	r3, [fp, #-14]
 2462 0688 330000EA 		b	.L43
 2463              	.L46:
 137:../src/lcd.c  ****             if( bitmap[row] & (0x80 >> col) )
 2464              		.loc 1 137 0
 2465 068c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2466 0690 14201BE5 		ldr	r2, [fp, #-20]
 2467 0694 033082E0 		add	r3, r2, r3
 2468 0698 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2469 069c 0320A0E1 		mov	r2, r3
 2470 06a0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2471 06a4 8010A0E3 		mov	r1, #128
 2472 06a8 5133A0E1 		mov	r3, r1, asr r3
 2473 06ac 033002E0 		and	r3, r2, r3
 2474 06b0 000053E3 		cmp	r3, #0
 2475 06b4 1300000A 		beq	.L44
 138:../src/lcd.c  ****                 lcd_putpixel( x+col, y+row, color );
 2476              		.loc 1 138 0
 2477 06b8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2478 06bc 0338A0E1 		mov	r3, r3, asl #16
 2479 06c0 2328A0E1 		mov	r2, r3, lsr #16
 2480 06c4 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2481 06c8 033082E0 		add	r3, r2, r3
 2482 06cc 0338A0E1 		mov	r3, r3, asl #16
 2483 06d0 2318A0E1 		mov	r1, r3, lsr #16
 2484 06d4 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2485 06d8 0338A0E1 		mov	r3, r3, asl #16
 2486 06dc 2328A0E1 		mov	r2, r3, lsr #16
 2487 06e0 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2488 06e4 033082E0 		add	r3, r2, r3
 2489 06e8 0338A0E1 		mov	r3, r3, asl #16
 2490 06ec 2328A0E1 		mov	r2, r3, lsr #16
 2491 06f0 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2492 06f4 0100A0E1 		mov	r0, r1
 2493 06f8 0210A0E1 		mov	r1, r2
 2494 06fc 0320A0E1 		mov	r2, r3
 2495 0700 FEFFFFEB 		bl	lcd_putpixel
 2496 0704 110000EA 		b	.L45
 2497              	.L44:
 139:../src/lcd.c  ****             else
 140:../src/lcd.c  ****                 lcd_putpixel( x+col, y+row, WHITE );
 2498              		.loc 1 140 0
 2499 0708 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2500 070c 0338A0E1 		mov	r3, r3, asl #16
 2501 0710 2328A0E1 		mov	r2, r3, lsr #16
 2502 0714 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2503 0718 033082E0 		add	r3, r2, r3
 2504 071c 0338A0E1 		mov	r3, r3, asl #16
 2505 0720 2328A0E1 		mov	r2, r3, lsr #16
 2506 0724 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2507 0728 0338A0E1 		mov	r3, r3, asl #16
 2508 072c 2318A0E1 		mov	r1, r3, lsr #16
 2509 0730 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2510 0734 033081E0 		add	r3, r1, r3
 2511 0738 0338A0E1 		mov	r3, r3, asl #16
 2512 073c 2338A0E1 		mov	r3, r3, lsr #16
 2513 0740 0200A0E1 		mov	r0, r2
 2514 0744 0310A0E1 		mov	r1, r3
 2515 0748 0020A0E3 		mov	r2, #0
 2516 074c FEFFFFEB 		bl	lcd_putpixel
 2517              	.L45:
 136:../src/lcd.c  ****         for( col=0; col<8; col++ )                    
 2518              		.loc 1 136 0
 2519 0750 0E305BE5 		ldrb	r3, [fp, #-14]
 2520 0754 013083E2 		add	r3, r3, #1
 2521 0758 0E304BE5 		strb	r3, [fp, #-14]
 2522              	.L43:
 136:../src/lcd.c  ****         for( col=0; col<8; col++ )                    
 2523              		.loc 1 136 0 is_stmt 0 discriminator 1
 2524 075c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2525 0760 070053E3 		cmp	r3, #7
 2526 0764 C8FFFF9A 		bls	.L46
 135:../src/lcd.c  ****     for( row=0; row<16; row++ )
 2527              		.loc 1 135 0 is_stmt 1
 2528 0768 0D305BE5 		ldrb	r3, [fp, #-13]
 2529 076c 013083E2 		add	r3, r3, #1
 2530 0770 0D304BE5 		strb	r3, [fp, #-13]
 2531              	.L42:
 135:../src/lcd.c  ****     for( row=0; row<16; row++ )
 2532              		.loc 1 135 0 is_stmt 0 discriminator 1
 2533 0774 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2534 0778 0F0053E3 		cmp	r3, #15
 2535 077c BFFFFF9A 		bls	.L47
 141:../src/lcd.c  **** }
 2536              		.loc 1 141 0 is_stmt 1
 2537 0780 0CD04BE2 		sub	sp, fp, #12
 2538 0784 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2539 0788 1EFF2FE1 		bx	lr
 2540              	.L49:
 2541              		.align	2
 2542              	.L48:
 2543 078c 00000000 		.word	font
 2544              		.cfi_endproc
 2545              	.LFE10:
 2547              		.align	2
 2548              		.global	lcd_puts
 2550              	lcd_puts:
 2551              	.LFB11:
 142:../src/lcd.c  **** 
 143:../src/lcd.c  **** void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
 144:../src/lcd.c  **** {
 2552              		.loc 1 144 0
 2553              		.cfi_startproc
 2554              		@ Function supports interworking.
 2555              		@ args = 0, pretend = 0, frame = 16
 2556              		@ frame_needed = 1, uses_anonymous_args = 0
 2557 0790 0DC0A0E1 		mov	ip, sp
 2558              	.LCFI22:
 2559              		.cfi_def_cfa_register 12
 2560 0794 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2561 0798 04B04CE2 		sub	fp, ip, #4
 2562              		.cfi_offset 14, -8
 2563              		.cfi_offset 13, -12
 2564              		.cfi_offset 11, -16
 2565              	.LCFI23:
 2566              		.cfi_def_cfa 11, 4
 2567 079c 10D04DE2 		sub	sp, sp, #16
 2568 07a0 18300BE5 		str	r3, [fp, #-24]
 2569 07a4 BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2570 07a8 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 2571 07ac 0230A0E1 		mov	r3, r2
 2572 07b0 11304BE5 		strb	r3, [fp, #-17]
 145:../src/lcd.c  **** 	while (*s){
 2573              		.loc 1 145 0
 2574 07b4 0B0000EA 		b	.L51
 2575              	.L52:
 146:../src/lcd.c  **** 	    	lcd_putchar(x, y, color, *s);
 2576              		.loc 1 146 0
 2577 07b8 18301BE5 		ldr	r3, [fp, #-24]
 2578 07bc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2579 07c0 BE005BE1 		ldrh	r0, [fp, #-14]
 2580 07c4 B0115BE1 		ldrh	r1, [fp, #-16]
 2581 07c8 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 2582 07cc FEFFFFEB 		bl	lcd_putchar
 147:../src/lcd.c  **** 	    	*++s;
 2583              		.loc 1 147 0
 2584 07d0 18301BE5 		ldr	r3, [fp, #-24]
 2585 07d4 013083E2 		add	r3, r3, #1
 2586 07d8 18300BE5 		str	r3, [fp, #-24]
 148:../src/lcd.c  **** 	    	x += 8;
 2587              		.loc 1 148 0
 2588 07dc BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2589 07e0 083083E2 		add	r3, r3, #8
 2590 07e4 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2591              	.L51:
 145:../src/lcd.c  **** 	while (*s){
 2592              		.loc 1 145 0 discriminator 1
 2593 07e8 18301BE5 		ldr	r3, [fp, #-24]
 2594 07ec 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2595 07f0 000053E3 		cmp	r3, #0
 2596 07f4 EFFFFF1A 		bne	.L52
 149:../src/lcd.c  **** 	    }
 150:../src/lcd.c  **** }
 2597              		.loc 1 150 0
 2598 07f8 0CD04BE2 		sub	sp, fp, #12
 2599 07fc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2600 0800 1EFF2FE1 		bx	lr
 2601              		.cfi_endproc
 2602              	.LFE11:
 2604              		.align	2
 2605              		.global	lcd_putint
 2607              	lcd_putint:
 2608              	.LFB12:
 151:../src/lcd.c  **** 
 152:../src/lcd.c  **** void lcd_putint( uint16 x, uint16 y, uint8 color, int32 i )
 153:../src/lcd.c  **** {
 2609              		.loc 1 153 0
 2610              		.cfi_startproc
 2611              		@ Function supports interworking.
 2612              		@ args = 0, pretend = 0, frame = 40
 2613              		@ frame_needed = 1, uses_anonymous_args = 0
 2614 0804 0DC0A0E1 		mov	ip, sp
 2615              	.LCFI24:
 2616              		.cfi_def_cfa_register 12
 2617 0808 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2618 080c 04B04CE2 		sub	fp, ip, #4
 2619              		.cfi_offset 14, -8
 2620              		.cfi_offset 13, -12
 2621              		.cfi_offset 11, -16
 2622              	.LCFI25:
 2623              		.cfi_def_cfa 11, 4
 2624 0810 28D04DE2 		sub	sp, sp, #40
 2625 0814 30300BE5 		str	r3, [fp, #-48]
 2626 0818 B6024BE1 		strh	r0, [fp, #-38]	@ movhi
 2627 081c B8124BE1 		strh	r1, [fp, #-40]	@ movhi
 2628 0820 0230A0E1 		mov	r3, r2
 2629 0824 29304BE5 		strb	r3, [fp, #-41]
 154:../src/lcd.c  ****     char buf[16 + 1];
 155:../src/lcd.c  ****     char *p = buf + 16;
 2630              		.loc 1 155 0
 2631 0828 24304BE2 		sub	r3, fp, #36
 2632 082c 103083E2 		add	r3, r3, #16
 2633 0830 10300BE5 		str	r3, [fp, #-16]
 156:../src/lcd.c  ****     uint8 c;
 157:../src/lcd.c  ****     char negativo = 0;
 2634              		.loc 1 157 0
 2635 0834 0030A0E3 		mov	r3, #0
 2636 0838 11304BE5 		strb	r3, [fp, #-17]
 158:../src/lcd.c  **** 
 159:../src/lcd.c  ****     *p = '\0';
 2637              		.loc 1 159 0
 2638 083c 10301BE5 		ldr	r3, [fp, #-16]
 2639 0840 0020A0E3 		mov	r2, #0
 2640 0844 0020C3E5 		strb	r2, [r3, #0]
 160:../src/lcd.c  **** 
 161:../src/lcd.c  ****     if (i < 0){
 2641              		.loc 1 161 0
 2642 0848 30301BE5 		ldr	r3, [fp, #-48]
 2643 084c 000053E3 		cmp	r3, #0
 2644 0850 040000AA 		bge	.L54
 162:../src/lcd.c  ****         negativo = '1';
 2645              		.loc 1 162 0
 2646 0854 3130A0E3 		mov	r3, #49
 2647 0858 11304BE5 		strb	r3, [fp, #-17]
 163:../src/lcd.c  ****         i *= (-1);
 2648              		.loc 1 163 0
 2649 085c 30301BE5 		ldr	r3, [fp, #-48]
 2650 0860 003063E2 		rsb	r3, r3, #0
 2651 0864 30300BE5 		str	r3, [fp, #-48]
 2652              	.L54:
 164:../src/lcd.c  ****     }
 165:../src/lcd.c  **** 
 166:../src/lcd.c  ****     do {
 167:../src/lcd.c  ****         c = i % 10;
 2653              		.loc 1 167 0 discriminator 1
 2654 0868 30101BE5 		ldr	r1, [fp, #-48]
 2655 086c C0309FE5 		ldr	r3, .L56
 2656 0870 9123C3E0 		smull	r2, r3, r1, r3
 2657 0874 4321A0E1 		mov	r2, r3, asr #2
 2658 0878 C13FA0E1 		mov	r3, r1, asr #31
 2659 087c 022063E0 		rsb	r2, r3, r2
 2660 0880 0230A0E1 		mov	r3, r2
 2661 0884 0331A0E1 		mov	r3, r3, asl #2
 2662 0888 023083E0 		add	r3, r3, r2
 2663 088c 8330A0E1 		mov	r3, r3, asl #1
 2664 0890 012063E0 		rsb	r2, r3, r1
 2665 0894 0230A0E1 		mov	r3, r2
 2666 0898 12304BE5 		strb	r3, [fp, #-18]
 168:../src/lcd.c  ****         *--p = '0' + c;
 2667              		.loc 1 168 0 discriminator 1
 2668 089c 10301BE5 		ldr	r3, [fp, #-16]
 2669 08a0 013043E2 		sub	r3, r3, #1
 2670 08a4 10300BE5 		str	r3, [fp, #-16]
 2671 08a8 12305BE5 		ldrb	r3, [fp, #-18]
 2672 08ac 303083E2 		add	r3, r3, #48
 2673 08b0 FF2003E2 		and	r2, r3, #255
 2674 08b4 10301BE5 		ldr	r3, [fp, #-16]
 2675 08b8 0020C3E5 		strb	r2, [r3, #0]
 169:../src/lcd.c  ****         i /= 10;
 2676              		.loc 1 169 0 discriminator 1
 2677 08bc 30301BE5 		ldr	r3, [fp, #-48]
 2678 08c0 6C209FE5 		ldr	r2, .L56
 2679 08c4 9312C2E0 		smull	r1, r2, r3, r2
 2680 08c8 4221A0E1 		mov	r2, r2, asr #2
 2681 08cc C33FA0E1 		mov	r3, r3, asr #31
 2682 08d0 023063E0 		rsb	r3, r3, r2
 2683 08d4 30300BE5 		str	r3, [fp, #-48]
 170:../src/lcd.c  ****     } while( i );
 2684              		.loc 1 170 0 discriminator 1
 2685 08d8 30301BE5 		ldr	r3, [fp, #-48]
 2686 08dc 000053E3 		cmp	r3, #0
 2687 08e0 E0FFFF1A 		bne	.L54
 171:../src/lcd.c  **** 
 172:../src/lcd.c  ****     if (negativo){ *--p = '-';}
 2688              		.loc 1 172 0
 2689 08e4 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2690 08e8 000053E3 		cmp	r3, #0
 2691 08ec 0500000A 		beq	.L55
 2692              		.loc 1 172 0 is_stmt 0 discriminator 1
 2693 08f0 10301BE5 		ldr	r3, [fp, #-16]
 2694 08f4 013043E2 		sub	r3, r3, #1
 2695 08f8 10300BE5 		str	r3, [fp, #-16]
 2696 08fc 10301BE5 		ldr	r3, [fp, #-16]
 2697 0900 2D20A0E3 		mov	r2, #45
 2698 0904 0020C3E5 		strb	r2, [r3, #0]
 2699              	.L55:
 173:../src/lcd.c  **** 
 174:../src/lcd.c  ****     lcd_puts(x, y, color, p);
 2700              		.loc 1 174 0 is_stmt 1
 2701 0908 B6125BE1 		ldrh	r1, [fp, #-38]
 2702 090c B8225BE1 		ldrh	r2, [fp, #-40]
 2703 0910 29305BE5 		ldrb	r3, [fp, #-41]	@ zero_extendqisi2
 2704 0914 0100A0E1 		mov	r0, r1
 2705 0918 0210A0E1 		mov	r1, r2
 2706 091c 0320A0E1 		mov	r2, r3
 2707 0920 10301BE5 		ldr	r3, [fp, #-16]
 2708 0924 FEFFFFEB 		bl	lcd_puts
 175:../src/lcd.c  **** }
 2709              		.loc 1 175 0
 2710 0928 0CD04BE2 		sub	sp, fp, #12
 2711 092c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2712 0930 1EFF2FE1 		bx	lr
 2713              	.L57:
 2714              		.align	2
 2715              	.L56:
 2716 0934 67666666 		.word	1717986919
 2717              		.cfi_endproc
 2718              	.LFE12:
 2720              		.align	2
 2721              		.global	lcd_puthex
 2723              	lcd_puthex:
 2724              	.LFB13:
 176:../src/lcd.c  **** 
 177:../src/lcd.c  **** void lcd_puthex( uint16 x, uint16 y, uint8 color, uint32 i )
 178:../src/lcd.c  **** {
 2725              		.loc 1 178 0
 2726              		.cfi_startproc
 2727              		@ Function supports interworking.
 2728              		@ args = 0, pretend = 0, frame = 32
 2729              		@ frame_needed = 1, uses_anonymous_args = 0
 2730 0938 0DC0A0E1 		mov	ip, sp
 2731              	.LCFI26:
 2732              		.cfi_def_cfa_register 12
 2733 093c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2734 0940 04B04CE2 		sub	fp, ip, #4
 2735              		.cfi_offset 14, -8
 2736              		.cfi_offset 13, -12
 2737              		.cfi_offset 11, -16
 2738              	.LCFI27:
 2739              		.cfi_def_cfa 11, 4
 2740 0944 20D04DE2 		sub	sp, sp, #32
 2741 0948 28300BE5 		str	r3, [fp, #-40]
 2742 094c BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 2743 0950 B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 2744 0954 0230A0E1 		mov	r3, r2
 2745 0958 21304BE5 		strb	r3, [fp, #-33]
 179:../src/lcd.c  **** 	   char buf[8 + 1];
 180:../src/lcd.c  **** 	    char *p = buf + 8;
 2746              		.loc 1 180 0
 2747 095c 1C304BE2 		sub	r3, fp, #28
 2748 0960 083083E2 		add	r3, r3, #8
 2749 0964 10300BE5 		str	r3, [fp, #-16]
 181:../src/lcd.c  **** 	    uint8 c;
 182:../src/lcd.c  **** 
 183:../src/lcd.c  **** 	    *p = '\0';
 2750              		.loc 1 183 0
 2751 0968 10301BE5 		ldr	r3, [fp, #-16]
 2752 096c 0020A0E3 		mov	r2, #0
 2753 0970 0020C3E5 		strb	r2, [r3, #0]
 2754              	.L61:
 184:../src/lcd.c  **** 
 185:../src/lcd.c  **** 	    do {
 186:../src/lcd.c  **** 	    	c = i & 0xF;
 2755              		.loc 1 186 0
 2756 0974 28301BE5 		ldr	r3, [fp, #-40]
 2757 0978 FF3003E2 		and	r3, r3, #255
 2758 097c 0F3003E2 		and	r3, r3, #15
 2759 0980 11304BE5 		strb	r3, [fp, #-17]
 187:../src/lcd.c  **** 	    	if  (c < 10){
 2760              		.loc 1 187 0
 2761 0984 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2762 0988 090053E3 		cmp	r3, #9
 2763 098c 0800008A 		bhi	.L59
 188:../src/lcd.c  **** 	    		*--p = '0' + c;
 2764              		.loc 1 188 0
 2765 0990 10301BE5 		ldr	r3, [fp, #-16]
 2766 0994 013043E2 		sub	r3, r3, #1
 2767 0998 10300BE5 		str	r3, [fp, #-16]
 2768 099c 11305BE5 		ldrb	r3, [fp, #-17]
 2769 09a0 303083E2 		add	r3, r3, #48
 2770 09a4 FF2003E2 		and	r2, r3, #255
 2771 09a8 10301BE5 		ldr	r3, [fp, #-16]
 2772 09ac 0020C3E5 		strb	r2, [r3, #0]
 2773 09b0 070000EA 		b	.L60
 2774              	.L59:
 189:../src/lcd.c  **** 	    	}
 190:../src/lcd.c  **** 	    	else {
 191:../src/lcd.c  **** 	    		*--p = 'a' + c - 10;
 2775              		.loc 1 191 0
 2776 09b4 10301BE5 		ldr	r3, [fp, #-16]
 2777 09b8 013043E2 		sub	r3, r3, #1
 2778 09bc 10300BE5 		str	r3, [fp, #-16]
 2779 09c0 11305BE5 		ldrb	r3, [fp, #-17]
 2780 09c4 573083E2 		add	r3, r3, #87
 2781 09c8 FF2003E2 		and	r2, r3, #255
 2782 09cc 10301BE5 		ldr	r3, [fp, #-16]
 2783 09d0 0020C3E5 		strb	r2, [r3, #0]
 2784              	.L60:
 192:../src/lcd.c  **** 	    	}
 193:../src/lcd.c  **** 	    	i = i >> 4;
 2785              		.loc 1 193 0
 2786 09d4 28301BE5 		ldr	r3, [fp, #-40]
 2787 09d8 2332A0E1 		mov	r3, r3, lsr #4
 2788 09dc 28300BE5 		str	r3, [fp, #-40]
 194:../src/lcd.c  **** 	    }while(i);
 2789              		.loc 1 194 0
 2790 09e0 28301BE5 		ldr	r3, [fp, #-40]
 2791 09e4 000053E3 		cmp	r3, #0
 2792 09e8 E1FFFF1A 		bne	.L61
 195:../src/lcd.c  **** 
 196:../src/lcd.c  **** 	    lcd_puts(x, y, color, p);
 2793              		.loc 1 196 0
 2794 09ec BE115BE1 		ldrh	r1, [fp, #-30]
 2795 09f0 B0225BE1 		ldrh	r2, [fp, #-32]
 2796 09f4 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2797 09f8 0100A0E1 		mov	r0, r1
 2798 09fc 0210A0E1 		mov	r1, r2
 2799 0a00 0320A0E1 		mov	r2, r3
 2800 0a04 10301BE5 		ldr	r3, [fp, #-16]
 2801 0a08 FEFFFFEB 		bl	lcd_puts
 197:../src/lcd.c  **** }
 2802              		.loc 1 197 0
 2803 0a0c 0CD04BE2 		sub	sp, fp, #12
 2804 0a10 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2805 0a14 1EFF2FE1 		bx	lr
 2806              		.cfi_endproc
 2807              	.LFE13:
 2809              		.align	2
 2810              		.global	lcd_putchar_x2
 2812              	lcd_putchar_x2:
 2813              	.LFB14:
 198:../src/lcd.c  **** 
 199:../src/lcd.c  **** void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch )
 200:../src/lcd.c  **** {
 2814              		.loc 1 200 0
 2815              		.cfi_startproc
 2816              		@ Function supports interworking.
 2817              		@ args = 0, pretend = 0, frame = 16
 2818              		@ frame_needed = 1, uses_anonymous_args = 0
 2819 0a18 0DC0A0E1 		mov	ip, sp
 2820              	.LCFI28:
 2821              		.cfi_def_cfa_register 12
 2822 0a1c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2823 0a20 04B04CE2 		sub	fp, ip, #4
 2824              		.cfi_offset 14, -8
 2825              		.cfi_offset 13, -12
 2826              		.cfi_offset 11, -16
 2827              	.LCFI29:
 2828              		.cfi_def_cfa 11, 4
 2829 0a24 10D04DE2 		sub	sp, sp, #16
 2830 0a28 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2831 0a2c B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2832 0a30 19204BE5 		strb	r2, [fp, #-25]
 2833 0a34 1A304BE5 		strb	r3, [fp, #-26]
 201:../src/lcd.c  ****     uint8 row, col;
 202:../src/lcd.c  ****     uint8 *bitmap;
 203:../src/lcd.c  **** 
 204:../src/lcd.c  ****     bitmap = font + ch*16;
 2834              		.loc 1 204 0
 2835 0a38 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2836 0a3c 0332A0E1 		mov	r3, r3, asl #4
 2837 0a40 0320A0E1 		mov	r2, r3
 2838 0a44 78349FE5 		ldr	r3, .L69
 2839 0a48 033082E0 		add	r3, r2, r3
 2840 0a4c 14300BE5 		str	r3, [fp, #-20]
 205:../src/lcd.c  ****     for( row=0; row<16; row++ ){
 2841              		.loc 1 205 0
 2842 0a50 0030A0E3 		mov	r3, #0
 2843 0a54 0D304BE5 		strb	r3, [fp, #-13]
 2844 0a58 130100EA 		b	.L63
 2845              	.L68:
 206:../src/lcd.c  ****         for( col=0; col<8; col++ ){
 2846              		.loc 1 206 0
 2847 0a5c 0030A0E3 		mov	r3, #0
 2848 0a60 0E304BE5 		strb	r3, [fp, #-14]
 2849 0a64 0A0100EA 		b	.L64
 2850              	.L67:
 207:../src/lcd.c  ****             if( bitmap[row] & (0x80 >> col) ){
 2851              		.loc 1 207 0
 2852 0a68 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2853 0a6c 14201BE5 		ldr	r2, [fp, #-20]
 2854 0a70 033082E0 		add	r3, r2, r3
 2855 0a74 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2856 0a78 0320A0E1 		mov	r2, r3
 2857 0a7c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2858 0a80 8010A0E3 		mov	r1, #128
 2859 0a84 5133A0E1 		mov	r3, r1, asr r3
 2860 0a88 033002E0 		and	r3, r2, r3
 2861 0a8c 000053E3 		cmp	r3, #0
 2862 0a90 8000000A 		beq	.L65
 208:../src/lcd.c  ****                 lcd_putpixel(2*(x+col) - x, 2*(y+row) - y, color );
 2863              		.loc 1 208 0
 2864 0a94 B6215BE1 		ldrh	r2, [fp, #-22]
 2865 0a98 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2866 0a9c 033082E0 		add	r3, r2, r3
 2867 0aa0 0338A0E1 		mov	r3, r3, asl #16
 2868 0aa4 2338A0E1 		mov	r3, r3, lsr #16
 2869 0aa8 8330A0E1 		mov	r3, r3, asl #1
 2870 0aac 0338A0E1 		mov	r3, r3, asl #16
 2871 0ab0 2328A0E1 		mov	r2, r3, lsr #16
 2872 0ab4 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2873 0ab8 023063E0 		rsb	r3, r3, r2
 2874 0abc 0338A0E1 		mov	r3, r3, asl #16
 2875 0ac0 2318A0E1 		mov	r1, r3, lsr #16
 2876 0ac4 B8215BE1 		ldrh	r2, [fp, #-24]
 2877 0ac8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2878 0acc 033082E0 		add	r3, r2, r3
 2879 0ad0 0338A0E1 		mov	r3, r3, asl #16
 2880 0ad4 2338A0E1 		mov	r3, r3, lsr #16
 2881 0ad8 8330A0E1 		mov	r3, r3, asl #1
 2882 0adc 0338A0E1 		mov	r3, r3, asl #16
 2883 0ae0 2328A0E1 		mov	r2, r3, lsr #16
 2884 0ae4 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2885 0ae8 023063E0 		rsb	r3, r3, r2
 2886 0aec 0338A0E1 		mov	r3, r3, asl #16
 2887 0af0 2328A0E1 		mov	r2, r3, lsr #16
 2888 0af4 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2889 0af8 0100A0E1 		mov	r0, r1
 2890 0afc 0210A0E1 		mov	r1, r2
 2891 0b00 0320A0E1 		mov	r2, r3
 2892 0b04 FEFFFFEB 		bl	lcd_putpixel
 209:../src/lcd.c  ****     			lcd_putpixel(2*(x+col) - x - 1, 2*(y+row) - y, color );
 2893              		.loc 1 209 0
 2894 0b08 B6215BE1 		ldrh	r2, [fp, #-22]
 2895 0b0c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2896 0b10 033082E0 		add	r3, r2, r3
 2897 0b14 0338A0E1 		mov	r3, r3, asl #16
 2898 0b18 2338A0E1 		mov	r3, r3, lsr #16
 2899 0b1c 8330A0E1 		mov	r3, r3, asl #1
 2900 0b20 0338A0E1 		mov	r3, r3, asl #16
 2901 0b24 2328A0E1 		mov	r2, r3, lsr #16
 2902 0b28 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2903 0b2c 023063E0 		rsb	r3, r3, r2
 2904 0b30 0338A0E1 		mov	r3, r3, asl #16
 2905 0b34 2338A0E1 		mov	r3, r3, lsr #16
 2906 0b38 013043E2 		sub	r3, r3, #1
 2907 0b3c 0338A0E1 		mov	r3, r3, asl #16
 2908 0b40 2318A0E1 		mov	r1, r3, lsr #16
 2909 0b44 B8215BE1 		ldrh	r2, [fp, #-24]
 2910 0b48 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2911 0b4c 033082E0 		add	r3, r2, r3
 2912 0b50 0338A0E1 		mov	r3, r3, asl #16
 2913 0b54 2338A0E1 		mov	r3, r3, lsr #16
 2914 0b58 8330A0E1 		mov	r3, r3, asl #1
 2915 0b5c 0338A0E1 		mov	r3, r3, asl #16
 2916 0b60 2328A0E1 		mov	r2, r3, lsr #16
 2917 0b64 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2918 0b68 023063E0 		rsb	r3, r3, r2
 2919 0b6c 0338A0E1 		mov	r3, r3, asl #16
 2920 0b70 2328A0E1 		mov	r2, r3, lsr #16
 2921 0b74 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2922 0b78 0100A0E1 		mov	r0, r1
 2923 0b7c 0210A0E1 		mov	r1, r2
 2924 0b80 0320A0E1 		mov	r2, r3
 2925 0b84 FEFFFFEB 		bl	lcd_putpixel
 210:../src/lcd.c  ****     			lcd_putpixel(2*(x+col) - x, 2*(y+row) - y + 1, color );
 2926              		.loc 1 210 0
 2927 0b88 B6215BE1 		ldrh	r2, [fp, #-22]
 2928 0b8c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2929 0b90 033082E0 		add	r3, r2, r3
 2930 0b94 0338A0E1 		mov	r3, r3, asl #16
 2931 0b98 2338A0E1 		mov	r3, r3, lsr #16
 2932 0b9c 8330A0E1 		mov	r3, r3, asl #1
 2933 0ba0 0338A0E1 		mov	r3, r3, asl #16
 2934 0ba4 2328A0E1 		mov	r2, r3, lsr #16
 2935 0ba8 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2936 0bac 023063E0 		rsb	r3, r3, r2
 2937 0bb0 0338A0E1 		mov	r3, r3, asl #16
 2938 0bb4 2318A0E1 		mov	r1, r3, lsr #16
 2939 0bb8 B8215BE1 		ldrh	r2, [fp, #-24]
 2940 0bbc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2941 0bc0 033082E0 		add	r3, r2, r3
 2942 0bc4 0338A0E1 		mov	r3, r3, asl #16
 2943 0bc8 2338A0E1 		mov	r3, r3, lsr #16
 2944 0bcc 8330A0E1 		mov	r3, r3, asl #1
 2945 0bd0 0338A0E1 		mov	r3, r3, asl #16
 2946 0bd4 2328A0E1 		mov	r2, r3, lsr #16
 2947 0bd8 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2948 0bdc 023063E0 		rsb	r3, r3, r2
 2949 0be0 0338A0E1 		mov	r3, r3, asl #16
 2950 0be4 2338A0E1 		mov	r3, r3, lsr #16
 2951 0be8 013083E2 		add	r3, r3, #1
 2952 0bec 0338A0E1 		mov	r3, r3, asl #16
 2953 0bf0 2328A0E1 		mov	r2, r3, lsr #16
 2954 0bf4 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2955 0bf8 0100A0E1 		mov	r0, r1
 2956 0bfc 0210A0E1 		mov	r1, r2
 2957 0c00 0320A0E1 		mov	r2, r3
 2958 0c04 FEFFFFEB 		bl	lcd_putpixel
 211:../src/lcd.c  ****     			lcd_putpixel(2*(x+col) - x - 1, 2*(y+row) - y + 1, color );
 2959              		.loc 1 211 0
 2960 0c08 B6215BE1 		ldrh	r2, [fp, #-22]
 2961 0c0c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2962 0c10 033082E0 		add	r3, r2, r3
 2963 0c14 0338A0E1 		mov	r3, r3, asl #16
 2964 0c18 2338A0E1 		mov	r3, r3, lsr #16
 2965 0c1c 8330A0E1 		mov	r3, r3, asl #1
 2966 0c20 0338A0E1 		mov	r3, r3, asl #16
 2967 0c24 2328A0E1 		mov	r2, r3, lsr #16
 2968 0c28 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2969 0c2c 023063E0 		rsb	r3, r3, r2
 2970 0c30 0338A0E1 		mov	r3, r3, asl #16
 2971 0c34 2338A0E1 		mov	r3, r3, lsr #16
 2972 0c38 013043E2 		sub	r3, r3, #1
 2973 0c3c 0338A0E1 		mov	r3, r3, asl #16
 2974 0c40 2318A0E1 		mov	r1, r3, lsr #16
 2975 0c44 B8215BE1 		ldrh	r2, [fp, #-24]
 2976 0c48 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2977 0c4c 033082E0 		add	r3, r2, r3
 2978 0c50 0338A0E1 		mov	r3, r3, asl #16
 2979 0c54 2338A0E1 		mov	r3, r3, lsr #16
 2980 0c58 8330A0E1 		mov	r3, r3, asl #1
 2981 0c5c 0338A0E1 		mov	r3, r3, asl #16
 2982 0c60 2328A0E1 		mov	r2, r3, lsr #16
 2983 0c64 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2984 0c68 023063E0 		rsb	r3, r3, r2
 2985 0c6c 0338A0E1 		mov	r3, r3, asl #16
 2986 0c70 2338A0E1 		mov	r3, r3, lsr #16
 2987 0c74 013083E2 		add	r3, r3, #1
 2988 0c78 0338A0E1 		mov	r3, r3, asl #16
 2989 0c7c 2328A0E1 		mov	r2, r3, lsr #16
 2990 0c80 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2991 0c84 0100A0E1 		mov	r0, r1
 2992 0c88 0210A0E1 		mov	r1, r2
 2993 0c8c 0320A0E1 		mov	r2, r3
 2994 0c90 FEFFFFEB 		bl	lcd_putpixel
 2995 0c94 7B0000EA 		b	.L66
 2996              	.L65:
 212:../src/lcd.c  ****             }
 213:../src/lcd.c  ****             else{
 214:../src/lcd.c  ****             	lcd_putpixel(2*(x+col) - x, 2*(y+row) - y, WHITE );
 2997              		.loc 1 214 0
 2998 0c98 B6215BE1 		ldrh	r2, [fp, #-22]
 2999 0c9c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3000 0ca0 033082E0 		add	r3, r2, r3
 3001 0ca4 0338A0E1 		mov	r3, r3, asl #16
 3002 0ca8 2338A0E1 		mov	r3, r3, lsr #16
 3003 0cac 8330A0E1 		mov	r3, r3, asl #1
 3004 0cb0 0338A0E1 		mov	r3, r3, asl #16
 3005 0cb4 2328A0E1 		mov	r2, r3, lsr #16
 3006 0cb8 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3007 0cbc 023063E0 		rsb	r3, r3, r2
 3008 0cc0 0338A0E1 		mov	r3, r3, asl #16
 3009 0cc4 2328A0E1 		mov	r2, r3, lsr #16
 3010 0cc8 B8115BE1 		ldrh	r1, [fp, #-24]
 3011 0ccc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3012 0cd0 033081E0 		add	r3, r1, r3
 3013 0cd4 0338A0E1 		mov	r3, r3, asl #16
 3014 0cd8 2338A0E1 		mov	r3, r3, lsr #16
 3015 0cdc 8330A0E1 		mov	r3, r3, asl #1
 3016 0ce0 0338A0E1 		mov	r3, r3, asl #16
 3017 0ce4 2318A0E1 		mov	r1, r3, lsr #16
 3018 0ce8 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3019 0cec 013063E0 		rsb	r3, r3, r1
 3020 0cf0 0338A0E1 		mov	r3, r3, asl #16
 3021 0cf4 2338A0E1 		mov	r3, r3, lsr #16
 3022 0cf8 0200A0E1 		mov	r0, r2
 3023 0cfc 0310A0E1 		mov	r1, r3
 3024 0d00 0020A0E3 		mov	r2, #0
 3025 0d04 FEFFFFEB 		bl	lcd_putpixel
 215:../src/lcd.c  ****     			lcd_putpixel(2*(x+col) - x - 1, 2*(y+row) - y, WHITE );
 3026              		.loc 1 215 0
 3027 0d08 B6215BE1 		ldrh	r2, [fp, #-22]
 3028 0d0c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3029 0d10 033082E0 		add	r3, r2, r3
 3030 0d14 0338A0E1 		mov	r3, r3, asl #16
 3031 0d18 2338A0E1 		mov	r3, r3, lsr #16
 3032 0d1c 8330A0E1 		mov	r3, r3, asl #1
 3033 0d20 0338A0E1 		mov	r3, r3, asl #16
 3034 0d24 2328A0E1 		mov	r2, r3, lsr #16
 3035 0d28 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3036 0d2c 023063E0 		rsb	r3, r3, r2
 3037 0d30 0338A0E1 		mov	r3, r3, asl #16
 3038 0d34 2338A0E1 		mov	r3, r3, lsr #16
 3039 0d38 013043E2 		sub	r3, r3, #1
 3040 0d3c 0338A0E1 		mov	r3, r3, asl #16
 3041 0d40 2328A0E1 		mov	r2, r3, lsr #16
 3042 0d44 B8115BE1 		ldrh	r1, [fp, #-24]
 3043 0d48 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3044 0d4c 033081E0 		add	r3, r1, r3
 3045 0d50 0338A0E1 		mov	r3, r3, asl #16
 3046 0d54 2338A0E1 		mov	r3, r3, lsr #16
 3047 0d58 8330A0E1 		mov	r3, r3, asl #1
 3048 0d5c 0338A0E1 		mov	r3, r3, asl #16
 3049 0d60 2318A0E1 		mov	r1, r3, lsr #16
 3050 0d64 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3051 0d68 013063E0 		rsb	r3, r3, r1
 3052 0d6c 0338A0E1 		mov	r3, r3, asl #16
 3053 0d70 2338A0E1 		mov	r3, r3, lsr #16
 3054 0d74 0200A0E1 		mov	r0, r2
 3055 0d78 0310A0E1 		mov	r1, r3
 3056 0d7c 0020A0E3 		mov	r2, #0
 3057 0d80 FEFFFFEB 		bl	lcd_putpixel
 216:../src/lcd.c  ****     			lcd_putpixel(2*(x+col) - x, 2*(y+row) - y  + 1, WHITE );
 3058              		.loc 1 216 0
 3059 0d84 B6215BE1 		ldrh	r2, [fp, #-22]
 3060 0d88 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3061 0d8c 033082E0 		add	r3, r2, r3
 3062 0d90 0338A0E1 		mov	r3, r3, asl #16
 3063 0d94 2338A0E1 		mov	r3, r3, lsr #16
 3064 0d98 8330A0E1 		mov	r3, r3, asl #1
 3065 0d9c 0338A0E1 		mov	r3, r3, asl #16
 3066 0da0 2328A0E1 		mov	r2, r3, lsr #16
 3067 0da4 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3068 0da8 023063E0 		rsb	r3, r3, r2
 3069 0dac 0338A0E1 		mov	r3, r3, asl #16
 3070 0db0 2328A0E1 		mov	r2, r3, lsr #16
 3071 0db4 B8115BE1 		ldrh	r1, [fp, #-24]
 3072 0db8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3073 0dbc 033081E0 		add	r3, r1, r3
 3074 0dc0 0338A0E1 		mov	r3, r3, asl #16
 3075 0dc4 2338A0E1 		mov	r3, r3, lsr #16
 3076 0dc8 8330A0E1 		mov	r3, r3, asl #1
 3077 0dcc 0338A0E1 		mov	r3, r3, asl #16
 3078 0dd0 2318A0E1 		mov	r1, r3, lsr #16
 3079 0dd4 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3080 0dd8 013063E0 		rsb	r3, r3, r1
 3081 0ddc 0338A0E1 		mov	r3, r3, asl #16
 3082 0de0 2338A0E1 		mov	r3, r3, lsr #16
 3083 0de4 013083E2 		add	r3, r3, #1
 3084 0de8 0338A0E1 		mov	r3, r3, asl #16
 3085 0dec 2338A0E1 		mov	r3, r3, lsr #16
 3086 0df0 0200A0E1 		mov	r0, r2
 3087 0df4 0310A0E1 		mov	r1, r3
 3088 0df8 0020A0E3 		mov	r2, #0
 3089 0dfc FEFFFFEB 		bl	lcd_putpixel
 217:../src/lcd.c  ****     			lcd_putpixel(2*(x+col) - x - 1, 2*(y+row) - y + 1, WHITE );
 3090              		.loc 1 217 0
 3091 0e00 B6215BE1 		ldrh	r2, [fp, #-22]
 3092 0e04 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3093 0e08 033082E0 		add	r3, r2, r3
 3094 0e0c 0338A0E1 		mov	r3, r3, asl #16
 3095 0e10 2338A0E1 		mov	r3, r3, lsr #16
 3096 0e14 8330A0E1 		mov	r3, r3, asl #1
 3097 0e18 0338A0E1 		mov	r3, r3, asl #16
 3098 0e1c 2328A0E1 		mov	r2, r3, lsr #16
 3099 0e20 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 3100 0e24 023063E0 		rsb	r3, r3, r2
 3101 0e28 0338A0E1 		mov	r3, r3, asl #16
 3102 0e2c 2338A0E1 		mov	r3, r3, lsr #16
 3103 0e30 013043E2 		sub	r3, r3, #1
 3104 0e34 0338A0E1 		mov	r3, r3, asl #16
 3105 0e38 2328A0E1 		mov	r2, r3, lsr #16
 3106 0e3c B8115BE1 		ldrh	r1, [fp, #-24]
 3107 0e40 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3108 0e44 033081E0 		add	r3, r1, r3
 3109 0e48 0338A0E1 		mov	r3, r3, asl #16
 3110 0e4c 2338A0E1 		mov	r3, r3, lsr #16
 3111 0e50 8330A0E1 		mov	r3, r3, asl #1
 3112 0e54 0338A0E1 		mov	r3, r3, asl #16
 3113 0e58 2318A0E1 		mov	r1, r3, lsr #16
 3114 0e5c B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 3115 0e60 013063E0 		rsb	r3, r3, r1
 3116 0e64 0338A0E1 		mov	r3, r3, asl #16
 3117 0e68 2338A0E1 		mov	r3, r3, lsr #16
 3118 0e6c 013083E2 		add	r3, r3, #1
 3119 0e70 0338A0E1 		mov	r3, r3, asl #16
 3120 0e74 2338A0E1 		mov	r3, r3, lsr #16
 3121 0e78 0200A0E1 		mov	r0, r2
 3122 0e7c 0310A0E1 		mov	r1, r3
 3123 0e80 0020A0E3 		mov	r2, #0
 3124 0e84 FEFFFFEB 		bl	lcd_putpixel
 3125              	.L66:
 206:../src/lcd.c  ****         for( col=0; col<8; col++ ){
 3126              		.loc 1 206 0
 3127 0e88 0E305BE5 		ldrb	r3, [fp, #-14]
 3128 0e8c 013083E2 		add	r3, r3, #1
 3129 0e90 0E304BE5 		strb	r3, [fp, #-14]
 3130              	.L64:
 206:../src/lcd.c  ****         for( col=0; col<8; col++ ){
 3131              		.loc 1 206 0 is_stmt 0 discriminator 1
 3132 0e94 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3133 0e98 070053E3 		cmp	r3, #7
 3134 0e9c F1FEFF9A 		bls	.L67
 205:../src/lcd.c  ****     for( row=0; row<16; row++ ){
 3135              		.loc 1 205 0 is_stmt 1
 3136 0ea0 0D305BE5 		ldrb	r3, [fp, #-13]
 3137 0ea4 013083E2 		add	r3, r3, #1
 3138 0ea8 0D304BE5 		strb	r3, [fp, #-13]
 3139              	.L63:
 205:../src/lcd.c  ****     for( row=0; row<16; row++ ){
 3140              		.loc 1 205 0 is_stmt 0 discriminator 1
 3141 0eac 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3142 0eb0 0F0053E3 		cmp	r3, #15
 3143 0eb4 E8FEFF9A 		bls	.L68
 218:../src/lcd.c  ****             }
 219:../src/lcd.c  **** 
 220:../src/lcd.c  ****             /*if( bitmap[row] & (0x80 >> col) ){
 221:../src/lcd.c  ****                             lcd_putpixel(2*(x+col), 2*(y+row) - y, color );
 222:../src/lcd.c  ****                 			lcd_putpixel(2*(x+col) - 1, 2*(y+row) - y, color );
 223:../src/lcd.c  ****                 			lcd_putpixel(2*(x+col), 2*(y+row) - y + 1, color );
 224:../src/lcd.c  ****                 			lcd_putpixel(2*(x+col) - 1, 2*(y+row) - y + 1, color );
 225:../src/lcd.c  ****                         }
 226:../src/lcd.c  ****                         else{
 227:../src/lcd.c  ****                         	lcd_putpixel(2*(x+col),2*(y+row) - y, WHITE );
 228:../src/lcd.c  ****                         	lcd_putpixel(2*(x+col) - 1, 2*(y+row) - y, WHITE );
 229:../src/lcd.c  ****                         	lcd_putpixel(2*(x+col), 2*(y+row) - y + 1, WHITE );
 230:../src/lcd.c  ****                         	lcd_putpixel(2*(x+col) - 1, 2*(y+row) - y + 1, WHITE );
 231:../src/lcd.c  ****                         }*/
 232:../src/lcd.c  ****         }
 233:../src/lcd.c  ****     }
 234:../src/lcd.c  **** }
 3144              		.loc 1 234 0 is_stmt 1
 3145 0eb8 0CD04BE2 		sub	sp, fp, #12
 3146 0ebc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3147 0ec0 1EFF2FE1 		bx	lr
 3148              	.L70:
 3149              		.align	2
 3150              	.L69:
 3151 0ec4 00000000 		.word	font
 3152              		.cfi_endproc
 3153              	.LFE14:
 3155              		.align	2
 3156              		.global	lcd_puts_x2
 3158              	lcd_puts_x2:
 3159              	.LFB15:
 235:../src/lcd.c  **** 
 236:../src/lcd.c  **** void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
 237:../src/lcd.c  **** {
 3160              		.loc 1 237 0
 3161              		.cfi_startproc
 3162              		@ Function supports interworking.
 3163              		@ args = 0, pretend = 0, frame = 16
 3164              		@ frame_needed = 1, uses_anonymous_args = 0
 3165 0ec8 0DC0A0E1 		mov	ip, sp
 3166              	.LCFI30:
 3167              		.cfi_def_cfa_register 12
 3168 0ecc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3169 0ed0 04B04CE2 		sub	fp, ip, #4
 3170              		.cfi_offset 14, -8
 3171              		.cfi_offset 13, -12
 3172              		.cfi_offset 11, -16
 3173              	.LCFI31:
 3174              		.cfi_def_cfa 11, 4
 3175 0ed4 10D04DE2 		sub	sp, sp, #16
 3176 0ed8 18300BE5 		str	r3, [fp, #-24]
 3177 0edc BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 3178 0ee0 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 3179 0ee4 0230A0E1 		mov	r3, r2
 3180 0ee8 11304BE5 		strb	r3, [fp, #-17]
 238:../src/lcd.c  **** 	while (*s){
 3181              		.loc 1 238 0
 3182 0eec 0B0000EA 		b	.L72
 3183              	.L73:
 239:../src/lcd.c  **** 	    	lcd_putchar_x2(x, y, color, *s);
 3184              		.loc 1 239 0
 3185 0ef0 18301BE5 		ldr	r3, [fp, #-24]
 3186 0ef4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3187 0ef8 BE005BE1 		ldrh	r0, [fp, #-14]
 3188 0efc B0115BE1 		ldrh	r1, [fp, #-16]
 3189 0f00 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 3190 0f04 FEFFFFEB 		bl	lcd_putchar_x2
 240:../src/lcd.c  **** 	    	*++s;
 3191              		.loc 1 240 0
 3192 0f08 18301BE5 		ldr	r3, [fp, #-24]
 3193 0f0c 013083E2 		add	r3, r3, #1
 3194 0f10 18300BE5 		str	r3, [fp, #-24]
 241:../src/lcd.c  **** 	    	x += 16;
 3195              		.loc 1 241 0
 3196 0f14 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3197 0f18 103083E2 		add	r3, r3, #16
 3198 0f1c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3199              	.L72:
 238:../src/lcd.c  **** 	while (*s){
 3200              		.loc 1 238 0 discriminator 1
 3201 0f20 18301BE5 		ldr	r3, [fp, #-24]
 3202 0f24 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3203 0f28 000053E3 		cmp	r3, #0
 3204 0f2c EFFFFF1A 		bne	.L73
 242:../src/lcd.c  **** 	    }
 243:../src/lcd.c  **** }
 3205              		.loc 1 243 0
 3206 0f30 0CD04BE2 		sub	sp, fp, #12
 3207 0f34 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3208 0f38 1EFF2FE1 		bx	lr
 3209              		.cfi_endproc
 3210              	.LFE15:
 3212              		.align	2
 3213              		.global	lcd_putint_x2
 3215              	lcd_putint_x2:
 3216              	.LFB16:
 244:../src/lcd.c  **** 
 245:../src/lcd.c  **** void lcd_putint_x2( uint16 x, uint16 y, uint8 color, int32 i )
 246:../src/lcd.c  **** {
 3217              		.loc 1 246 0
 3218              		.cfi_startproc
 3219              		@ Function supports interworking.
 3220              		@ args = 0, pretend = 0, frame = 40
 3221              		@ frame_needed = 1, uses_anonymous_args = 0
 3222 0f3c 0DC0A0E1 		mov	ip, sp
 3223              	.LCFI32:
 3224              		.cfi_def_cfa_register 12
 3225 0f40 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3226 0f44 04B04CE2 		sub	fp, ip, #4
 3227              		.cfi_offset 14, -8
 3228              		.cfi_offset 13, -12
 3229              		.cfi_offset 11, -16
 3230              	.LCFI33:
 3231              		.cfi_def_cfa 11, 4
 3232 0f48 28D04DE2 		sub	sp, sp, #40
 3233 0f4c 30300BE5 		str	r3, [fp, #-48]
 3234 0f50 B6024BE1 		strh	r0, [fp, #-38]	@ movhi
 3235 0f54 B8124BE1 		strh	r1, [fp, #-40]	@ movhi
 3236 0f58 0230A0E1 		mov	r3, r2
 3237 0f5c 29304BE5 		strb	r3, [fp, #-41]
 247:../src/lcd.c  ****     char buf[16 + 1];
 248:../src/lcd.c  ****     char *p = buf + 16;
 3238              		.loc 1 248 0
 3239 0f60 24304BE2 		sub	r3, fp, #36
 3240 0f64 103083E2 		add	r3, r3, #16
 3241 0f68 10300BE5 		str	r3, [fp, #-16]
 249:../src/lcd.c  ****     uint8 c;
 250:../src/lcd.c  ****     char negativo = 0;
 3242              		.loc 1 250 0
 3243 0f6c 0030A0E3 		mov	r3, #0
 3244 0f70 11304BE5 		strb	r3, [fp, #-17]
 251:../src/lcd.c  **** 
 252:../src/lcd.c  ****     *p = '\0';
 3245              		.loc 1 252 0
 3246 0f74 10301BE5 		ldr	r3, [fp, #-16]
 3247 0f78 0020A0E3 		mov	r2, #0
 3248 0f7c 0020C3E5 		strb	r2, [r3, #0]
 253:../src/lcd.c  **** 
 254:../src/lcd.c  ****     if (i < 0){
 3249              		.loc 1 254 0
 3250 0f80 30301BE5 		ldr	r3, [fp, #-48]
 3251 0f84 000053E3 		cmp	r3, #0
 3252 0f88 040000AA 		bge	.L75
 255:../src/lcd.c  ****         negativo = '1';
 3253              		.loc 1 255 0
 3254 0f8c 3130A0E3 		mov	r3, #49
 3255 0f90 11304BE5 		strb	r3, [fp, #-17]
 256:../src/lcd.c  ****         i *= (-1);
 3256              		.loc 1 256 0
 3257 0f94 30301BE5 		ldr	r3, [fp, #-48]
 3258 0f98 003063E2 		rsb	r3, r3, #0
 3259 0f9c 30300BE5 		str	r3, [fp, #-48]
 3260              	.L75:
 257:../src/lcd.c  ****     }
 258:../src/lcd.c  **** 
 259:../src/lcd.c  ****     do {
 260:../src/lcd.c  ****         c = i % 10;
 3261              		.loc 1 260 0 discriminator 1
 3262 0fa0 30101BE5 		ldr	r1, [fp, #-48]
 3263 0fa4 C0309FE5 		ldr	r3, .L77
 3264 0fa8 9123C3E0 		smull	r2, r3, r1, r3
 3265 0fac 4321A0E1 		mov	r2, r3, asr #2
 3266 0fb0 C13FA0E1 		mov	r3, r1, asr #31
 3267 0fb4 022063E0 		rsb	r2, r3, r2
 3268 0fb8 0230A0E1 		mov	r3, r2
 3269 0fbc 0331A0E1 		mov	r3, r3, asl #2
 3270 0fc0 023083E0 		add	r3, r3, r2
 3271 0fc4 8330A0E1 		mov	r3, r3, asl #1
 3272 0fc8 012063E0 		rsb	r2, r3, r1
 3273 0fcc 0230A0E1 		mov	r3, r2
 3274 0fd0 12304BE5 		strb	r3, [fp, #-18]
 261:../src/lcd.c  ****         *--p = '0' + c;
 3275              		.loc 1 261 0 discriminator 1
 3276 0fd4 10301BE5 		ldr	r3, [fp, #-16]
 3277 0fd8 013043E2 		sub	r3, r3, #1
 3278 0fdc 10300BE5 		str	r3, [fp, #-16]
 3279 0fe0 12305BE5 		ldrb	r3, [fp, #-18]
 3280 0fe4 303083E2 		add	r3, r3, #48
 3281 0fe8 FF2003E2 		and	r2, r3, #255
 3282 0fec 10301BE5 		ldr	r3, [fp, #-16]
 3283 0ff0 0020C3E5 		strb	r2, [r3, #0]
 262:../src/lcd.c  ****         i /= 10;
 3284              		.loc 1 262 0 discriminator 1
 3285 0ff4 30301BE5 		ldr	r3, [fp, #-48]
 3286 0ff8 6C209FE5 		ldr	r2, .L77
 3287 0ffc 9312C2E0 		smull	r1, r2, r3, r2
 3288 1000 4221A0E1 		mov	r2, r2, asr #2
 3289 1004 C33FA0E1 		mov	r3, r3, asr #31
 3290 1008 023063E0 		rsb	r3, r3, r2
 3291 100c 30300BE5 		str	r3, [fp, #-48]
 263:../src/lcd.c  ****     } while( i );
 3292              		.loc 1 263 0 discriminator 1
 3293 1010 30301BE5 		ldr	r3, [fp, #-48]
 3294 1014 000053E3 		cmp	r3, #0
 3295 1018 E0FFFF1A 		bne	.L75
 264:../src/lcd.c  **** 
 265:../src/lcd.c  ****     if (negativo){ *--p = '-';}
 3296              		.loc 1 265 0
 3297 101c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3298 1020 000053E3 		cmp	r3, #0
 3299 1024 0500000A 		beq	.L76
 3300              		.loc 1 265 0 is_stmt 0 discriminator 1
 3301 1028 10301BE5 		ldr	r3, [fp, #-16]
 3302 102c 013043E2 		sub	r3, r3, #1
 3303 1030 10300BE5 		str	r3, [fp, #-16]
 3304 1034 10301BE5 		ldr	r3, [fp, #-16]
 3305 1038 2D20A0E3 		mov	r2, #45
 3306 103c 0020C3E5 		strb	r2, [r3, #0]
 3307              	.L76:
 266:../src/lcd.c  **** 
 267:../src/lcd.c  ****     lcd_puts_x2(x, y, color, p);
 3308              		.loc 1 267 0 is_stmt 1
 3309 1040 B6125BE1 		ldrh	r1, [fp, #-38]
 3310 1044 B8225BE1 		ldrh	r2, [fp, #-40]
 3311 1048 29305BE5 		ldrb	r3, [fp, #-41]	@ zero_extendqisi2
 3312 104c 0100A0E1 		mov	r0, r1
 3313 1050 0210A0E1 		mov	r1, r2
 3314 1054 0320A0E1 		mov	r2, r3
 3315 1058 10301BE5 		ldr	r3, [fp, #-16]
 3316 105c FEFFFFEB 		bl	lcd_puts_x2
 268:../src/lcd.c  **** }
 3317              		.loc 1 268 0
 3318 1060 0CD04BE2 		sub	sp, fp, #12
 3319 1064 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3320 1068 1EFF2FE1 		bx	lr
 3321              	.L78:
 3322              		.align	2
 3323              	.L77:
 3324 106c 67666666 		.word	1717986919
 3325              		.cfi_endproc
 3326              	.LFE16:
 3328              		.align	2
 3329              		.global	lcd_puthex_x2
 3331              	lcd_puthex_x2:
 3332              	.LFB17:
 269:../src/lcd.c  **** 
 270:../src/lcd.c  **** void lcd_puthex_x2( uint16 x, uint16 y, uint8 color, uint32 i )
 271:../src/lcd.c  **** {
 3333              		.loc 1 271 0
 3334              		.cfi_startproc
 3335              		@ Function supports interworking.
 3336              		@ args = 0, pretend = 0, frame = 32
 3337              		@ frame_needed = 1, uses_anonymous_args = 0
 3338 1070 0DC0A0E1 		mov	ip, sp
 3339              	.LCFI34:
 3340              		.cfi_def_cfa_register 12
 3341 1074 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3342 1078 04B04CE2 		sub	fp, ip, #4
 3343              		.cfi_offset 14, -8
 3344              		.cfi_offset 13, -12
 3345              		.cfi_offset 11, -16
 3346              	.LCFI35:
 3347              		.cfi_def_cfa 11, 4
 3348 107c 20D04DE2 		sub	sp, sp, #32
 3349 1080 28300BE5 		str	r3, [fp, #-40]
 3350 1084 BE014BE1 		strh	r0, [fp, #-30]	@ movhi
 3351 1088 B0124BE1 		strh	r1, [fp, #-32]	@ movhi
 3352 108c 0230A0E1 		mov	r3, r2
 3353 1090 21304BE5 		strb	r3, [fp, #-33]
 272:../src/lcd.c  ****     char buf[8 + 1];
 273:../src/lcd.c  ****     char *p = buf + 8;
 3354              		.loc 1 273 0
 3355 1094 1C304BE2 		sub	r3, fp, #28
 3356 1098 083083E2 		add	r3, r3, #8
 3357 109c 10300BE5 		str	r3, [fp, #-16]
 274:../src/lcd.c  ****     uint8 c;
 275:../src/lcd.c  **** 
 276:../src/lcd.c  ****     *p = '\0';
 3358              		.loc 1 276 0
 3359 10a0 10301BE5 		ldr	r3, [fp, #-16]
 3360 10a4 0020A0E3 		mov	r2, #0
 3361 10a8 0020C3E5 		strb	r2, [r3, #0]
 3362              	.L82:
 277:../src/lcd.c  **** 
 278:../src/lcd.c  ****     do {
 279:../src/lcd.c  ****     	c = i & 0xF;
 3363              		.loc 1 279 0
 3364 10ac 28301BE5 		ldr	r3, [fp, #-40]
 3365 10b0 FF3003E2 		and	r3, r3, #255
 3366 10b4 0F3003E2 		and	r3, r3, #15
 3367 10b8 11304BE5 		strb	r3, [fp, #-17]
 280:../src/lcd.c  ****     	if  (c < 10){
 3368              		.loc 1 280 0
 3369 10bc 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3370 10c0 090053E3 		cmp	r3, #9
 3371 10c4 0800008A 		bhi	.L80
 281:../src/lcd.c  ****     		*--p = '0' + c;
 3372              		.loc 1 281 0
 3373 10c8 10301BE5 		ldr	r3, [fp, #-16]
 3374 10cc 013043E2 		sub	r3, r3, #1
 3375 10d0 10300BE5 		str	r3, [fp, #-16]
 3376 10d4 11305BE5 		ldrb	r3, [fp, #-17]
 3377 10d8 303083E2 		add	r3, r3, #48
 3378 10dc FF2003E2 		and	r2, r3, #255
 3379 10e0 10301BE5 		ldr	r3, [fp, #-16]
 3380 10e4 0020C3E5 		strb	r2, [r3, #0]
 3381 10e8 070000EA 		b	.L81
 3382              	.L80:
 282:../src/lcd.c  ****     	}
 283:../src/lcd.c  ****     	else {
 284:../src/lcd.c  ****     		*--p = 'a' + c - 10;
 3383              		.loc 1 284 0
 3384 10ec 10301BE5 		ldr	r3, [fp, #-16]
 3385 10f0 013043E2 		sub	r3, r3, #1
 3386 10f4 10300BE5 		str	r3, [fp, #-16]
 3387 10f8 11305BE5 		ldrb	r3, [fp, #-17]
 3388 10fc 573083E2 		add	r3, r3, #87
 3389 1100 FF2003E2 		and	r2, r3, #255
 3390 1104 10301BE5 		ldr	r3, [fp, #-16]
 3391 1108 0020C3E5 		strb	r2, [r3, #0]
 3392              	.L81:
 285:../src/lcd.c  ****     	}
 286:../src/lcd.c  ****     	i = i >> 4;
 3393              		.loc 1 286 0
 3394 110c 28301BE5 		ldr	r3, [fp, #-40]
 3395 1110 2332A0E1 		mov	r3, r3, lsr #4
 3396 1114 28300BE5 		str	r3, [fp, #-40]
 287:../src/lcd.c  ****     }while(i);
 3397              		.loc 1 287 0
 3398 1118 28301BE5 		ldr	r3, [fp, #-40]
 3399 111c 000053E3 		cmp	r3, #0
 3400 1120 E1FFFF1A 		bne	.L82
 288:../src/lcd.c  **** 
 289:../src/lcd.c  ****     lcd_puts_x2(x, y, color, p);
 3401              		.loc 1 289 0
 3402 1124 BE115BE1 		ldrh	r1, [fp, #-30]
 3403 1128 B0225BE1 		ldrh	r2, [fp, #-32]
 3404 112c 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 3405 1130 0100A0E1 		mov	r0, r1
 3406 1134 0210A0E1 		mov	r1, r2
 3407 1138 0320A0E1 		mov	r2, r3
 3408 113c 10301BE5 		ldr	r3, [fp, #-16]
 3409 1140 FEFFFFEB 		bl	lcd_puts_x2
 290:../src/lcd.c  **** }
 3410              		.loc 1 290 0
 3411 1144 0CD04BE2 		sub	sp, fp, #12
 3412 1148 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3413 114c 1EFF2FE1 		bx	lr
 3414              		.cfi_endproc
 3415              	.LFE17:
 3417              		.align	2
 3418              		.global	lcd_putWallpaper
 3420              	lcd_putWallpaper:
 3421              	.LFB18:
 291:../src/lcd.c  **** 
 292:../src/lcd.c  **** void lcd_putWallpaper( uint8 *bmp )
 293:../src/lcd.c  **** {
 3422              		.loc 1 293 0
 3423              		.cfi_startproc
 3424              		@ Function supports interworking.
 3425              		@ args = 0, pretend = 0, frame = 24
 3426              		@ frame_needed = 1, uses_anonymous_args = 0
 3427 1150 0DC0A0E1 		mov	ip, sp
 3428              	.LCFI36:
 3429              		.cfi_def_cfa_register 12
 3430 1154 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3431 1158 04B04CE2 		sub	fp, ip, #4
 3432              		.cfi_offset 14, -8
 3433              		.cfi_offset 13, -12
 3434              		.cfi_offset 11, -16
 3435              	.LCFI37:
 3436              		.cfi_def_cfa 11, 4
 3437 115c 18D04DE2 		sub	sp, sp, #24
 3438 1160 20000BE5 		str	r0, [fp, #-32]
 294:../src/lcd.c  ****     uint32 headerSize;
 295:../src/lcd.c  **** 
 296:../src/lcd.c  ****     uint16 x, ySrc, yDst;
 297:../src/lcd.c  ****     uint16 offsetSrc, offsetDst;
 298:../src/lcd.c  **** 
 299:../src/lcd.c  ****     headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 3439              		.loc 1 299 0
 3440 1164 20301BE5 		ldr	r3, [fp, #-32]
 3441 1168 0A3083E2 		add	r3, r3, #10
 3442 116c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3443 1170 0320A0E1 		mov	r2, r3
 3444 1174 20301BE5 		ldr	r3, [fp, #-32]
 3445 1178 0B3083E2 		add	r3, r3, #11
 3446 117c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3447 1180 0334A0E1 		mov	r3, r3, asl #8
 3448 1184 032082E0 		add	r2, r2, r3
 3449 1188 20301BE5 		ldr	r3, [fp, #-32]
 3450 118c 0C3083E2 		add	r3, r3, #12
 3451 1190 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3452 1194 0338A0E1 		mov	r3, r3, asl #16
 3453 1198 032082E0 		add	r2, r2, r3
 3454 119c 20301BE5 		ldr	r3, [fp, #-32]
 3455 11a0 0D3083E2 		add	r3, r3, #13
 3456 11a4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3457 11a8 033CA0E1 		mov	r3, r3, asl #24
 3458 11ac 033082E0 		add	r3, r2, r3
 3459 11b0 18300BE5 		str	r3, [fp, #-24]
 300:../src/lcd.c  **** 
 301:../src/lcd.c  ****     bmp = bmp + headerSize;
 3460              		.loc 1 301 0
 3461 11b4 20201BE5 		ldr	r2, [fp, #-32]
 3462 11b8 18301BE5 		ldr	r3, [fp, #-24]
 3463 11bc 033082E0 		add	r3, r2, r3
 3464 11c0 20300BE5 		str	r3, [fp, #-32]
 302:../src/lcd.c  ****     
 303:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3465              		.loc 1 303 0
 3466 11c4 0030A0E3 		mov	r3, #0
 3467 11c8 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 3468 11cc EF30A0E3 		mov	r3, #239
 3469 11d0 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 3470 11d4 2D0000EA 		b	.L84
 3471              	.L87:
 304:../src/lcd.c  ****     {
 305:../src/lcd.c  ****         offsetDst = yDst*LCD_WIDTH/2;
 3472              		.loc 1 305 0
 3473 11d8 B2215BE1 		ldrh	r2, [fp, #-18]
 3474 11dc 0230A0E1 		mov	r3, r2
 3475 11e0 0331A0E1 		mov	r3, r3, asl #2
 3476 11e4 023083E0 		add	r3, r3, r2
 3477 11e8 0333A0E1 		mov	r3, r3, asl #6
 3478 11ec A32FA0E1 		mov	r2, r3, lsr #31
 3479 11f0 033082E0 		add	r3, r2, r3
 3480 11f4 C330A0E1 		mov	r3, r3, asr #1
 3481 11f8 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 306:../src/lcd.c  ****         offsetSrc = ySrc*LCD_WIDTH/2;
 3482              		.loc 1 306 0
 3483 11fc B0215BE1 		ldrh	r2, [fp, #-16]
 3484 1200 0230A0E1 		mov	r3, r2
 3485 1204 0331A0E1 		mov	r3, r3, asl #2
 3486 1208 023083E0 		add	r3, r3, r2
 3487 120c 0333A0E1 		mov	r3, r3, asl #6
 3488 1210 A32FA0E1 		mov	r2, r3, lsr #31
 3489 1214 033082E0 		add	r3, r2, r3
 3490 1218 C330A0E1 		mov	r3, r3, asr #1
 3491 121c BC314BE1 		strh	r3, [fp, #-28]	@ movhi
 307:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3492              		.loc 1 307 0
 3493 1220 0030A0E3 		mov	r3, #0
 3494 1224 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3495 1228 0F0000EA 		b	.L85
 3496              	.L86:
 308:../src/lcd.c  ****             lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 3497              		.loc 1 308 0 discriminator 2
 3498 122c BA215BE1 		ldrh	r2, [fp, #-26]
 3499 1230 BE305BE1 		ldrh	r3, [fp, #-14]
 3500 1234 033082E0 		add	r3, r2, r3
 3501 1238 BC115BE1 		ldrh	r1, [fp, #-28]
 3502 123c BE205BE1 		ldrh	r2, [fp, #-14]
 3503 1240 022081E0 		add	r2, r1, r2
 3504 1244 20101BE5 		ldr	r1, [fp, #-32]
 3505 1248 022081E0 		add	r2, r1, r2
 3506 124c 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3507 1250 0220E0E1 		mvn	r2, r2
 3508 1254 FF1002E2 		and	r1, r2, #255
 3509 1258 48209FE5 		ldr	r2, .L88
 3510 125c 0310C2E7 		strb	r1, [r2, r3]
 307:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3511              		.loc 1 307 0 discriminator 2
 3512 1260 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3513 1264 013083E2 		add	r3, r3, #1
 3514 1268 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3515              	.L85:
 307:../src/lcd.c  ****         for( x=0; x<LCD_WIDTH/2; x++ )
 3516              		.loc 1 307 0 is_stmt 0 discriminator 1
 3517 126c BE305BE1 		ldrh	r3, [fp, #-14]
 3518 1270 9F0053E3 		cmp	r3, #159
 3519 1274 ECFFFF9A 		bls	.L86
 303:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3520              		.loc 1 303 0 is_stmt 1
 3521 1278 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 3522 127c 013083E2 		add	r3, r3, #1
 3523 1280 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 3524 1284 B2315BE1 		ldrh	r3, [fp, #-18]	@ movhi
 3525 1288 013043E2 		sub	r3, r3, #1
 3526 128c B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 3527              	.L84:
 303:../src/lcd.c  ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                              
 3528              		.loc 1 303 0 is_stmt 0 discriminator 1
 3529 1290 B0315BE1 		ldrh	r3, [fp, #-16]
 3530 1294 EF0053E3 		cmp	r3, #239
 3531 1298 CEFFFF9A 		bls	.L87
 309:../src/lcd.c  ****     }
 310:../src/lcd.c  **** }
 3532              		.loc 1 310 0 is_stmt 1
 3533 129c 0CD04BE2 		sub	sp, fp, #12
 3534 12a0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3535 12a4 1EFF2FE1 		bx	lr
 3536              	.L89:
 3537              		.align	2
 3538              	.L88:
 3539 12a8 00000000 		.word	lcd_buffer
 3540              		.cfi_endproc
 3541              	.LFE18:
 3543              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
                            *COM*:00009600 lcd_buffer
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1704   .bss:00000000 state
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1705   .bss:00000000 $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1707   .text:00000000 $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1710   .text:00000000 lcd_init
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1891   .text:000001c0 lcd_off
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1815   .text:00000110 $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1847   .text:00000184 $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1850   .text:00000184 lcd_on
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1884   .text:000001bc $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1888   .text:000001c0 $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1925   .text:000001f8 $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1929   .text:000001fc $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1932   .text:000001fc lcd_status
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1960   .text:00000220 $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1964   .text:00000224 $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:1967   .text:00000224 lcd_clear
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2035   .text:000002a8 lcd_putpixel
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2028   .text:000002a4 $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2032   .text:000002a8 $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2122   .text:00000390 $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2126   .text:00000394 $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2129   .text:00000394 lcd_getpixel
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2194   .text:0000042c $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2198   .text:00000430 $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2201   .text:00000430 lcd_draw_hrow
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2281   .text:000004e8 lcd_draw_vrow
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2361   .text:000005a0 lcd_draw_box
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2425   .text:0000063c lcd_putchar
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2543   .text:0000078c $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2547   .text:00000790 $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2550   .text:00000790 lcd_puts
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2607   .text:00000804 lcd_putint
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2716   .text:00000934 $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2720   .text:00000938 $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2723   .text:00000938 lcd_puthex
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:2812   .text:00000a18 lcd_putchar_x2
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:3151   .text:00000ec4 $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:3155   .text:00000ec8 $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:3158   .text:00000ec8 lcd_puts_x2
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:3215   .text:00000f3c lcd_putint_x2
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:3324   .text:0000106c $d
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:3328   .text:00001070 $a
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:3331   .text:00001070 lcd_puthex_x2
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:3420   .text:00001150 lcd_putWallpaper
C:\Users\DOSTATIC\AppData\Local\Temp\cczXH8qs.s:3539   .text:000012a8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
font
