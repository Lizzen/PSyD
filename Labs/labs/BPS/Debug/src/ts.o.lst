   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"ts.c"
  21              	.Ltext0:
  22              		.file 1 "../src/ts.c"
 1996              		.align	1
 1997              	Vxmin:
 1998 0000 0000     		.space	2
 1999              		.align	1
 2000              	Vxmax:
 2001 0002 0000     		.space	2
 2002              		.align	1
 2003              	Vymin:
 2004 0004 0000     		.space	2
 2005              		.align	1
 2006              	Vymax:
 2007 0006 0000     		.space	2
 2008              	state:
 2009 0008 00       		.space	1
 2010 0009 00       		.text
 2011              		.align	2
 2012              		.global	ts_init
 2014              	ts_init:
 2015              	.LFB0:
   1:../src/ts.c   **** #include <s3c44b0x.h>
   2:../src/ts.c   **** #include <s3cev40.h>
   3:../src/ts.c   **** #include <timers.h>
   4:../src/ts.c   **** #include <adc.h>
   5:../src/ts.c   **** #include <lcd.h>
   6:../src/ts.c   **** #include <ts.h>
   7:../src/ts.c   **** 
   8:../src/ts.c   **** #define PX_ERROR    (5)
   9:../src/ts.c   **** 
  10:../src/ts.c   **** static uint16 Vxmin = 0;
  11:../src/ts.c   **** static uint16 Vxmax = 0;
  12:../src/ts.c   **** static uint16 Vymin = 0;
  13:../src/ts.c   **** static uint16 Vymax = 0;
  14:../src/ts.c   **** 
  15:../src/ts.c   **** static uint8 state;
  16:../src/ts.c   **** 
  17:../src/ts.c   **** extern void isr_TS_dummy( void );
  18:../src/ts.c   **** 
  19:../src/ts.c   **** static void ts_scan( uint16 *Vx, uint16 *Vy );
  20:../src/ts.c   **** static void ts_calibrate( void );
  21:../src/ts.c   **** static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y );
  22:../src/ts.c   **** 
  23:../src/ts.c   **** void ts_init( void )
  24:../src/ts.c   **** {
 2016              		.loc 1 24 0
 2017              		.cfi_startproc
 2018              		@ Function supports interworking.
 2019              		@ args = 0, pretend = 0, frame = 0
 2020              		@ frame_needed = 1, uses_anonymous_args = 0
 2021 0000 0DC0A0E1 		mov	ip, sp
 2022              	.LCFI0:
 2023              		.cfi_def_cfa_register 12
 2024 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2025 0008 04B04CE2 		sub	fp, ip, #4
 2026              		.cfi_offset 14, -8
 2027              		.cfi_offset 13, -12
 2028              		.cfi_offset 11, -16
 2029              	.LCFI1:
 2030              		.cfi_def_cfa 11, 4
  25:../src/ts.c   ****     timers_init();  
 2031              		.loc 1 25 0
 2032 000c FEFFFFEB 		bl	timers_init
  26:../src/ts.c   ****     lcd_init();
 2033              		.loc 1 26 0
 2034 0010 FEFFFFEB 		bl	lcd_init
  27:../src/ts.c   ****     adc_init();
 2035              		.loc 1 27 0
 2036 0014 FEFFFFEB 		bl	adc_init
  28:../src/ts.c   ****     PDATE |= ((1<<7) | (1<<5) | (1<<4));   // (Y-, X-, Y+, X+) = (GND, Z, Z, Z)
 2037              		.loc 1 28 0
 2038 0018 40309FE5 		ldr	r3, .L2
 2039 001c 3C209FE5 		ldr	r2, .L2
 2040 0020 002092E5 		ldr	r2, [r2, #0]
 2041 0024 B02082E3 		orr	r2, r2, #176
 2042 0028 002083E5 		str	r2, [r3, #0]
  29:../src/ts.c   ****     PDATE &= ~(1 << 6);
 2043              		.loc 1 29 0
 2044 002c 2C309FE5 		ldr	r3, .L2
 2045 0030 28209FE5 		ldr	r2, .L2
 2046 0034 002092E5 		ldr	r2, [r2, #0]
 2047 0038 4020C2E3 		bic	r2, r2, #64
 2048 003c 002083E5 		str	r2, [r3, #0]
  30:../src/ts.c   ****     sw_delay_ms( 1 );
 2049              		.loc 1 30 0
 2050 0040 0100A0E3 		mov	r0, #1
 2051 0044 FEFFFFEB 		bl	sw_delay_ms
  31:../src/ts.c   ****     ts_on();
 2052              		.loc 1 31 0
 2053 0048 FEFFFFEB 		bl	ts_on
  32:../src/ts.c   ****     ts_calibrate();
 2054              		.loc 1 32 0
 2055 004c 340000EB 		bl	ts_calibrate
  33:../src/ts.c   ****     ts_off();
 2056              		.loc 1 33 0
 2057 0050 FEFFFFEB 		bl	ts_off
  34:../src/ts.c   **** }
 2058              		.loc 1 34 0
 2059 0054 0CD04BE2 		sub	sp, fp, #12
 2060 0058 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2061 005c 1EFF2FE1 		bx	lr
 2062              	.L3:
 2063              		.align	2
 2064              	.L2:
 2065 0060 2C00D201 		.word	30539820
 2066              		.cfi_endproc
 2067              	.LFE0:
 2069              		.align	2
 2070              		.global	ts_on
 2072              	ts_on:
 2073              	.LFB1:
  35:../src/ts.c   **** 
  36:../src/ts.c   **** void ts_on( void )
  37:../src/ts.c   **** {
 2074              		.loc 1 37 0
 2075              		.cfi_startproc
 2076              		@ Function supports interworking.
 2077              		@ args = 0, pretend = 0, frame = 0
 2078              		@ frame_needed = 1, uses_anonymous_args = 0
 2079 0064 0DC0A0E1 		mov	ip, sp
 2080              	.LCFI2:
 2081              		.cfi_def_cfa_register 12
 2082 0068 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2083 006c 04B04CE2 		sub	fp, ip, #4
 2084              		.cfi_offset 14, -8
 2085              		.cfi_offset 13, -12
 2086              		.cfi_offset 11, -16
 2087              	.LCFI3:
 2088              		.cfi_def_cfa 11, 4
  38:../src/ts.c   ****     adc_on();
 2089              		.loc 1 38 0
 2090 0070 FEFFFFEB 		bl	adc_on
  39:../src/ts.c   ****     state = TS_ON;
 2091              		.loc 1 39 0
 2092 0074 10309FE5 		ldr	r3, .L5
 2093 0078 0020A0E3 		mov	r2, #0
 2094 007c 0020C3E5 		strb	r2, [r3, #0]
  40:../src/ts.c   **** }
 2095              		.loc 1 40 0
 2096 0080 0CD04BE2 		sub	sp, fp, #12
 2097 0084 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2098 0088 1EFF2FE1 		bx	lr
 2099              	.L6:
 2100              		.align	2
 2101              	.L5:
 2102 008c 08000000 		.word	state
 2103              		.cfi_endproc
 2104              	.LFE1:
 2106              		.align	2
 2107              		.global	ts_off
 2109              	ts_off:
 2110              	.LFB2:
  41:../src/ts.c   **** 
  42:../src/ts.c   **** void ts_off( void )
  43:../src/ts.c   **** {
 2111              		.loc 1 43 0
 2112              		.cfi_startproc
 2113              		@ Function supports interworking.
 2114              		@ args = 0, pretend = 0, frame = 0
 2115              		@ frame_needed = 1, uses_anonymous_args = 0
 2116 0090 0DC0A0E1 		mov	ip, sp
 2117              	.LCFI4:
 2118              		.cfi_def_cfa_register 12
 2119 0094 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2120 0098 04B04CE2 		sub	fp, ip, #4
 2121              		.cfi_offset 14, -8
 2122              		.cfi_offset 13, -12
 2123              		.cfi_offset 11, -16
 2124              	.LCFI5:
 2125              		.cfi_def_cfa 11, 4
  44:../src/ts.c   **** 	adc_off();
 2126              		.loc 1 44 0
 2127 009c FEFFFFEB 		bl	adc_off
  45:../src/ts.c   **** 	state = TS_OFF;
 2128              		.loc 1 45 0
 2129 00a0 10309FE5 		ldr	r3, .L8
 2130 00a4 0120A0E3 		mov	r2, #1
 2131 00a8 0020C3E5 		strb	r2, [r3, #0]
  46:../src/ts.c   **** }
 2132              		.loc 1 46 0
 2133 00ac 0CD04BE2 		sub	sp, fp, #12
 2134 00b0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2135 00b4 1EFF2FE1 		bx	lr
 2136              	.L9:
 2137              		.align	2
 2138              	.L8:
 2139 00b8 08000000 		.word	state
 2140              		.cfi_endproc
 2141              	.LFE2:
 2143              		.align	2
 2144              		.global	ts_status
 2146              	ts_status:
 2147              	.LFB3:
  47:../src/ts.c   **** 
  48:../src/ts.c   **** uint8 ts_status( void )
  49:../src/ts.c   **** {
 2148              		.loc 1 49 0
 2149              		.cfi_startproc
 2150              		@ Function supports interworking.
 2151              		@ args = 0, pretend = 0, frame = 0
 2152              		@ frame_needed = 1, uses_anonymous_args = 0
 2153 00bc 0DC0A0E1 		mov	ip, sp
 2154              	.LCFI6:
 2155              		.cfi_def_cfa_register 12
 2156 00c0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2157 00c4 04B04CE2 		sub	fp, ip, #4
 2158              		.cfi_offset 14, -8
 2159              		.cfi_offset 13, -12
 2160              		.cfi_offset 11, -16
 2161              	.LCFI7:
 2162              		.cfi_def_cfa 11, 4
  50:../src/ts.c   ****     return state;
 2163              		.loc 1 50 0
 2164 00c8 10309FE5 		ldr	r3, .L11
 2165 00cc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  51:../src/ts.c   **** }
 2166              		.loc 1 51 0
 2167 00d0 0300A0E1 		mov	r0, r3
 2168 00d4 0CD04BE2 		sub	sp, fp, #12
 2169 00d8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2170 00dc 1EFF2FE1 		bx	lr
 2171              	.L12:
 2172              		.align	2
 2173              	.L11:
 2174 00e0 08000000 		.word	state
 2175              		.cfi_endproc
 2176              	.LFE3:
 2178              		.align	2
 2179              		.global	ts_pressed
 2181              	ts_pressed:
 2182              	.LFB4:
  52:../src/ts.c   **** 
  53:../src/ts.c   **** uint8 ts_pressed( void )
  54:../src/ts.c   **** {
 2183              		.loc 1 54 0
 2184              		.cfi_startproc
 2185              		@ Function supports interworking.
 2186              		@ args = 0, pretend = 0, frame = 0
 2187              		@ frame_needed = 1, uses_anonymous_args = 0
 2188 00e4 0DC0A0E1 		mov	ip, sp
 2189              	.LCFI8:
 2190              		.cfi_def_cfa_register 12
 2191 00e8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2192 00ec 04B04CE2 		sub	fp, ip, #4
 2193              		.cfi_offset 14, -8
 2194              		.cfi_offset 13, -12
 2195              		.cfi_offset 11, -16
 2196              	.LCFI9:
 2197              		.cfi_def_cfa 11, 4
  55:../src/ts.c   ****     if ((PDATG & (1 << 2)) == 0){ // True si el valor del puerto 2 de G es 0
 2198              		.loc 1 55 0
 2199 00f0 28309FE5 		ldr	r3, .L16
 2200 00f4 003093E5 		ldr	r3, [r3, #0]
 2201 00f8 043003E2 		and	r3, r3, #4
 2202 00fc 000053E3 		cmp	r3, #0
 2203 0100 0100001A 		bne	.L14
  56:../src/ts.c   ****     	return '1';
 2204              		.loc 1 56 0
 2205 0104 3130A0E3 		mov	r3, #49
 2206 0108 000000EA 		b	.L15
 2207              	.L14:
  57:../src/ts.c   ****     }
  58:../src/ts.c   **** 
  59:../src/ts.c   ****     return 0;
 2208              		.loc 1 59 0
 2209 010c 0030A0E3 		mov	r3, #0
 2210              	.L15:
  60:../src/ts.c   **** }
 2211              		.loc 1 60 0
 2212 0110 0300A0E1 		mov	r0, r3
 2213 0114 0CD04BE2 		sub	sp, fp, #12
 2214 0118 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2215 011c 1EFF2FE1 		bx	lr
 2216              	.L17:
 2217              		.align	2
 2218              	.L16:
 2219 0120 4400D201 		.word	30539844
 2220              		.cfi_endproc
 2221              	.LFE4:
 2223              		.section	.rodata
 2224              		.align	2
 2225              	.LC0:
 2226 0000 43616C69 		.ascii	"Calibrando LCD: \000"
 2226      6272616E 
 2226      646F204C 
 2226      43443A20 
 2226      00
 2227 0011 000000   		.text
 2228              		.align	2
 2230              	ts_calibrate:
 2231              	.LFB5:
  61:../src/ts.c   **** 
  62:../src/ts.c   **** static void ts_calibrate( void )
  63:../src/ts.c   **** {
 2232              		.loc 1 63 0
 2233              		.cfi_startproc
 2234              		@ Function supports interworking.
 2235              		@ args = 0, pretend = 0, frame = 8
 2236              		@ frame_needed = 1, uses_anonymous_args = 0
 2237 0124 0DC0A0E1 		mov	ip, sp
 2238              	.LCFI10:
 2239              		.cfi_def_cfa_register 12
 2240 0128 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2241 012c 04B04CE2 		sub	fp, ip, #4
 2242              		.cfi_offset 14, -8
 2243              		.cfi_offset 13, -12
 2244              		.cfi_offset 11, -16
 2245              	.LCFI11:
 2246              		.cfi_def_cfa 11, 4
 2247 0130 08D04DE2 		sub	sp, sp, #8
  64:../src/ts.c   ****     uint16 x, y;
  65:../src/ts.c   ****     
  66:../src/ts.c   ****     lcd_on();
 2248              		.loc 1 66 0
 2249 0134 FEFFFFEB 		bl	lcd_on
 2250              	.L23:
  67:../src/ts.c   ****     do {    
  68:../src/ts.c   ****         lcd_clear();
 2251              		.loc 1 68 0
 2252 0138 FEFFFFEB 		bl	lcd_clear
  69:../src/ts.c   ****         lcd_puts(16, 20, BLACK, "Calibrando LCD: ");
 2253              		.loc 1 69 0
 2254 013c 1000A0E3 		mov	r0, #16
 2255 0140 1410A0E3 		mov	r1, #20
 2256 0144 0F20A0E3 		mov	r2, #15
 2257 0148 8C359FE5 		ldr	r3, .L24
 2258 014c FEFFFFEB 		bl	lcd_puts
  70:../src/ts.c   ****     	lcd_putpixel(0,0,BLACK);
 2259              		.loc 1 70 0
 2260 0150 0000A0E3 		mov	r0, #0
 2261 0154 0010A0E3 		mov	r1, #0
 2262 0158 0F20A0E3 		mov	r2, #15
 2263 015c FEFFFFEB 		bl	lcd_putpixel
  71:../src/ts.c   ****     	lcd_putpixel(0,1,BLACK);
 2264              		.loc 1 71 0
 2265 0160 0000A0E3 		mov	r0, #0
 2266 0164 0110A0E3 		mov	r1, #1
 2267 0168 0F20A0E3 		mov	r2, #15
 2268 016c FEFFFFEB 		bl	lcd_putpixel
  72:../src/ts.c   ****     	lcd_putpixel(0,2,BLACK);
 2269              		.loc 1 72 0
 2270 0170 0000A0E3 		mov	r0, #0
 2271 0174 0210A0E3 		mov	r1, #2
 2272 0178 0F20A0E3 		mov	r2, #15
 2273 017c FEFFFFEB 		bl	lcd_putpixel
  73:../src/ts.c   ****     	lcd_putpixel(0,3,BLACK);
 2274              		.loc 1 73 0
 2275 0180 0000A0E3 		mov	r0, #0
 2276 0184 0310A0E3 		mov	r1, #3
 2277 0188 0F20A0E3 		mov	r2, #15
 2278 018c FEFFFFEB 		bl	lcd_putpixel
  74:../src/ts.c   ****     	lcd_putpixel(0,4,BLACK);
 2279              		.loc 1 74 0
 2280 0190 0000A0E3 		mov	r0, #0
 2281 0194 0410A0E3 		mov	r1, #4
 2282 0198 0F20A0E3 		mov	r2, #15
 2283 019c FEFFFFEB 		bl	lcd_putpixel
  75:../src/ts.c   ****     	lcd_putpixel(1,0,BLACK);
 2284              		.loc 1 75 0
 2285 01a0 0100A0E3 		mov	r0, #1
 2286 01a4 0010A0E3 		mov	r1, #0
 2287 01a8 0F20A0E3 		mov	r2, #15
 2288 01ac FEFFFFEB 		bl	lcd_putpixel
  76:../src/ts.c   ****     	lcd_putpixel(1,1,BLACK);
 2289              		.loc 1 76 0
 2290 01b0 0100A0E3 		mov	r0, #1
 2291 01b4 0110A0E3 		mov	r1, #1
 2292 01b8 0F20A0E3 		mov	r2, #15
 2293 01bc FEFFFFEB 		bl	lcd_putpixel
  77:../src/ts.c   ****     	lcd_putpixel(1,2,BLACK);
 2294              		.loc 1 77 0
 2295 01c0 0100A0E3 		mov	r0, #1
 2296 01c4 0210A0E3 		mov	r1, #2
 2297 01c8 0F20A0E3 		mov	r2, #15
 2298 01cc FEFFFFEB 		bl	lcd_putpixel
  78:../src/ts.c   ****     	lcd_putpixel(1,3,BLACK);
 2299              		.loc 1 78 0
 2300 01d0 0100A0E3 		mov	r0, #1
 2301 01d4 0310A0E3 		mov	r1, #3
 2302 01d8 0F20A0E3 		mov	r2, #15
 2303 01dc FEFFFFEB 		bl	lcd_putpixel
  79:../src/ts.c   ****     	lcd_putpixel(1,4,BLACK);
 2304              		.loc 1 79 0
 2305 01e0 0100A0E3 		mov	r0, #1
 2306 01e4 0410A0E3 		mov	r1, #4
 2307 01e8 0F20A0E3 		mov	r2, #15
 2308 01ec FEFFFFEB 		bl	lcd_putpixel
  80:../src/ts.c   ****     	lcd_putpixel(2,0,BLACK);
 2309              		.loc 1 80 0
 2310 01f0 0200A0E3 		mov	r0, #2
 2311 01f4 0010A0E3 		mov	r1, #0
 2312 01f8 0F20A0E3 		mov	r2, #15
 2313 01fc FEFFFFEB 		bl	lcd_putpixel
  81:../src/ts.c   ****     	lcd_putpixel(2,1,BLACK);
 2314              		.loc 1 81 0
 2315 0200 0200A0E3 		mov	r0, #2
 2316 0204 0110A0E3 		mov	r1, #1
 2317 0208 0F20A0E3 		mov	r2, #15
 2318 020c FEFFFFEB 		bl	lcd_putpixel
  82:../src/ts.c   ****     	lcd_putpixel(2,2,BLACK);
 2319              		.loc 1 82 0
 2320 0210 0200A0E3 		mov	r0, #2
 2321 0214 0210A0E3 		mov	r1, #2
 2322 0218 0F20A0E3 		mov	r2, #15
 2323 021c FEFFFFEB 		bl	lcd_putpixel
  83:../src/ts.c   ****     	lcd_putpixel(2,3,BLACK);
 2324              		.loc 1 83 0
 2325 0220 0200A0E3 		mov	r0, #2
 2326 0224 0310A0E3 		mov	r1, #3
 2327 0228 0F20A0E3 		mov	r2, #15
 2328 022c FEFFFFEB 		bl	lcd_putpixel
  84:../src/ts.c   ****     	lcd_putpixel(2,4,BLACK);
 2329              		.loc 1 84 0
 2330 0230 0200A0E3 		mov	r0, #2
 2331 0234 0410A0E3 		mov	r1, #4
 2332 0238 0F20A0E3 		mov	r2, #15
 2333 023c FEFFFFEB 		bl	lcd_putpixel
  85:../src/ts.c   ****     	lcd_putpixel(3,0,BLACK);
 2334              		.loc 1 85 0
 2335 0240 0300A0E3 		mov	r0, #3
 2336 0244 0010A0E3 		mov	r1, #0
 2337 0248 0F20A0E3 		mov	r2, #15
 2338 024c FEFFFFEB 		bl	lcd_putpixel
  86:../src/ts.c   ****     	lcd_putpixel(3,1,BLACK);
 2339              		.loc 1 86 0
 2340 0250 0300A0E3 		mov	r0, #3
 2341 0254 0110A0E3 		mov	r1, #1
 2342 0258 0F20A0E3 		mov	r2, #15
 2343 025c FEFFFFEB 		bl	lcd_putpixel
  87:../src/ts.c   ****     	lcd_putpixel(3,2,BLACK);
 2344              		.loc 1 87 0
 2345 0260 0300A0E3 		mov	r0, #3
 2346 0264 0210A0E3 		mov	r1, #2
 2347 0268 0F20A0E3 		mov	r2, #15
 2348 026c FEFFFFEB 		bl	lcd_putpixel
  88:../src/ts.c   ****     	lcd_putpixel(3,3,BLACK);
 2349              		.loc 1 88 0
 2350 0270 0300A0E3 		mov	r0, #3
 2351 0274 0310A0E3 		mov	r1, #3
 2352 0278 0F20A0E3 		mov	r2, #15
 2353 027c FEFFFFEB 		bl	lcd_putpixel
  89:../src/ts.c   ****     	lcd_putpixel(3,4,BLACK);
 2354              		.loc 1 89 0
 2355 0280 0300A0E3 		mov	r0, #3
 2356 0284 0410A0E3 		mov	r1, #4
 2357 0288 0F20A0E3 		mov	r2, #15
 2358 028c FEFFFFEB 		bl	lcd_putpixel
  90:../src/ts.c   ****     	lcd_putpixel(4,0,BLACK);
 2359              		.loc 1 90 0
 2360 0290 0400A0E3 		mov	r0, #4
 2361 0294 0010A0E3 		mov	r1, #0
 2362 0298 0F20A0E3 		mov	r2, #15
 2363 029c FEFFFFEB 		bl	lcd_putpixel
  91:../src/ts.c   ****     	lcd_putpixel(4,1,BLACK);
 2364              		.loc 1 91 0
 2365 02a0 0400A0E3 		mov	r0, #4
 2366 02a4 0110A0E3 		mov	r1, #1
 2367 02a8 0F20A0E3 		mov	r2, #15
 2368 02ac FEFFFFEB 		bl	lcd_putpixel
  92:../src/ts.c   ****     	lcd_putpixel(4,2,BLACK);
 2369              		.loc 1 92 0
 2370 02b0 0400A0E3 		mov	r0, #4
 2371 02b4 0210A0E3 		mov	r1, #2
 2372 02b8 0F20A0E3 		mov	r2, #15
 2373 02bc FEFFFFEB 		bl	lcd_putpixel
  93:../src/ts.c   ****     	lcd_putpixel(4,3,BLACK);
 2374              		.loc 1 93 0
 2375 02c0 0400A0E3 		mov	r0, #4
 2376 02c4 0310A0E3 		mov	r1, #3
 2377 02c8 0F20A0E3 		mov	r2, #15
 2378 02cc FEFFFFEB 		bl	lcd_putpixel
  94:../src/ts.c   ****     	lcd_putpixel(4,4,BLACK);
 2379              		.loc 1 94 0
 2380 02d0 0400A0E3 		mov	r0, #4
 2381 02d4 0410A0E3 		mov	r1, #4
 2382 02d8 0F20A0E3 		mov	r2, #15
 2383 02dc FEFFFFEB 		bl	lcd_putpixel
  95:../src/ts.c   **** 
  96:../src/ts.c   ****         while(!ts_pressed());
 2384              		.loc 1 96 0
 2385 02e0 0000A0E1 		mov	r0, r0	@ nop
 2386              	.L19:
 2387              		.loc 1 96 0 is_stmt 0 discriminator 1
 2388 02e4 FEFFFFEB 		bl	ts_pressed
 2389 02e8 0030A0E1 		mov	r3, r0
 2390 02ec 000053E3 		cmp	r3, #0
 2391 02f0 FBFFFF0A 		beq	.L19
  97:../src/ts.c   ****         sw_delay_ms( TS_DOWN_DELAY );
 2392              		.loc 1 97 0 is_stmt 1
 2393 02f4 1E00A0E3 		mov	r0, #30
 2394 02f8 FEFFFFEB 		bl	sw_delay_ms
  98:../src/ts.c   ****         ts_scan( &Vxmin, &Vymax );
 2395              		.loc 1 98 0
 2396 02fc DC039FE5 		ldr	r0, .L24+4
 2397 0300 DC139FE5 		ldr	r1, .L24+8
 2398 0304 9A0100EB 		bl	ts_scan
  99:../src/ts.c   ****         while(ts_pressed());
 2399              		.loc 1 99 0
 2400 0308 0000A0E1 		mov	r0, r0	@ nop
 2401              	.L20:
 2402              		.loc 1 99 0 is_stmt 0 discriminator 1
 2403 030c FEFFFFEB 		bl	ts_pressed
 2404 0310 0030A0E1 		mov	r3, r0
 2405 0314 000053E3 		cmp	r3, #0
 2406 0318 FBFFFF1A 		bne	.L20
 100:../src/ts.c   ****         sw_delay_ms( TS_UP_DELAY );
 2407              		.loc 1 100 0 is_stmt 1
 2408 031c 6400A0E3 		mov	r0, #100
 2409 0320 FEFFFFEB 		bl	sw_delay_ms
 101:../src/ts.c   **** 
 102:../src/ts.c   ****         lcd_putpixel(319,239, BLACK);
 2410              		.loc 1 102 0
 2411 0324 BC039FE5 		ldr	r0, .L24+12
 2412 0328 EF10A0E3 		mov	r1, #239
 2413 032c 0F20A0E3 		mov	r2, #15
 2414 0330 FEFFFFEB 		bl	lcd_putpixel
 103:../src/ts.c   ****         lcd_putpixel(318,239, BLACK);
 2415              		.loc 1 103 0
 2416 0334 B0039FE5 		ldr	r0, .L24+16
 2417 0338 EF10A0E3 		mov	r1, #239
 2418 033c 0F20A0E3 		mov	r2, #15
 2419 0340 FEFFFFEB 		bl	lcd_putpixel
 104:../src/ts.c   ****         lcd_putpixel(317,239, BLACK);
 2420              		.loc 1 104 0
 2421 0344 A4039FE5 		ldr	r0, .L24+20
 2422 0348 EF10A0E3 		mov	r1, #239
 2423 034c 0F20A0E3 		mov	r2, #15
 2424 0350 FEFFFFEB 		bl	lcd_putpixel
 105:../src/ts.c   ****         lcd_putpixel(316,239, BLACK);
 2425              		.loc 1 105 0
 2426 0354 4F0FA0E3 		mov	r0, #316
 2427 0358 EF10A0E3 		mov	r1, #239
 2428 035c 0F20A0E3 		mov	r2, #15
 2429 0360 FEFFFFEB 		bl	lcd_putpixel
 106:../src/ts.c   ****         lcd_putpixel(315,239, BLACK);
 2430              		.loc 1 106 0
 2431 0364 88039FE5 		ldr	r0, .L24+24
 2432 0368 EF10A0E3 		mov	r1, #239
 2433 036c 0F20A0E3 		mov	r2, #15
 2434 0370 FEFFFFEB 		bl	lcd_putpixel
 107:../src/ts.c   ****         lcd_putpixel(319,238, BLACK);
 2435              		.loc 1 107 0
 2436 0374 6C039FE5 		ldr	r0, .L24+12
 2437 0378 EE10A0E3 		mov	r1, #238
 2438 037c 0F20A0E3 		mov	r2, #15
 2439 0380 FEFFFFEB 		bl	lcd_putpixel
 108:../src/ts.c   ****         lcd_putpixel(318,238, BLACK);
 2440              		.loc 1 108 0
 2441 0384 60039FE5 		ldr	r0, .L24+16
 2442 0388 EE10A0E3 		mov	r1, #238
 2443 038c 0F20A0E3 		mov	r2, #15
 2444 0390 FEFFFFEB 		bl	lcd_putpixel
 109:../src/ts.c   ****         lcd_putpixel(317,238, BLACK);
 2445              		.loc 1 109 0
 2446 0394 54039FE5 		ldr	r0, .L24+20
 2447 0398 EE10A0E3 		mov	r1, #238
 2448 039c 0F20A0E3 		mov	r2, #15
 2449 03a0 FEFFFFEB 		bl	lcd_putpixel
 110:../src/ts.c   ****         lcd_putpixel(316,238, BLACK);
 2450              		.loc 1 110 0
 2451 03a4 4F0FA0E3 		mov	r0, #316
 2452 03a8 EE10A0E3 		mov	r1, #238
 2453 03ac 0F20A0E3 		mov	r2, #15
 2454 03b0 FEFFFFEB 		bl	lcd_putpixel
 111:../src/ts.c   ****         lcd_putpixel(315,238, BLACK);
 2455              		.loc 1 111 0
 2456 03b4 38039FE5 		ldr	r0, .L24+24
 2457 03b8 EE10A0E3 		mov	r1, #238
 2458 03bc 0F20A0E3 		mov	r2, #15
 2459 03c0 FEFFFFEB 		bl	lcd_putpixel
 112:../src/ts.c   ****         lcd_putpixel(319,237, BLACK);
 2460              		.loc 1 112 0
 2461 03c4 1C039FE5 		ldr	r0, .L24+12
 2462 03c8 ED10A0E3 		mov	r1, #237
 2463 03cc 0F20A0E3 		mov	r2, #15
 2464 03d0 FEFFFFEB 		bl	lcd_putpixel
 113:../src/ts.c   ****         lcd_putpixel(318,237, BLACK);
 2465              		.loc 1 113 0
 2466 03d4 10039FE5 		ldr	r0, .L24+16
 2467 03d8 ED10A0E3 		mov	r1, #237
 2468 03dc 0F20A0E3 		mov	r2, #15
 2469 03e0 FEFFFFEB 		bl	lcd_putpixel
 114:../src/ts.c   ****         lcd_putpixel(317,237, BLACK);
 2470              		.loc 1 114 0
 2471 03e4 04039FE5 		ldr	r0, .L24+20
 2472 03e8 ED10A0E3 		mov	r1, #237
 2473 03ec 0F20A0E3 		mov	r2, #15
 2474 03f0 FEFFFFEB 		bl	lcd_putpixel
 115:../src/ts.c   ****         lcd_putpixel(316,237, BLACK);
 2475              		.loc 1 115 0
 2476 03f4 4F0FA0E3 		mov	r0, #316
 2477 03f8 ED10A0E3 		mov	r1, #237
 2478 03fc 0F20A0E3 		mov	r2, #15
 2479 0400 FEFFFFEB 		bl	lcd_putpixel
 116:../src/ts.c   ****         lcd_putpixel(315,237, BLACK);
 2480              		.loc 1 116 0
 2481 0404 E8029FE5 		ldr	r0, .L24+24
 2482 0408 ED10A0E3 		mov	r1, #237
 2483 040c 0F20A0E3 		mov	r2, #15
 2484 0410 FEFFFFEB 		bl	lcd_putpixel
 117:../src/ts.c   ****         lcd_putpixel(319,236, BLACK);
 2485              		.loc 1 117 0
 2486 0414 CC029FE5 		ldr	r0, .L24+12
 2487 0418 EC10A0E3 		mov	r1, #236
 2488 041c 0F20A0E3 		mov	r2, #15
 2489 0420 FEFFFFEB 		bl	lcd_putpixel
 118:../src/ts.c   ****         lcd_putpixel(318,236, BLACK);
 2490              		.loc 1 118 0
 2491 0424 C0029FE5 		ldr	r0, .L24+16
 2492 0428 EC10A0E3 		mov	r1, #236
 2493 042c 0F20A0E3 		mov	r2, #15
 2494 0430 FEFFFFEB 		bl	lcd_putpixel
 119:../src/ts.c   ****         lcd_putpixel(317,236, BLACK);
 2495              		.loc 1 119 0
 2496 0434 B4029FE5 		ldr	r0, .L24+20
 2497 0438 EC10A0E3 		mov	r1, #236
 2498 043c 0F20A0E3 		mov	r2, #15
 2499 0440 FEFFFFEB 		bl	lcd_putpixel
 120:../src/ts.c   ****         lcd_putpixel(316,236, BLACK);
 2500              		.loc 1 120 0
 2501 0444 4F0FA0E3 		mov	r0, #316
 2502 0448 EC10A0E3 		mov	r1, #236
 2503 044c 0F20A0E3 		mov	r2, #15
 2504 0450 FEFFFFEB 		bl	lcd_putpixel
 121:../src/ts.c   ****         lcd_putpixel(315,236, BLACK);
 2505              		.loc 1 121 0
 2506 0454 98029FE5 		ldr	r0, .L24+24
 2507 0458 EC10A0E3 		mov	r1, #236
 2508 045c 0F20A0E3 		mov	r2, #15
 2509 0460 FEFFFFEB 		bl	lcd_putpixel
 122:../src/ts.c   ****         lcd_putpixel(319,235, BLACK);
 2510              		.loc 1 122 0
 2511 0464 7C029FE5 		ldr	r0, .L24+12
 2512 0468 EB10A0E3 		mov	r1, #235
 2513 046c 0F20A0E3 		mov	r2, #15
 2514 0470 FEFFFFEB 		bl	lcd_putpixel
 123:../src/ts.c   ****         lcd_putpixel(318,235, BLACK);
 2515              		.loc 1 123 0
 2516 0474 70029FE5 		ldr	r0, .L24+16
 2517 0478 EB10A0E3 		mov	r1, #235
 2518 047c 0F20A0E3 		mov	r2, #15
 2519 0480 FEFFFFEB 		bl	lcd_putpixel
 124:../src/ts.c   ****         lcd_putpixel(317,235, BLACK);
 2520              		.loc 1 124 0
 2521 0484 64029FE5 		ldr	r0, .L24+20
 2522 0488 EB10A0E3 		mov	r1, #235
 2523 048c 0F20A0E3 		mov	r2, #15
 2524 0490 FEFFFFEB 		bl	lcd_putpixel
 125:../src/ts.c   ****         lcd_putpixel(316,235, BLACK);
 2525              		.loc 1 125 0
 2526 0494 4F0FA0E3 		mov	r0, #316
 2527 0498 EB10A0E3 		mov	r1, #235
 2528 049c 0F20A0E3 		mov	r2, #15
 2529 04a0 FEFFFFEB 		bl	lcd_putpixel
 126:../src/ts.c   ****         lcd_putpixel(315,235, BLACK);
 2530              		.loc 1 126 0
 2531 04a4 48029FE5 		ldr	r0, .L24+24
 2532 04a8 EB10A0E3 		mov	r1, #235
 2533 04ac 0F20A0E3 		mov	r2, #15
 2534 04b0 FEFFFFEB 		bl	lcd_putpixel
 127:../src/ts.c   ****            
 128:../src/ts.c   ****         while(!ts_pressed());
 2535              		.loc 1 128 0
 2536 04b4 0000A0E1 		mov	r0, r0	@ nop
 2537              	.L21:
 2538              		.loc 1 128 0 is_stmt 0 discriminator 1
 2539 04b8 FEFFFFEB 		bl	ts_pressed
 2540 04bc 0030A0E1 		mov	r3, r0
 2541 04c0 000053E3 		cmp	r3, #0
 2542 04c4 FBFFFF0A 		beq	.L21
 129:../src/ts.c   ****         sw_delay_ms( TS_DOWN_DELAY );
 2543              		.loc 1 129 0 is_stmt 1
 2544 04c8 1E00A0E3 		mov	r0, #30
 2545 04cc FEFFFFEB 		bl	sw_delay_ms
 130:../src/ts.c   ****         ts_scan( &Vxmax, &Vymin );
 2546              		.loc 1 130 0
 2547 04d0 20029FE5 		ldr	r0, .L24+28
 2548 04d4 20129FE5 		ldr	r1, .L24+32
 2549 04d8 250100EB 		bl	ts_scan
 131:../src/ts.c   ****         while(ts_pressed());
 2550              		.loc 1 131 0
 2551 04dc 0000A0E1 		mov	r0, r0	@ nop
 2552              	.L22:
 2553              		.loc 1 131 0 is_stmt 0 discriminator 1
 2554 04e0 FEFFFFEB 		bl	ts_pressed
 2555 04e4 0030A0E1 		mov	r3, r0
 2556 04e8 000053E3 		cmp	r3, #0
 2557 04ec FBFFFF1A 		bne	.L22
 132:../src/ts.c   ****         sw_delay_ms( TS_UP_DELAY );
 2558              		.loc 1 132 0 is_stmt 1
 2559 04f0 6400A0E3 		mov	r0, #100
 2560 04f4 FEFFFFEB 		bl	sw_delay_ms
 133:../src/ts.c   ****     
 134:../src/ts.c   ****         lcd_putpixel(160,120, BLACK);
 2561              		.loc 1 134 0
 2562 04f8 A000A0E3 		mov	r0, #160
 2563 04fc 7810A0E3 		mov	r1, #120
 2564 0500 0F20A0E3 		mov	r2, #15
 2565 0504 FEFFFFEB 		bl	lcd_putpixel
 135:../src/ts.c   ****         lcd_putpixel(159,120, BLACK);
 2566              		.loc 1 135 0
 2567 0508 9F00A0E3 		mov	r0, #159
 2568 050c 7810A0E3 		mov	r1, #120
 2569 0510 0F20A0E3 		mov	r2, #15
 2570 0514 FEFFFFEB 		bl	lcd_putpixel
 136:../src/ts.c   ****         lcd_putpixel(158,120, BLACK);
 2571              		.loc 1 136 0
 2572 0518 9E00A0E3 		mov	r0, #158
 2573 051c 7810A0E3 		mov	r1, #120
 2574 0520 0F20A0E3 		mov	r2, #15
 2575 0524 FEFFFFEB 		bl	lcd_putpixel
 137:../src/ts.c   ****         lcd_putpixel(161,120,BLACK);
 2576              		.loc 1 137 0
 2577 0528 A100A0E3 		mov	r0, #161
 2578 052c 7810A0E3 		mov	r1, #120
 2579 0530 0F20A0E3 		mov	r2, #15
 2580 0534 FEFFFFEB 		bl	lcd_putpixel
 138:../src/ts.c   ****         lcd_putpixel(162,120, BLACK);
 2581              		.loc 1 138 0
 2582 0538 A200A0E3 		mov	r0, #162
 2583 053c 7810A0E3 		mov	r1, #120
 2584 0540 0F20A0E3 		mov	r2, #15
 2585 0544 FEFFFFEB 		bl	lcd_putpixel
 139:../src/ts.c   ****         lcd_putpixel(160,121, BLACK);
 2586              		.loc 1 139 0
 2587 0548 A000A0E3 		mov	r0, #160
 2588 054c 7910A0E3 		mov	r1, #121
 2589 0550 0F20A0E3 		mov	r2, #15
 2590 0554 FEFFFFEB 		bl	lcd_putpixel
 140:../src/ts.c   ****         lcd_putpixel(159,121, BLACK);
 2591              		.loc 1 140 0
 2592 0558 9F00A0E3 		mov	r0, #159
 2593 055c 7910A0E3 		mov	r1, #121
 2594 0560 0F20A0E3 		mov	r2, #15
 2595 0564 FEFFFFEB 		bl	lcd_putpixel
 141:../src/ts.c   ****         lcd_putpixel(158,121, BLACK);
 2596              		.loc 1 141 0
 2597 0568 9E00A0E3 		mov	r0, #158
 2598 056c 7910A0E3 		mov	r1, #121
 2599 0570 0F20A0E3 		mov	r2, #15
 2600 0574 FEFFFFEB 		bl	lcd_putpixel
 142:../src/ts.c   ****         lcd_putpixel(161,121,BLACK);
 2601              		.loc 1 142 0
 2602 0578 A100A0E3 		mov	r0, #161
 2603 057c 7910A0E3 		mov	r1, #121
 2604 0580 0F20A0E3 		mov	r2, #15
 2605 0584 FEFFFFEB 		bl	lcd_putpixel
 143:../src/ts.c   ****         lcd_putpixel(162,121, BLACK);
 2606              		.loc 1 143 0
 2607 0588 A200A0E3 		mov	r0, #162
 2608 058c 7910A0E3 		mov	r1, #121
 2609 0590 0F20A0E3 		mov	r2, #15
 2610 0594 FEFFFFEB 		bl	lcd_putpixel
 144:../src/ts.c   ****         lcd_putpixel(160,122, BLACK);
 2611              		.loc 1 144 0
 2612 0598 A000A0E3 		mov	r0, #160
 2613 059c 7A10A0E3 		mov	r1, #122
 2614 05a0 0F20A0E3 		mov	r2, #15
 2615 05a4 FEFFFFEB 		bl	lcd_putpixel
 145:../src/ts.c   ****         lcd_putpixel(159,122, BLACK);
 2616              		.loc 1 145 0
 2617 05a8 9F00A0E3 		mov	r0, #159
 2618 05ac 7A10A0E3 		mov	r1, #122
 2619 05b0 0F20A0E3 		mov	r2, #15
 2620 05b4 FEFFFFEB 		bl	lcd_putpixel
 146:../src/ts.c   ****         lcd_putpixel(158,122, BLACK);
 2621              		.loc 1 146 0
 2622 05b8 9E00A0E3 		mov	r0, #158
 2623 05bc 7A10A0E3 		mov	r1, #122
 2624 05c0 0F20A0E3 		mov	r2, #15
 2625 05c4 FEFFFFEB 		bl	lcd_putpixel
 147:../src/ts.c   ****         lcd_putpixel(161,122,BLACK);
 2626              		.loc 1 147 0
 2627 05c8 A100A0E3 		mov	r0, #161
 2628 05cc 7A10A0E3 		mov	r1, #122
 2629 05d0 0F20A0E3 		mov	r2, #15
 2630 05d4 FEFFFFEB 		bl	lcd_putpixel
 148:../src/ts.c   ****         lcd_putpixel(162,122, BLACK);
 2631              		.loc 1 148 0
 2632 05d8 A200A0E3 		mov	r0, #162
 2633 05dc 7A10A0E3 		mov	r1, #122
 2634 05e0 0F20A0E3 		mov	r2, #15
 2635 05e4 FEFFFFEB 		bl	lcd_putpixel
 149:../src/ts.c   ****         lcd_putpixel(160,119, BLACK);
 2636              		.loc 1 149 0
 2637 05e8 A000A0E3 		mov	r0, #160
 2638 05ec 7710A0E3 		mov	r1, #119
 2639 05f0 0F20A0E3 		mov	r2, #15
 2640 05f4 FEFFFFEB 		bl	lcd_putpixel
 150:../src/ts.c   ****         lcd_putpixel(159,119, BLACK);
 2641              		.loc 1 150 0
 2642 05f8 9F00A0E3 		mov	r0, #159
 2643 05fc 7710A0E3 		mov	r1, #119
 2644 0600 0F20A0E3 		mov	r2, #15
 2645 0604 FEFFFFEB 		bl	lcd_putpixel
 151:../src/ts.c   ****         lcd_putpixel(158,119, BLACK);
 2646              		.loc 1 151 0
 2647 0608 9E00A0E3 		mov	r0, #158
 2648 060c 7710A0E3 		mov	r1, #119
 2649 0610 0F20A0E3 		mov	r2, #15
 2650 0614 FEFFFFEB 		bl	lcd_putpixel
 152:../src/ts.c   ****         lcd_putpixel(161,119,BLACK);
 2651              		.loc 1 152 0
 2652 0618 A100A0E3 		mov	r0, #161
 2653 061c 7710A0E3 		mov	r1, #119
 2654 0620 0F20A0E3 		mov	r2, #15
 2655 0624 FEFFFFEB 		bl	lcd_putpixel
 153:../src/ts.c   ****         lcd_putpixel(162,119, BLACK);
 2656              		.loc 1 153 0
 2657 0628 A200A0E3 		mov	r0, #162
 2658 062c 7710A0E3 		mov	r1, #119
 2659 0630 0F20A0E3 		mov	r2, #15
 2660 0634 FEFFFFEB 		bl	lcd_putpixel
 154:../src/ts.c   ****         lcd_putpixel(160,118, BLACK);
 2661              		.loc 1 154 0
 2662 0638 A000A0E3 		mov	r0, #160
 2663 063c 7610A0E3 		mov	r1, #118
 2664 0640 0F20A0E3 		mov	r2, #15
 2665 0644 FEFFFFEB 		bl	lcd_putpixel
 155:../src/ts.c   ****         lcd_putpixel(159,118, BLACK);
 2666              		.loc 1 155 0
 2667 0648 9F00A0E3 		mov	r0, #159
 2668 064c 7610A0E3 		mov	r1, #118
 2669 0650 0F20A0E3 		mov	r2, #15
 2670 0654 FEFFFFEB 		bl	lcd_putpixel
 156:../src/ts.c   ****         lcd_putpixel(158,118, BLACK);
 2671              		.loc 1 156 0
 2672 0658 9E00A0E3 		mov	r0, #158
 2673 065c 7610A0E3 		mov	r1, #118
 2674 0660 0F20A0E3 		mov	r2, #15
 2675 0664 FEFFFFEB 		bl	lcd_putpixel
 157:../src/ts.c   ****         lcd_putpixel(161,118,BLACK);
 2676              		.loc 1 157 0
 2677 0668 A100A0E3 		mov	r0, #161
 2678 066c 7610A0E3 		mov	r1, #118
 2679 0670 0F20A0E3 		mov	r2, #15
 2680 0674 FEFFFFEB 		bl	lcd_putpixel
 158:../src/ts.c   ****         lcd_putpixel(162,118, BLACK);
 2681              		.loc 1 158 0
 2682 0678 A200A0E3 		mov	r0, #162
 2683 067c 7610A0E3 		mov	r1, #118
 2684 0680 0F20A0E3 		mov	r2, #15
 2685 0684 FEFFFFEB 		bl	lcd_putpixel
 159:../src/ts.c   **** 
 160:../src/ts.c   ****         ts_getpos( &x, &y );      
 2686              		.loc 1 160 0
 2687 0688 0E204BE2 		sub	r2, fp, #14
 2688 068c 10304BE2 		sub	r3, fp, #16
 2689 0690 0200A0E1 		mov	r0, r2
 2690 0694 0310A0E1 		mov	r1, r3
 2691 0698 FEFFFFEB 		bl	ts_getpos
 161:../src/ts.c   ****     
 162:../src/ts.c   ****     } while( (x > LCD_WIDTH/2+PX_ERROR) || (x < LCD_WIDTH/2-PX_ERROR) || (y > LCD_HEIGHT/2+PX_ERROR
 2692              		.loc 1 162 0
 2693 069c BE305BE1 		ldrh	r3, [fp, #-14]
 2694 06a0 A50053E3 		cmp	r3, #165
 2695 06a4 A3FEFF8A 		bhi	.L23
 2696              		.loc 1 162 0 is_stmt 0 discriminator 1
 2697 06a8 BE305BE1 		ldrh	r3, [fp, #-14]
 2698 06ac 9A0053E3 		cmp	r3, #154
 2699 06b0 A0FEFF9A 		bls	.L23
 2700 06b4 B0315BE1 		ldrh	r3, [fp, #-16]
 2701 06b8 7D0053E3 		cmp	r3, #125
 2702 06bc 9DFEFF8A 		bhi	.L23
 2703 06c0 B0315BE1 		ldrh	r3, [fp, #-16]
 2704 06c4 720053E3 		cmp	r3, #114
 2705 06c8 9AFEFF9A 		bls	.L23
 163:../src/ts.c   ****     lcd_clear();
 2706              		.loc 1 163 0 is_stmt 1
 2707 06cc FEFFFFEB 		bl	lcd_clear
 164:../src/ts.c   **** }
 2708              		.loc 1 164 0
 2709 06d0 0CD04BE2 		sub	sp, fp, #12
 2710 06d4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2711 06d8 1EFF2FE1 		bx	lr
 2712              	.L25:
 2713              		.align	2
 2714              	.L24:
 2715 06dc 00000000 		.word	.LC0
 2716 06e0 00000000 		.word	Vxmin
 2717 06e4 06000000 		.word	Vymax
 2718 06e8 3F010000 		.word	319
 2719 06ec 3E010000 		.word	318
 2720 06f0 3D010000 		.word	317
 2721 06f4 3B010000 		.word	315
 2722 06f8 02000000 		.word	Vxmax
 2723 06fc 04000000 		.word	Vymin
 2724              		.cfi_endproc
 2725              	.LFE5:
 2727              		.align	2
 2728              		.global	ts_getpos
 2730              	ts_getpos:
 2731              	.LFB6:
 165:../src/ts.c   **** 
 166:../src/ts.c   **** void ts_getpos( uint16 *x, uint16 *y )
 167:../src/ts.c   **** {
 2732              		.loc 1 167 0
 2733              		.cfi_startproc
 2734              		@ Function supports interworking.
 2735              		@ args = 0, pretend = 0, frame = 16
 2736              		@ frame_needed = 1, uses_anonymous_args = 0
 2737 0700 0DC0A0E1 		mov	ip, sp
 2738              	.LCFI12:
 2739              		.cfi_def_cfa_register 12
 2740 0704 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2741 0708 04B04CE2 		sub	fp, ip, #4
 2742              		.cfi_offset 14, -8
 2743              		.cfi_offset 13, -12
 2744              		.cfi_offset 11, -16
 2745              	.LCFI13:
 2746              		.cfi_def_cfa 11, 4
 2747 070c 10D04DE2 		sub	sp, sp, #16
 2748 0710 18000BE5 		str	r0, [fp, #-24]
 2749 0714 1C100BE5 		str	r1, [fp, #-28]
 168:../src/ts.c   **** 	uint16 Vx = 0;
 2750              		.loc 1 168 0
 2751 0718 0030A0E3 		mov	r3, #0
 2752 071c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 169:../src/ts.c   **** 	uint16 Vy = 0;
 2753              		.loc 1 169 0
 2754 0720 0030A0E3 		mov	r3, #0
 2755 0724 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 170:../src/ts.c   **** 
 171:../src/ts.c   ****     while(!ts_pressed());
 2756              		.loc 1 171 0
 2757 0728 0000A0E1 		mov	r0, r0	@ nop
 2758              	.L27:
 2759              		.loc 1 171 0 is_stmt 0 discriminator 1
 2760 072c FEFFFFEB 		bl	ts_pressed
 2761 0730 0030A0E1 		mov	r3, r0
 2762 0734 000053E3 		cmp	r3, #0
 2763 0738 FBFFFF0A 		beq	.L27
 172:../src/ts.c   ****     sw_delay_ms( TS_DOWN_DELAY );
 2764              		.loc 1 172 0 is_stmt 1
 2765 073c 1E00A0E3 		mov	r0, #30
 2766 0740 FEFFFFEB 		bl	sw_delay_ms
 173:../src/ts.c   ****     ts_scan( &Vx, &Vy );
 2767              		.loc 1 173 0
 2768 0744 0E204BE2 		sub	r2, fp, #14
 2769 0748 10304BE2 		sub	r3, fp, #16
 2770 074c 0200A0E1 		mov	r0, r2
 2771 0750 0310A0E1 		mov	r1, r3
 2772 0754 860000EB 		bl	ts_scan
 174:../src/ts.c   ****     while(ts_pressed());
 2773              		.loc 1 174 0
 2774 0758 0000A0E1 		mov	r0, r0	@ nop
 2775              	.L28:
 2776              		.loc 1 174 0 is_stmt 0 discriminator 1
 2777 075c FEFFFFEB 		bl	ts_pressed
 2778 0760 0030A0E1 		mov	r3, r0
 2779 0764 000053E3 		cmp	r3, #0
 2780 0768 FBFFFF1A 		bne	.L28
 175:../src/ts.c   ****     sw_delay_ms( TS_UP_DELAY );
 2781              		.loc 1 175 0 is_stmt 1
 2782 076c 6400A0E3 		mov	r0, #100
 2783 0770 FEFFFFEB 		bl	sw_delay_ms
 176:../src/ts.c   **** 
 177:../src/ts.c   ****     ts_sample2coord(Vx, Vy, x, y);
 2784              		.loc 1 177 0
 2785 0774 BE205BE1 		ldrh	r2, [fp, #-14]
 2786 0778 B0315BE1 		ldrh	r3, [fp, #-16]
 2787 077c 0200A0E1 		mov	r0, r2
 2788 0780 0310A0E1 		mov	r1, r3
 2789 0784 18201BE5 		ldr	r2, [fp, #-24]
 2790 0788 1C301BE5 		ldr	r3, [fp, #-28]
 2791 078c AE0000EB 		bl	ts_sample2coord
 178:../src/ts.c   **** }
 2792              		.loc 1 178 0
 2793 0790 0CD04BE2 		sub	sp, fp, #12
 2794 0794 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2795 0798 1EFF2FE1 		bx	lr
 2796              		.cfi_endproc
 2797              	.LFE6:
 2799              		.align	2
 2800              		.global	ts_getpostime
 2802              	ts_getpostime:
 2803              	.LFB7:
 179:../src/ts.c   **** 
 180:../src/ts.c   **** void ts_getpostime( uint16 *x, uint16 *y, uint16 *ms )
 181:../src/ts.c   **** {
 2804              		.loc 1 181 0
 2805              		.cfi_startproc
 2806              		@ Function supports interworking.
 2807              		@ args = 0, pretend = 0, frame = 24
 2808              		@ frame_needed = 1, uses_anonymous_args = 0
 2809 079c 0DC0A0E1 		mov	ip, sp
 2810              	.LCFI14:
 2811              		.cfi_def_cfa_register 12
 2812 07a0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2813 07a4 04B04CE2 		sub	fp, ip, #4
 2814              		.cfi_offset 14, -8
 2815              		.cfi_offset 13, -12
 2816              		.cfi_offset 11, -16
 2817              	.LCFI15:
 2818              		.cfi_def_cfa 11, 4
 2819 07a8 18D04DE2 		sub	sp, sp, #24
 2820 07ac 18000BE5 		str	r0, [fp, #-24]
 2821 07b0 1C100BE5 		str	r1, [fp, #-28]
 2822 07b4 20200BE5 		str	r2, [fp, #-32]
 182:../src/ts.c   **** 	uint16 Vx = 0;
 2823              		.loc 1 182 0
 2824 07b8 0030A0E3 		mov	r3, #0
 2825 07bc BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 183:../src/ts.c   **** 	uint16 Vy = 0;
 2826              		.loc 1 183 0
 2827 07c0 0030A0E3 		mov	r3, #0
 2828 07c4 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 184:../src/ts.c   **** 
 185:../src/ts.c   ****     while(!ts_pressed());
 2829              		.loc 1 185 0
 2830 07c8 0000A0E1 		mov	r0, r0	@ nop
 2831              	.L30:
 2832              		.loc 1 185 0 is_stmt 0 discriminator 1
 2833 07cc FEFFFFEB 		bl	ts_pressed
 2834 07d0 0030A0E1 		mov	r3, r0
 2835 07d4 000053E3 		cmp	r3, #0
 2836 07d8 FBFFFF0A 		beq	.L30
 186:../src/ts.c   ****     timer3_start();
 2837              		.loc 1 186 0 is_stmt 1
 2838 07dc FEFFFFEB 		bl	timer3_start
 187:../src/ts.c   ****     sw_delay_ms( TS_DOWN_DELAY );
 2839              		.loc 1 187 0
 2840 07e0 1E00A0E3 		mov	r0, #30
 2841 07e4 FEFFFFEB 		bl	sw_delay_ms
 188:../src/ts.c   ****     ts_scan( &Vx, &Vy );
 2842              		.loc 1 188 0
 2843 07e8 0E204BE2 		sub	r2, fp, #14
 2844 07ec 10304BE2 		sub	r3, fp, #16
 2845 07f0 0200A0E1 		mov	r0, r2
 2846 07f4 0310A0E1 		mov	r1, r3
 2847 07f8 5D0000EB 		bl	ts_scan
 189:../src/ts.c   **** 
 190:../src/ts.c   ****     while(ts_pressed());
 2848              		.loc 1 190 0
 2849 07fc 0000A0E1 		mov	r0, r0	@ nop
 2850              	.L31:
 2851              		.loc 1 190 0 is_stmt 0 discriminator 1
 2852 0800 FEFFFFEB 		bl	ts_pressed
 2853 0804 0030A0E1 		mov	r3, r0
 2854 0808 000053E3 		cmp	r3, #0
 2855 080c FBFFFF1A 		bne	.L31
 191:../src/ts.c   ****     *ms = timer3_stop() /10;
 2856              		.loc 1 191 0 is_stmt 1
 2857 0810 FEFFFFEB 		bl	timer3_stop
 2858 0814 0030A0E1 		mov	r3, r0
 2859 0818 0320A0E1 		mov	r2, r3
 2860 081c 44309FE5 		ldr	r3, .L32
 2861 0820 921383E0 		umull	r1, r3, r2, r3
 2862 0824 A331A0E1 		mov	r3, r3, lsr #3
 2863 0828 0338A0E1 		mov	r3, r3, asl #16
 2864 082c 2328A0E1 		mov	r2, r3, lsr #16
 2865 0830 20301BE5 		ldr	r3, [fp, #-32]
 2866 0834 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 192:../src/ts.c   ****     sw_delay_ms( TS_UP_DELAY );
 2867              		.loc 1 192 0
 2868 0838 6400A0E3 		mov	r0, #100
 2869 083c FEFFFFEB 		bl	sw_delay_ms
 193:../src/ts.c   **** 
 194:../src/ts.c   ****     ts_sample2coord(Vx, Vy, x, y);
 2870              		.loc 1 194 0
 2871 0840 BE205BE1 		ldrh	r2, [fp, #-14]
 2872 0844 B0315BE1 		ldrh	r3, [fp, #-16]
 2873 0848 0200A0E1 		mov	r0, r2
 2874 084c 0310A0E1 		mov	r1, r3
 2875 0850 18201BE5 		ldr	r2, [fp, #-24]
 2876 0854 1C301BE5 		ldr	r3, [fp, #-28]
 2877 0858 7B0000EB 		bl	ts_sample2coord
 195:../src/ts.c   **** }
 2878              		.loc 1 195 0
 2879 085c 0CD04BE2 		sub	sp, fp, #12
 2880 0860 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2881 0864 1EFF2FE1 		bx	lr
 2882              	.L33:
 2883              		.align	2
 2884              	.L32:
 2885 0868 CDCCCCCC 		.word	-858993459
 2886              		.cfi_endproc
 2887              	.LFE7:
 2889              		.align	2
 2890              		.global	ts_timeout_getpos
 2892              	ts_timeout_getpos:
 2893              	.LFB8:
 196:../src/ts.c   **** 
 197:../src/ts.c   **** uint8 ts_timeout_getpos( uint16 *x, uint16 *y, uint16 ms )
 198:../src/ts.c   **** {
 2894              		.loc 1 198 0
 2895              		.cfi_startproc
 2896              		@ Function supports interworking.
 2897              		@ args = 0, pretend = 0, frame = 24
 2898              		@ frame_needed = 1, uses_anonymous_args = 0
 2899 086c 0DC0A0E1 		mov	ip, sp
 2900              	.LCFI16:
 2901              		.cfi_def_cfa_register 12
 2902 0870 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2903 0874 04B04CE2 		sub	fp, ip, #4
 2904              		.cfi_offset 14, -8
 2905              		.cfi_offset 13, -12
 2906              		.cfi_offset 11, -16
 2907              	.LCFI17:
 2908              		.cfi_def_cfa 11, 4
 2909 0878 18D04DE2 		sub	sp, sp, #24
 2910 087c 18000BE5 		str	r0, [fp, #-24]
 2911 0880 1C100BE5 		str	r1, [fp, #-28]
 2912 0884 0230A0E1 		mov	r3, r2
 2913 0888 BE314BE1 		strh	r3, [fp, #-30]	@ movhi
 199:../src/ts.c   **** 	uint16 Vx = 0;
 2914              		.loc 1 199 0
 2915 088c 0030A0E3 		mov	r3, #0
 2916 0890 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 200:../src/ts.c   **** 	uint16 Vy = 0;
 2917              		.loc 1 200 0
 2918 0894 0030A0E3 		mov	r3, #0
 2919 0898 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 201:../src/ts.c   **** 
 202:../src/ts.c   **** 	timer3_start_timeout(10*ms);
 2920              		.loc 1 202 0
 2921 089c BE315BE1 		ldrh	r3, [fp, #-30]	@ movhi
 2922 08a0 0320A0E1 		mov	r2, r3	@ movhi
 2923 08a4 0221A0E1 		mov	r2, r2, asl #2
 2924 08a8 033082E0 		add	r3, r2, r3
 2925 08ac 8330A0E1 		mov	r3, r3, asl #1
 2926 08b0 0338A0E1 		mov	r3, r3, asl #16
 2927 08b4 2338A0E1 		mov	r3, r3, lsr #16
 2928 08b8 0300A0E1 		mov	r0, r3
 2929 08bc FEFFFFEB 		bl	timer3_start_timeout
 203:../src/ts.c   **** 	while (!timer3_timeout() && !ts_pressed());
 2930              		.loc 1 203 0
 2931 08c0 0000A0E1 		mov	r0, r0	@ nop
 2932              	.L36:
 2933              		.loc 1 203 0 is_stmt 0 discriminator 1
 2934 08c4 FEFFFFEB 		bl	timer3_timeout
 2935 08c8 0030A0E1 		mov	r3, r0
 2936 08cc 000053E3 		cmp	r3, #0
 2937 08d0 0300001A 		bne	.L35
 2938              		.loc 1 203 0 discriminator 2
 2939 08d4 FEFFFFEB 		bl	ts_pressed
 2940 08d8 0030A0E1 		mov	r3, r0
 2941 08dc 000053E3 		cmp	r3, #0
 2942 08e0 F7FFFF0A 		beq	.L36
 2943              	.L35:
 204:../src/ts.c   **** 	if (timer3_timeout()){
 2944              		.loc 1 204 0 is_stmt 1
 2945 08e4 FEFFFFEB 		bl	timer3_timeout
 2946 08e8 0030A0E1 		mov	r3, r0
 2947 08ec 000053E3 		cmp	r3, #0
 2948 08f0 0100000A 		beq	.L37
 205:../src/ts.c   **** 		return TS_TIMEOUT;
 2949              		.loc 1 205 0
 2950 08f4 FE30A0E3 		mov	r3, #254
 2951 08f8 190000EA 		b	.L38
 2952              	.L37:
 206:../src/ts.c   **** 	}
 207:../src/ts.c   **** 	else{
 208:../src/ts.c   **** 		sw_delay_ms( TS_DOWN_DELAY );
 2953              		.loc 1 208 0
 2954 08fc 1E00A0E3 		mov	r0, #30
 2955 0900 FEFFFFEB 		bl	sw_delay_ms
 209:../src/ts.c   **** 		ts_scan( &Vx, &Vy );
 2956              		.loc 1 209 0
 2957 0904 0E204BE2 		sub	r2, fp, #14
 2958 0908 10304BE2 		sub	r3, fp, #16
 2959 090c 0200A0E1 		mov	r0, r2
 2960 0910 0310A0E1 		mov	r1, r3
 2961 0914 160000EB 		bl	ts_scan
 210:../src/ts.c   **** 
 211:../src/ts.c   **** 		while(timer3_timeout() && ts_pressed());
 2962              		.loc 1 211 0
 2963 0918 0000A0E1 		mov	r0, r0	@ nop
 2964              	.L40:
 2965              		.loc 1 211 0 is_stmt 0 discriminator 1
 2966 091c FEFFFFEB 		bl	timer3_timeout
 2967 0920 0030A0E1 		mov	r3, r0
 2968 0924 000053E3 		cmp	r3, #0
 2969 0928 0300000A 		beq	.L39
 2970              		.loc 1 211 0 discriminator 2
 2971 092c FEFFFFEB 		bl	ts_pressed
 2972 0930 0030A0E1 		mov	r3, r0
 2973 0934 000053E3 		cmp	r3, #0
 2974 0938 F7FFFF1A 		bne	.L40
 2975              	.L39:
 212:../src/ts.c   **** 		sw_delay_ms( TS_UP_DELAY );
 2976              		.loc 1 212 0 is_stmt 1
 2977 093c 6400A0E3 		mov	r0, #100
 2978 0940 FEFFFFEB 		bl	sw_delay_ms
 213:../src/ts.c   **** 		ts_sample2coord(Vx, Vy, x, y);
 2979              		.loc 1 213 0
 2980 0944 BE205BE1 		ldrh	r2, [fp, #-14]
 2981 0948 B0315BE1 		ldrh	r3, [fp, #-16]
 2982 094c 0200A0E1 		mov	r0, r2
 2983 0950 0310A0E1 		mov	r1, r3
 2984 0954 18201BE5 		ldr	r2, [fp, #-24]
 2985 0958 1C301BE5 		ldr	r3, [fp, #-28]
 2986 095c 3A0000EB 		bl	ts_sample2coord
 214:../src/ts.c   **** 
 215:../src/ts.c   **** 		return TS_OK; // No deja devolver ts_sample2coord(es funcion void) asi que pense que debe devolve
 2987              		.loc 1 215 0
 2988 0960 0130A0E3 		mov	r3, #1
 2989              	.L38:
 216:../src/ts.c   **** 	}
 217:../src/ts.c   **** }
 2990              		.loc 1 217 0
 2991 0964 0300A0E1 		mov	r0, r3
 2992 0968 0CD04BE2 		sub	sp, fp, #12
 2993 096c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2994 0970 1EFF2FE1 		bx	lr
 2995              		.cfi_endproc
 2996              	.LFE8:
 2998              		.align	2
 3000              	ts_scan:
 3001              	.LFB9:
 218:../src/ts.c   **** 
 219:../src/ts.c   **** static void ts_scan( uint16 *Vx, uint16 *Vy )
 220:../src/ts.c   **** {
 3002              		.loc 1 220 0
 3003              		.cfi_startproc
 3004              		@ Function supports interworking.
 3005              		@ args = 0, pretend = 0, frame = 8
 3006              		@ frame_needed = 1, uses_anonymous_args = 0
 3007 0974 0DC0A0E1 		mov	ip, sp
 3008              	.LCFI18:
 3009              		.cfi_def_cfa_register 12
 3010 0978 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3011 097c 04B04CE2 		sub	fp, ip, #4
 3012              		.cfi_offset 14, -8
 3013              		.cfi_offset 13, -12
 3014              		.cfi_offset 11, -16
 3015              	.LCFI19:
 3016              		.cfi_def_cfa 11, 4
 3017 0980 08D04DE2 		sub	sp, sp, #8
 3018 0984 10000BE5 		str	r0, [fp, #-16]
 3019 0988 14100BE5 		str	r1, [fp, #-20]
 221:../src/ts.c   **** 	PDATE |= ((1<<6) | (1<<5));     // (Y-, X-, Y+, X+) = (Z, GND, Z, Vdd )
 3020              		.loc 1 221 0
 3021 098c B4309FE5 		ldr	r3, .L42
 3022 0990 B0209FE5 		ldr	r2, .L42
 3023 0994 002092E5 		ldr	r2, [r2, #0]
 3024 0998 602082E3 		orr	r2, r2, #96
 3025 099c 002083E5 		str	r2, [r3, #0]
 222:../src/ts.c   **** 	PDATE &= ~((1 << 7) | (1 << 4));
 3026              		.loc 1 222 0
 3027 09a0 A0309FE5 		ldr	r3, .L42
 3028 09a4 9C209FE5 		ldr	r2, .L42
 3029 09a8 002092E5 		ldr	r2, [r2, #0]
 3030 09ac 9020C2E3 		bic	r2, r2, #144
 3031 09b0 002083E5 		str	r2, [r3, #0]
 223:../src/ts.c   ****     *Vx = adc_getSample(ADC_AIN1);
 3032              		.loc 1 223 0
 3033 09b4 0100A0E3 		mov	r0, #1
 3034 09b8 FEFFFFEB 		bl	adc_getSample
 3035 09bc 0030A0E1 		mov	r3, r0
 3036 09c0 0320A0E1 		mov	r2, r3
 3037 09c4 10301BE5 		ldr	r3, [fp, #-16]
 3038 09c8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 224:../src/ts.c   ****     
 225:../src/ts.c   ****     PDATE |= ((1<<7) | (1<<4));     // (Y-, X-, Y+, X+) = (GND, Z, Vdd, Z)
 3039              		.loc 1 225 0
 3040 09cc 74309FE5 		ldr	r3, .L42
 3041 09d0 70209FE5 		ldr	r2, .L42
 3042 09d4 002092E5 		ldr	r2, [r2, #0]
 3043 09d8 902082E3 		orr	r2, r2, #144
 3044 09dc 002083E5 		str	r2, [r3, #0]
 226:../src/ts.c   ****     PDATE &= ~((1 << 6) | (1 << 5));
 3045              		.loc 1 226 0
 3046 09e0 60309FE5 		ldr	r3, .L42
 3047 09e4 5C209FE5 		ldr	r2, .L42
 3048 09e8 002092E5 		ldr	r2, [r2, #0]
 3049 09ec 6020C2E3 		bic	r2, r2, #96
 3050 09f0 002083E5 		str	r2, [r3, #0]
 227:../src/ts.c   ****     *Vy = adc_getSample(ADC_AIN0);
 3051              		.loc 1 227 0
 3052 09f4 0000A0E3 		mov	r0, #0
 3053 09f8 FEFFFFEB 		bl	adc_getSample
 3054 09fc 0030A0E1 		mov	r3, r0
 3055 0a00 0320A0E1 		mov	r2, r3
 3056 0a04 14301BE5 		ldr	r3, [fp, #-20]
 3057 0a08 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 228:../src/ts.c   ****     
 229:../src/ts.c   ****     PDATE |= (1<<7) | (1<<5) | (1<<4);   // (Y-, X-, Y+, X+) = (GND, Z, Z, Z)
 3058              		.loc 1 229 0
 3059 0a0c 34309FE5 		ldr	r3, .L42
 3060 0a10 30209FE5 		ldr	r2, .L42
 3061 0a14 002092E5 		ldr	r2, [r2, #0]
 3062 0a18 B02082E3 		orr	r2, r2, #176
 3063 0a1c 002083E5 		str	r2, [r3, #0]
 230:../src/ts.c   ****     PDATE &= ~(1 << 6);
 3064              		.loc 1 230 0
 3065 0a20 20309FE5 		ldr	r3, .L42
 3066 0a24 1C209FE5 		ldr	r2, .L42
 3067 0a28 002092E5 		ldr	r2, [r2, #0]
 3068 0a2c 4020C2E3 		bic	r2, r2, #64
 3069 0a30 002083E5 		str	r2, [r3, #0]
 231:../src/ts.c   ****     sw_delay_ms( 1 );
 3070              		.loc 1 231 0
 3071 0a34 0100A0E3 		mov	r0, #1
 3072 0a38 FEFFFFEB 		bl	sw_delay_ms
 232:../src/ts.c   **** }
 3073              		.loc 1 232 0
 3074 0a3c 0CD04BE2 		sub	sp, fp, #12
 3075 0a40 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3076 0a44 1EFF2FE1 		bx	lr
 3077              	.L43:
 3078              		.align	2
 3079              	.L42:
 3080 0a48 2C00D201 		.word	30539820
 3081              		.cfi_endproc
 3082              	.LFE9:
 3084              		.global	__aeabi_idiv
 3085              		.align	2
 3087              	ts_sample2coord:
 3088              	.LFB10:
 233:../src/ts.c   **** 
 234:../src/ts.c   **** static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y )
 235:../src/ts.c   **** {
 3089              		.loc 1 235 0
 3090              		.cfi_startproc
 3091              		@ Function supports interworking.
 3092              		@ args = 0, pretend = 0, frame = 16
 3093              		@ frame_needed = 1, uses_anonymous_args = 0
 3094 0a4c 0DC0A0E1 		mov	ip, sp
 3095              	.LCFI20:
 3096              		.cfi_def_cfa_register 12
 3097 0a50 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3098 0a54 04B04CE2 		sub	fp, ip, #4
 3099              		.cfi_offset 14, -8
 3100              		.cfi_offset 13, -12
 3101              		.cfi_offset 11, -16
 3102              	.LCFI21:
 3103              		.cfi_def_cfa 11, 4
 3104 0a58 10D04DE2 		sub	sp, sp, #16
 3105 0a5c 14200BE5 		str	r2, [fp, #-20]
 3106 0a60 18300BE5 		str	r3, [fp, #-24]
 3107 0a64 BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 3108 0a68 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 236:../src/ts.c   ****     if( Vx < Vxmin )
 3109              		.loc 1 236 0
 3110 0a6c 58319FE5 		ldr	r3, .L51
 3111 0a70 B030D3E1 		ldrh	r3, [r3, #0]
 3112 0a74 BE205BE1 		ldrh	r2, [fp, #-14]
 3113 0a78 030052E1 		cmp	r2, r3
 3114 0a7c 0300002A 		bcs	.L45
 237:../src/ts.c   ****         *x = 0;
 3115              		.loc 1 237 0
 3116 0a80 14301BE5 		ldr	r3, [fp, #-20]
 3117 0a84 0020A0E3 		mov	r2, #0
 3118 0a88 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3119 0a8c 1F0000EA 		b	.L46
 3120              	.L45:
 238:../src/ts.c   ****     else if( Vx > Vxmax )
 3121              		.loc 1 238 0
 3122 0a90 38319FE5 		ldr	r3, .L51+4
 3123 0a94 B030D3E1 		ldrh	r3, [r3, #0]
 3124 0a98 BE205BE1 		ldrh	r2, [fp, #-14]
 3125 0a9c 030052E1 		cmp	r2, r3
 3126 0aa0 0300009A 		bls	.L47
 239:../src/ts.c   ****         *x = LCD_WIDTH-1;
 3127              		.loc 1 239 0
 3128 0aa4 14301BE5 		ldr	r3, [fp, #-20]
 3129 0aa8 24219FE5 		ldr	r2, .L51+8
 3130 0aac B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3131 0ab0 160000EA 		b	.L46
 3132              	.L47:
 240:../src/ts.c   ****     else 
 241:../src/ts.c   ****         *x = (LCD_WIDTH*(Vx-Vxmin)) / (Vxmax-Vxmin);
 3133              		.loc 1 241 0
 3134 0ab4 BE205BE1 		ldrh	r2, [fp, #-14]
 3135 0ab8 0C319FE5 		ldr	r3, .L51
 3136 0abc B030D3E1 		ldrh	r3, [r3, #0]
 3137 0ac0 022063E0 		rsb	r2, r3, r2
 3138 0ac4 0230A0E1 		mov	r3, r2
 3139 0ac8 0331A0E1 		mov	r3, r3, asl #2
 3140 0acc 023083E0 		add	r3, r3, r2
 3141 0ad0 0333A0E1 		mov	r3, r3, asl #6
 3142 0ad4 0320A0E1 		mov	r2, r3
 3143 0ad8 F0309FE5 		ldr	r3, .L51+4
 3144 0adc B030D3E1 		ldrh	r3, [r3, #0]
 3145 0ae0 0310A0E1 		mov	r1, r3
 3146 0ae4 E0309FE5 		ldr	r3, .L51
 3147 0ae8 B030D3E1 		ldrh	r3, [r3, #0]
 3148 0aec 013063E0 		rsb	r3, r3, r1
 3149 0af0 0200A0E1 		mov	r0, r2
 3150 0af4 0310A0E1 		mov	r1, r3
 3151 0af8 FEFFFFEB 		bl	__aeabi_idiv
 3152 0afc 0030A0E1 		mov	r3, r0
 3153 0b00 0338A0E1 		mov	r3, r3, asl #16
 3154 0b04 2328A0E1 		mov	r2, r3, lsr #16
 3155 0b08 14301BE5 		ldr	r3, [fp, #-20]
 3156 0b0c B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3157              	.L46:
 242:../src/ts.c   **** 
 243:../src/ts.c   ****     if( Vy < Vymin )
 3158              		.loc 1 243 0
 3159 0b10 C0309FE5 		ldr	r3, .L51+12
 3160 0b14 B030D3E1 		ldrh	r3, [r3, #0]
 3161 0b18 B0215BE1 		ldrh	r2, [fp, #-16]
 3162 0b1c 030052E1 		cmp	r2, r3
 3163 0b20 0300002A 		bcs	.L48
 244:../src/ts.c   ****         *y = LCD_HEIGHT-1;
 3164              		.loc 1 244 0
 3165 0b24 18301BE5 		ldr	r3, [fp, #-24]
 3166 0b28 EF20A0E3 		mov	r2, #239
 3167 0b2c B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3168 0b30 220000EA 		b	.L44
 3169              	.L48:
 245:../src/ts.c   ****     else if( Vy > Vymax )
 3170              		.loc 1 245 0
 3171 0b34 A0309FE5 		ldr	r3, .L51+16
 3172 0b38 B030D3E1 		ldrh	r3, [r3, #0]
 3173 0b3c B0215BE1 		ldrh	r2, [fp, #-16]
 3174 0b40 030052E1 		cmp	r2, r3
 3175 0b44 0300009A 		bls	.L50
 246:../src/ts.c   ****         *y = 0;
 3176              		.loc 1 246 0
 3177 0b48 18301BE5 		ldr	r3, [fp, #-24]
 3178 0b4c 0020A0E3 		mov	r2, #0
 3179 0b50 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3180 0b54 190000EA 		b	.L44
 3181              	.L50:
 247:../src/ts.c   ****     else
 248:../src/ts.c   ****         *y = (LCD_HEIGHT -1) - (LCD_HEIGHT*(Vy-Vymin) / (Vymax-Vymin));
 3182              		.loc 1 248 0
 3183 0b58 B0215BE1 		ldrh	r2, [fp, #-16]
 3184 0b5c 74309FE5 		ldr	r3, .L51+12
 3185 0b60 B030D3E1 		ldrh	r3, [r3, #0]
 3186 0b64 022063E0 		rsb	r2, r3, r2
 3187 0b68 0230A0E1 		mov	r3, r2
 3188 0b6c 0332A0E1 		mov	r3, r3, asl #4
 3189 0b70 033062E0 		rsb	r3, r2, r3
 3190 0b74 0332A0E1 		mov	r3, r3, asl #4
 3191 0b78 0320A0E1 		mov	r2, r3
 3192 0b7c 58309FE5 		ldr	r3, .L51+16
 3193 0b80 B030D3E1 		ldrh	r3, [r3, #0]
 3194 0b84 0310A0E1 		mov	r1, r3
 3195 0b88 48309FE5 		ldr	r3, .L51+12
 3196 0b8c B030D3E1 		ldrh	r3, [r3, #0]
 3197 0b90 013063E0 		rsb	r3, r3, r1
 3198 0b94 0200A0E1 		mov	r0, r2
 3199 0b98 0310A0E1 		mov	r1, r3
 3200 0b9c FEFFFFEB 		bl	__aeabi_idiv
 3201 0ba0 0030A0E1 		mov	r3, r0
 3202 0ba4 0338A0E1 		mov	r3, r3, asl #16
 3203 0ba8 2338A0E1 		mov	r3, r3, lsr #16
 3204 0bac EF3063E2 		rsb	r3, r3, #239
 3205 0bb0 0338A0E1 		mov	r3, r3, asl #16
 3206 0bb4 2328A0E1 		mov	r2, r3, lsr #16
 3207 0bb8 18301BE5 		ldr	r3, [fp, #-24]
 3208 0bbc B020C3E1 		strh	r2, [r3, #0]	@ movhi
 3209              	.L44:
 249:../src/ts.c   **** }
 3210              		.loc 1 249 0
 3211 0bc0 0CD04BE2 		sub	sp, fp, #12
 3212 0bc4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3213 0bc8 1EFF2FE1 		bx	lr
 3214              	.L52:
 3215              		.align	2
 3216              	.L51:
 3217 0bcc 00000000 		.word	Vxmin
 3218 0bd0 02000000 		.word	Vxmax
 3219 0bd4 3F010000 		.word	319
 3220 0bd8 04000000 		.word	Vymin
 3221 0bdc 06000000 		.word	Vymax
 3222              		.cfi_endproc
 3223              	.LFE10:
 3225              		.align	2
 3226              		.global	ts_open
 3228              	ts_open:
 3229              	.LFB11:
 250:../src/ts.c   **** 
 251:../src/ts.c   **** void ts_open( void (*isr)(void) )
 252:../src/ts.c   **** {
 3230              		.loc 1 252 0
 3231              		.cfi_startproc
 3232              		@ Function supports interworking.
 3233              		@ args = 0, pretend = 0, frame = 8
 3234              		@ frame_needed = 1, uses_anonymous_args = 0
 3235 0be0 0DC0A0E1 		mov	ip, sp
 3236              	.LCFI22:
 3237              		.cfi_def_cfa_register 12
 3238 0be4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3239 0be8 04B04CE2 		sub	fp, ip, #4
 3240              		.cfi_offset 14, -8
 3241              		.cfi_offset 13, -12
 3242              		.cfi_offset 11, -16
 3243              	.LCFI23:
 3244              		.cfi_def_cfa 11, 4
 3245 0bec 08D04DE2 		sub	sp, sp, #8
 3246 0bf0 10000BE5 		str	r0, [fp, #-16]
 253:../src/ts.c   **** 	pISR_TS = (uint32)isr;
 3247              		.loc 1 253 0
 3248 0bf4 30309FE5 		ldr	r3, .L54
 3249 0bf8 10201BE5 		ldr	r2, [fp, #-16]
 3250 0bfc 002083E5 		str	r2, [r3, #0]
 254:../src/ts.c   **** 	I_ISPC = BIT_EINT4567;
 3251              		.loc 1 254 0
 3252 0c00 28309FE5 		ldr	r3, .L54+4
 3253 0c04 0226A0E3 		mov	r2, #2097152
 3254 0c08 002083E5 		str	r2, [r3, #0]
 255:../src/ts.c   **** 	INTMSK   &= ~(BIT_GLOBAL | BIT_EINT4567);
 3255              		.loc 1 255 0
 3256 0c0c 20309FE5 		ldr	r3, .L54+8
 3257 0c10 1C209FE5 		ldr	r2, .L54+8
 3258 0c14 002092E5 		ldr	r2, [r2, #0]
 3259 0c18 4226C2E3 		bic	r2, r2, #69206016
 3260 0c1c 002083E5 		str	r2, [r3, #0]
 256:../src/ts.c   **** }
 3261              		.loc 1 256 0
 3262 0c20 0CD04BE2 		sub	sp, fp, #12
 3263 0c24 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3264 0c28 1EFF2FE1 		bx	lr
 3265              	.L55:
 3266              		.align	2
 3267              	.L54:
 3268 0c2c 7CFF7F0C 		.word	209715068
 3269 0c30 2400E001 		.word	31457316
 3270 0c34 0C00E001 		.word	31457292
 3271              		.cfi_endproc
 3272              	.LFE11:
 3274              		.align	2
 3275              		.global	ts_close
 3277              	ts_close:
 3278              	.LFB12:
 257:../src/ts.c   **** 
 258:../src/ts.c   **** void ts_close( void )
 259:../src/ts.c   **** {
 3279              		.loc 1 259 0
 3280              		.cfi_startproc
 3281              		@ Function supports interworking.
 3282              		@ args = 0, pretend = 0, frame = 0
 3283              		@ frame_needed = 1, uses_anonymous_args = 0
 3284 0c38 0DC0A0E1 		mov	ip, sp
 3285              	.LCFI24:
 3286              		.cfi_def_cfa_register 12
 3287 0c3c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3288 0c40 04B04CE2 		sub	fp, ip, #4
 3289              		.cfi_offset 14, -8
 3290              		.cfi_offset 13, -12
 3291              		.cfi_offset 11, -16
 3292              	.LCFI25:
 3293              		.cfi_def_cfa 11, 4
 260:../src/ts.c   **** 	INTMSK   |= BIT_EINT4567;
 3294              		.loc 1 260 0
 3295 0c44 24309FE5 		ldr	r3, .L57
 3296 0c48 20209FE5 		ldr	r2, .L57
 3297 0c4c 002092E5 		ldr	r2, [r2, #0]
 3298 0c50 022682E3 		orr	r2, r2, #2097152
 3299 0c54 002083E5 		str	r2, [r3, #0]
 261:../src/ts.c   **** 	pISR_ADC = (uint32)isr_TS_dummy;
 3300              		.loc 1 261 0
 3301 0c58 14309FE5 		ldr	r3, .L57+4
 3302 0c5c 14209FE5 		ldr	r2, .L57+8
 3303 0c60 002083E5 		str	r2, [r3, #0]
 262:../src/ts.c   **** }
 3304              		.loc 1 262 0
 3305 0c64 0CD04BE2 		sub	sp, fp, #12
 3306 0c68 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3307 0c6c 1EFF2FE1 		bx	lr
 3308              	.L58:
 3309              		.align	2
 3310              	.L57:
 3311 0c70 0C00E001 		.word	31457292
 3312 0c74 20FF7F0C 		.word	209714976
 3313 0c78 00000000 		.word	isr_TS_dummy
 3314              		.cfi_endproc
 3315              	.LFE12:
 3317              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 ts.c
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:1996   .bss:00000000 $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:1997   .bss:00000000 Vxmin
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2000   .bss:00000002 Vxmax
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2003   .bss:00000004 Vymin
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2006   .bss:00000006 Vymax
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2008   .bss:00000008 state
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2011   .text:00000000 $a
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2014   .text:00000000 ts_init
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2072   .text:00000064 ts_on
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2230   .text:00000124 ts_calibrate
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2109   .text:00000090 ts_off
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2065   .text:00000060 $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2069   .text:00000064 $a
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2102   .text:0000008c $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2106   .text:00000090 $a
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2139   .text:000000b8 $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2143   .text:000000bc $a
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2146   .text:000000bc ts_status
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2174   .text:000000e0 $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2178   .text:000000e4 $a
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2181   .text:000000e4 ts_pressed
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2219   .text:00000120 $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2224   .rodata:00000000 $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2228   .text:00000124 $a
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:3000   .text:00000974 ts_scan
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2730   .text:00000700 ts_getpos
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2715   .text:000006dc $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2727   .text:00000700 $a
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:3087   .text:00000a4c ts_sample2coord
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2802   .text:0000079c ts_getpostime
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2885   .text:00000868 $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2889   .text:0000086c $a
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:2892   .text:0000086c ts_timeout_getpos
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:3080   .text:00000a48 $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:3085   .text:00000a4c $a
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:3217   .text:00000bcc $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:3225   .text:00000be0 $a
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:3228   .text:00000be0 ts_open
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:3268   .text:00000c2c $d
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:3274   .text:00000c38 $a
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:3277   .text:00000c38 ts_close
C:\Users\DOSTATIC\AppData\Local\Temp\ccvq7F9U.s:3311   .text:00000c70 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
timers_init
lcd_init
adc_init
sw_delay_ms
adc_on
adc_off
lcd_on
lcd_clear
lcd_puts
lcd_putpixel
timer3_start
timer3_stop
timer3_start_timeout
timer3_timeout
adc_getSample
__aeabi_idiv
isr_TS_dummy
