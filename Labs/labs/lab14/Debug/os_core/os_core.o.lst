   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"os_core.c"
  21              	.Ltext0:
  22              		.file 1 "../os_core/os_core.c"
 1671              		.align	2
 1674              	OSMapTbl:
 1675 0000 01       		.byte	1
 1676 0001 02       		.byte	2
 1677 0002 04       		.byte	4
 1678 0003 08       		.byte	8
 1679 0004 10       		.byte	16
 1680 0005 20       		.byte	32
 1681 0006 40       		.byte	64
 1682 0007 80       		.byte	-128
 1683              		.global	OSUnMapTbl
 1684              		.align	2
 1687              	OSUnMapTbl:
 1688 0008 00       		.byte	0
 1689 0009 00       		.byte	0
 1690 000a 01       		.byte	1
 1691 000b 00       		.byte	0
 1692 000c 02       		.byte	2
 1693 000d 00       		.byte	0
 1694 000e 01       		.byte	1
 1695 000f 00       		.byte	0
 1696 0010 03       		.byte	3
 1697 0011 00       		.byte	0
 1698 0012 01       		.byte	1
 1699 0013 00       		.byte	0
 1700 0014 02       		.byte	2
 1701 0015 00       		.byte	0
 1702 0016 01       		.byte	1
 1703 0017 00       		.byte	0
 1704 0018 04       		.byte	4
 1705 0019 00       		.byte	0
 1706 001a 01       		.byte	1
 1707 001b 00       		.byte	0
 1708 001c 02       		.byte	2
 1709 001d 00       		.byte	0
 1710 001e 01       		.byte	1
 1711 001f 00       		.byte	0
 1712 0020 03       		.byte	3
 1713 0021 00       		.byte	0
 1714 0022 01       		.byte	1
 1715 0023 00       		.byte	0
 1716 0024 02       		.byte	2
 1717 0025 00       		.byte	0
 1718 0026 01       		.byte	1
 1719 0027 00       		.byte	0
 1720 0028 05       		.byte	5
 1721 0029 00       		.byte	0
 1722 002a 01       		.byte	1
 1723 002b 00       		.byte	0
 1724 002c 02       		.byte	2
 1725 002d 00       		.byte	0
 1726 002e 01       		.byte	1
 1727 002f 00       		.byte	0
 1728 0030 03       		.byte	3
 1729 0031 00       		.byte	0
 1730 0032 01       		.byte	1
 1731 0033 00       		.byte	0
 1732 0034 02       		.byte	2
 1733 0035 00       		.byte	0
 1734 0036 01       		.byte	1
 1735 0037 00       		.byte	0
 1736 0038 04       		.byte	4
 1737 0039 00       		.byte	0
 1738 003a 01       		.byte	1
 1739 003b 00       		.byte	0
 1740 003c 02       		.byte	2
 1741 003d 00       		.byte	0
 1742 003e 01       		.byte	1
 1743 003f 00       		.byte	0
 1744 0040 03       		.byte	3
 1745 0041 00       		.byte	0
 1746 0042 01       		.byte	1
 1747 0043 00       		.byte	0
 1748 0044 02       		.byte	2
 1749 0045 00       		.byte	0
 1750 0046 01       		.byte	1
 1751 0047 00       		.byte	0
 1752 0048 06       		.byte	6
 1753 0049 00       		.byte	0
 1754 004a 01       		.byte	1
 1755 004b 00       		.byte	0
 1756 004c 02       		.byte	2
 1757 004d 00       		.byte	0
 1758 004e 01       		.byte	1
 1759 004f 00       		.byte	0
 1760 0050 03       		.byte	3
 1761 0051 00       		.byte	0
 1762 0052 01       		.byte	1
 1763 0053 00       		.byte	0
 1764 0054 02       		.byte	2
 1765 0055 00       		.byte	0
 1766 0056 01       		.byte	1
 1767 0057 00       		.byte	0
 1768 0058 04       		.byte	4
 1769 0059 00       		.byte	0
 1770 005a 01       		.byte	1
 1771 005b 00       		.byte	0
 1772 005c 02       		.byte	2
 1773 005d 00       		.byte	0
 1774 005e 01       		.byte	1
 1775 005f 00       		.byte	0
 1776 0060 03       		.byte	3
 1777 0061 00       		.byte	0
 1778 0062 01       		.byte	1
 1779 0063 00       		.byte	0
 1780 0064 02       		.byte	2
 1781 0065 00       		.byte	0
 1782 0066 01       		.byte	1
 1783 0067 00       		.byte	0
 1784 0068 05       		.byte	5
 1785 0069 00       		.byte	0
 1786 006a 01       		.byte	1
 1787 006b 00       		.byte	0
 1788 006c 02       		.byte	2
 1789 006d 00       		.byte	0
 1790 006e 01       		.byte	1
 1791 006f 00       		.byte	0
 1792 0070 03       		.byte	3
 1793 0071 00       		.byte	0
 1794 0072 01       		.byte	1
 1795 0073 00       		.byte	0
 1796 0074 02       		.byte	2
 1797 0075 00       		.byte	0
 1798 0076 01       		.byte	1
 1799 0077 00       		.byte	0
 1800 0078 04       		.byte	4
 1801 0079 00       		.byte	0
 1802 007a 01       		.byte	1
 1803 007b 00       		.byte	0
 1804 007c 02       		.byte	2
 1805 007d 00       		.byte	0
 1806 007e 01       		.byte	1
 1807 007f 00       		.byte	0
 1808 0080 03       		.byte	3
 1809 0081 00       		.byte	0
 1810 0082 01       		.byte	1
 1811 0083 00       		.byte	0
 1812 0084 02       		.byte	2
 1813 0085 00       		.byte	0
 1814 0086 01       		.byte	1
 1815 0087 00       		.byte	0
 1816 0088 07       		.byte	7
 1817 0089 00       		.byte	0
 1818 008a 01       		.byte	1
 1819 008b 00       		.byte	0
 1820 008c 02       		.byte	2
 1821 008d 00       		.byte	0
 1822 008e 01       		.byte	1
 1823 008f 00       		.byte	0
 1824 0090 03       		.byte	3
 1825 0091 00       		.byte	0
 1826 0092 01       		.byte	1
 1827 0093 00       		.byte	0
 1828 0094 02       		.byte	2
 1829 0095 00       		.byte	0
 1830 0096 01       		.byte	1
 1831 0097 00       		.byte	0
 1832 0098 04       		.byte	4
 1833 0099 00       		.byte	0
 1834 009a 01       		.byte	1
 1835 009b 00       		.byte	0
 1836 009c 02       		.byte	2
 1837 009d 00       		.byte	0
 1838 009e 01       		.byte	1
 1839 009f 00       		.byte	0
 1840 00a0 03       		.byte	3
 1841 00a1 00       		.byte	0
 1842 00a2 01       		.byte	1
 1843 00a3 00       		.byte	0
 1844 00a4 02       		.byte	2
 1845 00a5 00       		.byte	0
 1846 00a6 01       		.byte	1
 1847 00a7 00       		.byte	0
 1848 00a8 05       		.byte	5
 1849 00a9 00       		.byte	0
 1850 00aa 01       		.byte	1
 1851 00ab 00       		.byte	0
 1852 00ac 02       		.byte	2
 1853 00ad 00       		.byte	0
 1854 00ae 01       		.byte	1
 1855 00af 00       		.byte	0
 1856 00b0 03       		.byte	3
 1857 00b1 00       		.byte	0
 1858 00b2 01       		.byte	1
 1859 00b3 00       		.byte	0
 1860 00b4 02       		.byte	2
 1861 00b5 00       		.byte	0
 1862 00b6 01       		.byte	1
 1863 00b7 00       		.byte	0
 1864 00b8 04       		.byte	4
 1865 00b9 00       		.byte	0
 1866 00ba 01       		.byte	1
 1867 00bb 00       		.byte	0
 1868 00bc 02       		.byte	2
 1869 00bd 00       		.byte	0
 1870 00be 01       		.byte	1
 1871 00bf 00       		.byte	0
 1872 00c0 03       		.byte	3
 1873 00c1 00       		.byte	0
 1874 00c2 01       		.byte	1
 1875 00c3 00       		.byte	0
 1876 00c4 02       		.byte	2
 1877 00c5 00       		.byte	0
 1878 00c6 01       		.byte	1
 1879 00c7 00       		.byte	0
 1880 00c8 06       		.byte	6
 1881 00c9 00       		.byte	0
 1882 00ca 01       		.byte	1
 1883 00cb 00       		.byte	0
 1884 00cc 02       		.byte	2
 1885 00cd 00       		.byte	0
 1886 00ce 01       		.byte	1
 1887 00cf 00       		.byte	0
 1888 00d0 03       		.byte	3
 1889 00d1 00       		.byte	0
 1890 00d2 01       		.byte	1
 1891 00d3 00       		.byte	0
 1892 00d4 02       		.byte	2
 1893 00d5 00       		.byte	0
 1894 00d6 01       		.byte	1
 1895 00d7 00       		.byte	0
 1896 00d8 04       		.byte	4
 1897 00d9 00       		.byte	0
 1898 00da 01       		.byte	1
 1899 00db 00       		.byte	0
 1900 00dc 02       		.byte	2
 1901 00dd 00       		.byte	0
 1902 00de 01       		.byte	1
 1903 00df 00       		.byte	0
 1904 00e0 03       		.byte	3
 1905 00e1 00       		.byte	0
 1906 00e2 01       		.byte	1
 1907 00e3 00       		.byte	0
 1908 00e4 02       		.byte	2
 1909 00e5 00       		.byte	0
 1910 00e6 01       		.byte	1
 1911 00e7 00       		.byte	0
 1912 00e8 05       		.byte	5
 1913 00e9 00       		.byte	0
 1914 00ea 01       		.byte	1
 1915 00eb 00       		.byte	0
 1916 00ec 02       		.byte	2
 1917 00ed 00       		.byte	0
 1918 00ee 01       		.byte	1
 1919 00ef 00       		.byte	0
 1920 00f0 03       		.byte	3
 1921 00f1 00       		.byte	0
 1922 00f2 01       		.byte	1
 1923 00f3 00       		.byte	0
 1924 00f4 02       		.byte	2
 1925 00f5 00       		.byte	0
 1926 00f6 01       		.byte	1
 1927 00f7 00       		.byte	0
 1928 00f8 04       		.byte	4
 1929 00f9 00       		.byte	0
 1930 00fa 01       		.byte	1
 1931 00fb 00       		.byte	0
 1932 00fc 02       		.byte	2
 1933 00fd 00       		.byte	0
 1934 00fe 01       		.byte	1
 1935 00ff 00       		.byte	0
 1936 0100 03       		.byte	3
 1937 0101 00       		.byte	0
 1938 0102 01       		.byte	1
 1939 0103 00       		.byte	0
 1940 0104 02       		.byte	2
 1941 0105 00       		.byte	0
 1942 0106 01       		.byte	1
 1943 0107 00       		.byte	0
 1944              		.text
 1945              		.align	2
 1946              		.global	OSEventNameGet
 1948              	OSEventNameGet:
 1949              	.LFB0:
   1:../os_core/os_core.c **** /*
   2:../os_core/os_core.c **** ***************************************************************************************************
   3:../os_core/os_core.c **** *                                                uC/OS-II
   4:../os_core/os_core.c **** *                                          The Real-Time Kernel
   5:../os_core/os_core.c **** *                                             CORE FUNCTIONS
   6:../os_core/os_core.c **** *
   7:../os_core/os_core.c **** *                          (c) Copyright 1992-2003, Jean J. Labrosse, Weston, FL
   8:../os_core/os_core.c **** *                                           All Rights Reserved
   9:../os_core/os_core.c **** *
  10:../os_core/os_core.c **** * File    : OS_CORE.C
  11:../os_core/os_core.c **** * By      : Jean J. Labrosse
  12:../os_core/os_core.c **** * Version : V2.76
  13:../os_core/os_core.c **** ***************************************************************************************************
  14:../os_core/os_core.c **** */
  15:../os_core/os_core.c **** 
  16:../os_core/os_core.c **** #ifndef  OS_MASTER_FILE
  17:../os_core/os_core.c **** #define  OS_GLOBALS
  18:../os_core/os_core.c **** #include "ucos_ii.h"
  19:../os_core/os_core.c **** #endif
  20:../os_core/os_core.c **** 
  21:../os_core/os_core.c **** /*
  22:../os_core/os_core.c **** ***************************************************************************************************
  23:../os_core/os_core.c **** *                              MAPPING TABLE TO MAP BIT POSITION TO BIT MASK
  24:../os_core/os_core.c **** *
  25:../os_core/os_core.c **** * Note: Index into table is desired bit position, 0..7
  26:../os_core/os_core.c **** *       Indexed value corresponds to bit mask
  27:../os_core/os_core.c **** ***************************************************************************************************
  28:../os_core/os_core.c **** */
  29:../os_core/os_core.c **** 
  30:../os_core/os_core.c **** INT8U  const  OSMapTbl[8]   = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
  31:../os_core/os_core.c **** 
  32:../os_core/os_core.c **** /*
  33:../os_core/os_core.c **** ***************************************************************************************************
  34:../os_core/os_core.c **** *                                       PRIORITY RESOLUTION TABLE
  35:../os_core/os_core.c **** *
  36:../os_core/os_core.c **** * Note: Index into table is bit pattern to resolve highest priority
  37:../os_core/os_core.c **** *       Indexed value corresponds to highest priority bit position (i.e. 0..7)
  38:../os_core/os_core.c **** ***************************************************************************************************
  39:../os_core/os_core.c **** */
  40:../os_core/os_core.c **** 
  41:../os_core/os_core.c **** INT8U  const  OSUnMapTbl[256] = {
  42:../os_core/os_core.c ****     0, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x00 to 0x0F                          
  43:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x10 to 0x1F                          
  44:../os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x20 to 0x2F                          
  45:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x30 to 0x3F                          
  46:../os_core/os_core.c ****     6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x40 to 0x4F                          
  47:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x50 to 0x5F                          
  48:../os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x60 to 0x6F                          
  49:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x70 to 0x7F                          
  50:../os_core/os_core.c ****     7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x80 to 0x8F                          
  51:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x90 to 0x9F                          
  52:../os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xA0 to 0xAF                          
  53:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xB0 to 0xBF                          
  54:../os_core/os_core.c ****     6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xC0 to 0xCF                          
  55:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xD0 to 0xDF                          
  56:../os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xE0 to 0xEF                          
  57:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0        /* 0xF0 to 0xFF                          
  58:../os_core/os_core.c **** };
  59:../os_core/os_core.c **** 
  60:../os_core/os_core.c **** /*$PAGE*/
  61:../os_core/os_core.c **** /*
  62:../os_core/os_core.c **** ***************************************************************************************************
  63:../os_core/os_core.c **** *                                       FUNCTION PROTOTYPES
  64:../os_core/os_core.c **** ***************************************************************************************************
  65:../os_core/os_core.c **** */
  66:../os_core/os_core.c **** static  void  OS_InitEventList(void);
  67:../os_core/os_core.c **** static  void  OS_InitMisc(void);
  68:../os_core/os_core.c **** static  void  OS_InitRdyList(void);
  69:../os_core/os_core.c **** static  void  OS_InitTaskIdle(void);
  70:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
  71:../os_core/os_core.c **** static  void  OS_InitTaskStat(void);
  72:../os_core/os_core.c **** #endif
  73:../os_core/os_core.c **** static  void  OS_InitTCBList(void);
  74:../os_core/os_core.c ****   
  75:../os_core/os_core.c **** /*$PAGE*/
  76:../os_core/os_core.c **** /*
  77:../os_core/os_core.c **** ***************************************************************************************************
  78:../os_core/os_core.c **** *                         GET THE NAME OF A SEMAPHORE, MUTEX, MAILBOX or QUEUE
  79:../os_core/os_core.c **** *
  80:../os_core/os_core.c **** * Description: This function is used to obtain the name assigned to a semaphore, mutex, mailbox or 
  81:../os_core/os_core.c **** *
  82:../os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event group.  'pevent' can point either to a semaphore
  83:../os_core/os_core.c **** *                        a mutex, a mailbox or a queue.  Where this function is concerned, the actu
  84:../os_core/os_core.c **** *                        type is irrelevant.
  85:../os_core/os_core.c **** *
  86:../os_core/os_core.c **** *              pname     is a pointer to an ASCII string that will receive the name of the semaphor
  87:../os_core/os_core.c **** *                        mutex, mailbox or queue.  The string must be able to hold at least 
  88:../os_core/os_core.c **** *                        OS_EVENT_NAME_SIZE characters.
  89:../os_core/os_core.c **** *
  90:../os_core/os_core.c **** *              err       is a pointer to an error code that can contain one of the following values
  91:../os_core/os_core.c **** *
  92:../os_core/os_core.c **** *                        OS_NO_ERR                  if the name was copied to 'pname'
  93:../os_core/os_core.c **** *                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to the proper event
  94:../os_core/os_core.c **** *                                                   control block type.
  95:../os_core/os_core.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
  96:../os_core/os_core.c **** *                        OS_ERR_PEVENT_NULL         if you passed a NULL pointer for 'pevent'
  97:../os_core/os_core.c **** *
  98:../os_core/os_core.c **** * Returns    : The length of the string or 0 if the 'pevent' is a NULL pointer.
  99:../os_core/os_core.c **** ***************************************************************************************************
 100:../os_core/os_core.c **** */
 101:../os_core/os_core.c **** 
 102:../os_core/os_core.c **** #if OS_EVENT_EN && (OS_EVENT_NAME_SIZE > 1)
 103:../os_core/os_core.c **** INT8U  OSEventNameGet (OS_EVENT *pevent, char *pname, INT8U *err)
 104:../os_core/os_core.c **** {
 1950              		.loc 1 104 0
 1951              		.cfi_startproc
 1952              		@ Function supports interworking.
 1953              		@ args = 0, pretend = 0, frame = 24
 1954              		@ frame_needed = 1, uses_anonymous_args = 0
 1955 0000 0DC0A0E1 		mov	ip, sp
 1956              	.LCFI0:
 1957              		.cfi_def_cfa_register 12
 1958 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1959 0008 04B04CE2 		sub	fp, ip, #4
 1960              		.cfi_offset 14, -8
 1961              		.cfi_offset 13, -12
 1962              		.cfi_offset 11, -16
 1963              	.LCFI1:
 1964              		.cfi_def_cfa 11, 4
 1965 000c 18D04DE2 		sub	sp, sp, #24
 1966 0010 18000BE5 		str	r0, [fp, #-24]
 1967 0014 1C100BE5 		str	r1, [fp, #-28]
 1968 0018 20200BE5 		str	r2, [fp, #-32]
 105:../os_core/os_core.c ****     INT8U      len;
 106:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 107:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 108:../os_core/os_core.c **** 
 109:../os_core/os_core.c **** 
 110:../os_core/os_core.c **** 
 111:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 112:../os_core/os_core.c **** #endif    
 113:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 1969              		.loc 1 113 0
 1970              	@ 113 "../os_core/os_core.c" 1
 1971 001c 00000FE1 		mrs   r0, cpsr              
 1972 0020 04002DE5 	stmfd sp!, {r0}             
 1973 0024 C00080E3 	orr   r0, r0, #0b11000000   
 1974 0028 00F021E1 	msr   cpsr_c, r0              
 1975              	@ 0 "" 2
 114:../os_core/os_core.c **** #if OS_ARG_CHK_EN > 0
 115:../os_core/os_core.c ****     if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                    
 1976              		.loc 1 115 0
 1977 002c 18301BE5 		ldr	r3, [fp, #-24]
 1978 0030 000053E3 		cmp	r3, #0
 1979 0034 0600001A 		bne	.L2
 116:../os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 1980              		.loc 1 116 0
 1981              	@ 116 "../os_core/os_core.c" 1
 1982 0038 04009DE4 		ldmfd sp!, {r0}             
 1983 003c 00F021E1 	msr   cpsr_c, r0              
 1984              	@ 0 "" 2
 117:../os_core/os_core.c ****         *err = OS_ERR_PEVENT_NULL;
 1985              		.loc 1 117 0
 1986 0040 20301BE5 		ldr	r3, [fp, #-32]
 1987 0044 0420A0E3 		mov	r2, #4
 1988 0048 0020C3E5 		strb	r2, [r3, #0]
 118:../os_core/os_core.c ****         return (0);
 1989              		.loc 1 118 0
 1990 004c 0030A0E3 		mov	r3, #0
 1991 0050 220000EA 		b	.L3
 1992              	.L2:
 119:../os_core/os_core.c ****     }
 120:../os_core/os_core.c ****     if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                     
 1993              		.loc 1 120 0
 1994 0054 1C301BE5 		ldr	r3, [fp, #-28]
 1995 0058 000053E3 		cmp	r3, #0
 1996 005c 0600001A 		bne	.L4
 121:../os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 1997              		.loc 1 121 0
 1998              	@ 121 "../os_core/os_core.c" 1
 1999 0060 04009DE4 		ldmfd sp!, {r0}             
 2000 0064 00F021E1 	msr   cpsr_c, r0              
 2001              	@ 0 "" 2
 122:../os_core/os_core.c ****         *err = OS_ERR_PNAME_NULL;
 2002              		.loc 1 122 0
 2003 0068 20301BE5 		ldr	r3, [fp, #-32]
 2004 006c 0F20A0E3 		mov	r2, #15
 2005 0070 0020C3E5 		strb	r2, [r3, #0]
 123:../os_core/os_core.c ****         return (0);
 2006              		.loc 1 123 0
 2007 0074 0030A0E3 		mov	r3, #0
 2008 0078 180000EA 		b	.L3
 2009              	.L4:
 124:../os_core/os_core.c ****     }
 125:../os_core/os_core.c **** #endif
 126:../os_core/os_core.c ****     switch (pevent->OSEventType) {
 2010              		.loc 1 126 0
 2011 007c 18301BE5 		ldr	r3, [fp, #-24]
 2012 0080 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2013 0084 013043E2 		sub	r3, r3, #1
 2014 0088 030053E3 		cmp	r3, #3
 2015 008c 0D00008A 		bhi	.L5
 127:../os_core/os_core.c ****         case OS_EVENT_TYPE_SEM:
 128:../os_core/os_core.c ****         case OS_EVENT_TYPE_MUTEX:
 129:../os_core/os_core.c ****         case OS_EVENT_TYPE_MBOX:
 130:../os_core/os_core.c ****         case OS_EVENT_TYPE_Q:
 131:../os_core/os_core.c ****              break;
 132:../os_core/os_core.c **** 
 133:../os_core/os_core.c ****         default:
 134:../os_core/os_core.c ****              OS_EXIT_CRITICAL();
 135:../os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 136:../os_core/os_core.c ****              return (0);
 137:../os_core/os_core.c ****     }
 138:../os_core/os_core.c ****     len  = OS_StrCopy(pname, pevent->OSEventName);    /* Copy name from OS_EVENT                   
 2016              		.loc 1 138 0
 2017 0090 18301BE5 		ldr	r3, [fp, #-24]
 2018 0094 103083E2 		add	r3, r3, #16
 2019 0098 1C001BE5 		ldr	r0, [fp, #-28]
 2020 009c 0310A0E1 		mov	r1, r3
 2021 00a0 FEFFFFEB 		bl	OS_StrCopy
 2022 00a4 0030A0E1 		mov	r3, r0
 2023 00a8 0D304BE5 		strb	r3, [fp, #-13]
 139:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2024              		.loc 1 139 0
 2025              	@ 139 "../os_core/os_core.c" 1
 2026 00ac 04009DE4 		ldmfd sp!, {r0}             
 2027 00b0 00F021E1 	msr   cpsr_c, r0              
 2028              	@ 0 "" 2
 140:../os_core/os_core.c ****     *err = OS_NO_ERR;
 2029              		.loc 1 140 0
 2030 00b4 20301BE5 		ldr	r3, [fp, #-32]
 2031 00b8 0020A0E3 		mov	r2, #0
 2032 00bc 0020C3E5 		strb	r2, [r3, #0]
 141:../os_core/os_core.c ****     return (len);
 2033              		.loc 1 141 0
 2034 00c0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2035 00c4 050000EA 		b	.L3
 2036              	.L5:
 134:../os_core/os_core.c ****              OS_EXIT_CRITICAL();
 2037              		.loc 1 134 0
 2038              	@ 134 "../os_core/os_core.c" 1
 2039 00c8 04009DE4 		ldmfd sp!, {r0}             
 2040 00cc 00F021E1 	msr   cpsr_c, r0              
 2041              	@ 0 "" 2
 135:../os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 2042              		.loc 1 135 0
 2043 00d0 20301BE5 		ldr	r3, [fp, #-32]
 2044 00d4 0120A0E3 		mov	r2, #1
 2045 00d8 0020C3E5 		strb	r2, [r3, #0]
 136:../os_core/os_core.c ****              return (0);
 2046              		.loc 1 136 0
 2047 00dc 0030A0E3 		mov	r3, #0
 2048              	.L3:
 142:../os_core/os_core.c **** }
 2049              		.loc 1 142 0
 2050 00e0 0300A0E1 		mov	r0, r3
 2051 00e4 0CD04BE2 		sub	sp, fp, #12
 2052 00e8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2053 00ec 1EFF2FE1 		bx	lr
 2054              		.cfi_endproc
 2055              	.LFE0:
 2057              		.align	2
 2058              		.global	OSEventNameSet
 2060              	OSEventNameSet:
 2061              	.LFB1:
 143:../os_core/os_core.c **** #endif
 144:../os_core/os_core.c **** 
 145:../os_core/os_core.c **** /*$PAGE*/
 146:../os_core/os_core.c **** /*
 147:../os_core/os_core.c **** ***************************************************************************************************
 148:../os_core/os_core.c **** *                         ASSIGN A NAME TO A SEMAPHORE, MUTEX, MAILBOX or QUEUE
 149:../os_core/os_core.c **** *
 150:../os_core/os_core.c **** * Description: This function assigns a name to a semaphore, mutex, mailbox or queue.
 151:../os_core/os_core.c **** *
 152:../os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event group.  'pevent' can point either to a semaphore
 153:../os_core/os_core.c **** *                        a mutex, a mailbox or a queue.  Where this function is concerned, it doesn
 154:../os_core/os_core.c **** *                        matter the actual type.
 155:../os_core/os_core.c **** *
 156:../os_core/os_core.c **** *              pname     is a pointer to an ASCII string that will be used as the name of the semap
 157:../os_core/os_core.c **** *                        mutex, mailbox or queue.  The string must be able to hold at least 
 158:../os_core/os_core.c **** *                        OS_EVENT_NAME_SIZE characters.
 159:../os_core/os_core.c **** *
 160:../os_core/os_core.c **** *              err       is a pointer to an error code that can contain one of the following values
 161:../os_core/os_core.c **** *
 162:../os_core/os_core.c **** *                        OS_NO_ERR                  if the requested task is resumed
 163:../os_core/os_core.c **** *                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to the proper event
 164:../os_core/os_core.c **** *                                                   control block type.
 165:../os_core/os_core.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
 166:../os_core/os_core.c **** *                        OS_ERR_PEVENT_NULL         if you passed a NULL pointer for 'pevent'
 167:../os_core/os_core.c **** *
 168:../os_core/os_core.c **** * Returns    : None
 169:../os_core/os_core.c **** ***************************************************************************************************
 170:../os_core/os_core.c **** */
 171:../os_core/os_core.c **** 
 172:../os_core/os_core.c **** #if OS_EVENT_EN && (OS_EVENT_NAME_SIZE > 1)
 173:../os_core/os_core.c **** void  OSEventNameSet (OS_EVENT *pevent, char *pname, INT8U *err)
 174:../os_core/os_core.c **** {
 2062              		.loc 1 174 0
 2063              		.cfi_startproc
 2064              		@ Function supports interworking.
 2065              		@ args = 0, pretend = 0, frame = 24
 2066              		@ frame_needed = 1, uses_anonymous_args = 0
 2067 00f0 0DC0A0E1 		mov	ip, sp
 2068              	.LCFI2:
 2069              		.cfi_def_cfa_register 12
 2070 00f4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2071 00f8 04B04CE2 		sub	fp, ip, #4
 2072              		.cfi_offset 14, -8
 2073              		.cfi_offset 13, -12
 2074              		.cfi_offset 11, -16
 2075              	.LCFI3:
 2076              		.cfi_def_cfa 11, 4
 2077 00fc 18D04DE2 		sub	sp, sp, #24
 2078 0100 18000BE5 		str	r0, [fp, #-24]
 2079 0104 1C100BE5 		str	r1, [fp, #-28]
 2080 0108 20200BE5 		str	r2, [fp, #-32]
 175:../os_core/os_core.c ****     INT8U      len;
 176:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 177:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 178:../os_core/os_core.c **** 
 179:../os_core/os_core.c **** 
 180:../os_core/os_core.c **** 
 181:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 182:../os_core/os_core.c **** #endif    
 183:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 2081              		.loc 1 183 0
 2082              	@ 183 "../os_core/os_core.c" 1
 2083 010c 00000FE1 		mrs   r0, cpsr              
 2084 0110 04002DE5 	stmfd sp!, {r0}             
 2085 0114 C00080E3 	orr   r0, r0, #0b11000000   
 2086 0118 00F021E1 	msr   cpsr_c, r0              
 2087              	@ 0 "" 2
 184:../os_core/os_core.c **** #if OS_ARG_CHK_EN > 0
 185:../os_core/os_core.c ****     if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                    
 2088              		.loc 1 185 0
 2089 011c 18301BE5 		ldr	r3, [fp, #-24]
 2090 0120 000053E3 		cmp	r3, #0
 2091 0124 0500001A 		bne	.L8
 186:../os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 2092              		.loc 1 186 0
 2093              	@ 186 "../os_core/os_core.c" 1
 2094 0128 04009DE4 		ldmfd sp!, {r0}             
 2095 012c 00F021E1 	msr   cpsr_c, r0              
 2096              	@ 0 "" 2
 187:../os_core/os_core.c ****         *err = OS_ERR_PEVENT_NULL;
 2097              		.loc 1 187 0
 2098 0130 20301BE5 		ldr	r3, [fp, #-32]
 2099 0134 0420A0E3 		mov	r2, #4
 2100 0138 0020C3E5 		strb	r2, [r3, #0]
 188:../os_core/os_core.c ****         return;
 2101              		.loc 1 188 0
 2102 013c 2B0000EA 		b	.L7
 2103              	.L8:
 189:../os_core/os_core.c ****     }
 190:../os_core/os_core.c ****     if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                     
 2104              		.loc 1 190 0
 2105 0140 1C301BE5 		ldr	r3, [fp, #-28]
 2106 0144 000053E3 		cmp	r3, #0
 2107 0148 0500001A 		bne	.L10
 191:../os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 2108              		.loc 1 191 0
 2109              	@ 191 "../os_core/os_core.c" 1
 2110 014c 04009DE4 		ldmfd sp!, {r0}             
 2111 0150 00F021E1 	msr   cpsr_c, r0              
 2112              	@ 0 "" 2
 192:../os_core/os_core.c ****         *err = OS_ERR_PNAME_NULL;
 2113              		.loc 1 192 0
 2114 0154 20301BE5 		ldr	r3, [fp, #-32]
 2115 0158 0F20A0E3 		mov	r2, #15
 2116 015c 0020C3E5 		strb	r2, [r3, #0]
 193:../os_core/os_core.c ****         return;
 2117              		.loc 1 193 0
 2118 0160 220000EA 		b	.L7
 2119              	.L10:
 194:../os_core/os_core.c ****     }
 195:../os_core/os_core.c **** #endif
 196:../os_core/os_core.c ****     switch (pevent->OSEventType) {
 2120              		.loc 1 196 0
 2121 0164 18301BE5 		ldr	r3, [fp, #-24]
 2122 0168 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2123 016c 013043E2 		sub	r3, r3, #1
 2124 0170 030053E3 		cmp	r3, #3
 2125 0174 0700008A 		bhi	.L11
 197:../os_core/os_core.c ****         case OS_EVENT_TYPE_SEM:
 198:../os_core/os_core.c ****         case OS_EVENT_TYPE_MUTEX:
 199:../os_core/os_core.c ****         case OS_EVENT_TYPE_MBOX:
 200:../os_core/os_core.c ****         case OS_EVENT_TYPE_Q:
 201:../os_core/os_core.c ****              break;
 202:../os_core/os_core.c **** 
 203:../os_core/os_core.c ****         default:
 204:../os_core/os_core.c ****              OS_EXIT_CRITICAL();
 205:../os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 206:../os_core/os_core.c ****              return;
 207:../os_core/os_core.c ****     }
 208:../os_core/os_core.c ****     len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?
 2126              		.loc 1 208 0
 2127 0178 1C001BE5 		ldr	r0, [fp, #-28]
 2128 017c FEFFFFEB 		bl	OS_StrLen
 2129 0180 0030A0E1 		mov	r3, r0
 2130 0184 0D304BE5 		strb	r3, [fp, #-13]
 209:../os_core/os_core.c ****     if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                        
 2131              		.loc 1 209 0
 2132 0188 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2133 018c 1F0053E3 		cmp	r3, #31
 2134 0190 0600008A 		bhi	.L13
 2135 0194 0B0000EA 		b	.L15
 2136              	.L11:
 204:../os_core/os_core.c ****              OS_EXIT_CRITICAL();
 2137              		.loc 1 204 0
 2138              	@ 204 "../os_core/os_core.c" 1
 2139 0198 04009DE4 		ldmfd sp!, {r0}             
 2140 019c 00F021E1 	msr   cpsr_c, r0              
 2141              	@ 0 "" 2
 205:../os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 2142              		.loc 1 205 0
 2143 01a0 20301BE5 		ldr	r3, [fp, #-32]
 2144 01a4 0120A0E3 		mov	r2, #1
 2145 01a8 0020C3E5 		strb	r2, [r3, #0]
 206:../os_core/os_core.c ****              return;
 2146              		.loc 1 206 0
 2147 01ac 0F0000EA 		b	.L7
 2148              	.L13:
 210:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 2149              		.loc 1 210 0
 2150              	@ 210 "../os_core/os_core.c" 1
 2151 01b0 04009DE4 		ldmfd sp!, {r0}             
 2152 01b4 00F021E1 	msr   cpsr_c, r0              
 2153              	@ 0 "" 2
 211:../os_core/os_core.c ****         *err = OS_ERR_EVENT_NAME_TOO_LONG;
 2154              		.loc 1 211 0
 2155 01b8 20301BE5 		ldr	r3, [fp, #-32]
 2156 01bc 0C20A0E3 		mov	r2, #12
 2157 01c0 0020C3E5 		strb	r2, [r3, #0]
 212:../os_core/os_core.c ****         return;
 2158              		.loc 1 212 0
 2159 01c4 090000EA 		b	.L7
 2160              	.L15:
 213:../os_core/os_core.c ****     } 
 214:../os_core/os_core.c ****     (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block 
 2161              		.loc 1 214 0
 2162 01c8 18301BE5 		ldr	r3, [fp, #-24]
 2163 01cc 103083E2 		add	r3, r3, #16
 2164 01d0 0300A0E1 		mov	r0, r3
 2165 01d4 1C101BE5 		ldr	r1, [fp, #-28]
 2166 01d8 FEFFFFEB 		bl	OS_StrCopy
 215:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2167              		.loc 1 215 0
 2168              	@ 215 "../os_core/os_core.c" 1
 2169 01dc 04009DE4 		ldmfd sp!, {r0}             
 2170 01e0 00F021E1 	msr   cpsr_c, r0              
 2171              	@ 0 "" 2
 216:../os_core/os_core.c ****     *err = OS_NO_ERR;
 2172              		.loc 1 216 0
 2173 01e4 20301BE5 		ldr	r3, [fp, #-32]
 2174 01e8 0020A0E3 		mov	r2, #0
 2175 01ec 0020C3E5 		strb	r2, [r3, #0]
 2176              	.L7:
 217:../os_core/os_core.c **** }
 2177              		.loc 1 217 0
 2178 01f0 0CD04BE2 		sub	sp, fp, #12
 2179 01f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2180 01f8 1EFF2FE1 		bx	lr
 2181              		.cfi_endproc
 2182              	.LFE1:
 2184              		.align	2
 2185              		.global	OSInit
 2187              	OSInit:
 2188              	.LFB2:
 218:../os_core/os_core.c **** #endif
 219:../os_core/os_core.c **** 
 220:../os_core/os_core.c **** /*$PAGE*/
 221:../os_core/os_core.c **** /*
 222:../os_core/os_core.c **** ***************************************************************************************************
 223:../os_core/os_core.c **** *                                             INITIALIZATION
 224:../os_core/os_core.c **** *
 225:../os_core/os_core.c **** * Description: This function is used to initialize the internals of uC/OS-II and MUST be called pri
 226:../os_core/os_core.c **** *              creating any uC/OS-II object and, prior to calling OSStart().
 227:../os_core/os_core.c **** *
 228:../os_core/os_core.c **** * Arguments  : none
 229:../os_core/os_core.c **** *
 230:../os_core/os_core.c **** * Returns    : none
 231:../os_core/os_core.c **** ***************************************************************************************************
 232:../os_core/os_core.c **** */
 233:../os_core/os_core.c **** 
 234:../os_core/os_core.c **** void  OSInit (void)
 235:../os_core/os_core.c **** {
 2189              		.loc 1 235 0
 2190              		.cfi_startproc
 2191              		@ Function supports interworking.
 2192              		@ args = 0, pretend = 0, frame = 0
 2193              		@ frame_needed = 1, uses_anonymous_args = 0
 2194 01fc 0DC0A0E1 		mov	ip, sp
 2195              	.LCFI4:
 2196              		.cfi_def_cfa_register 12
 2197 0200 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2198 0204 04B04CE2 		sub	fp, ip, #4
 2199              		.cfi_offset 14, -8
 2200              		.cfi_offset 13, -12
 2201              		.cfi_offset 11, -16
 2202              	.LCFI5:
 2203              		.cfi_def_cfa 11, 4
 236:../os_core/os_core.c **** #if OS_VERSION >= 204
 237:../os_core/os_core.c ****     OSInitHookBegin();                                           /* Call port specific initializati
 2204              		.loc 1 237 0
 2205 0208 FEFFFFEB 		bl	OSInitHookBegin
 238:../os_core/os_core.c **** #endif
 239:../os_core/os_core.c **** 
 240:../os_core/os_core.c ****     OS_InitMisc();                                               /* Initialize miscellaneous variab
 2206              		.loc 1 240 0
 2207 020c 480300EB 		bl	OS_InitMisc
 241:../os_core/os_core.c **** 
 242:../os_core/os_core.c ****     OS_InitRdyList();                                            /* Initialize the Ready List      
 2208              		.loc 1 242 0
 2209 0210 750300EB 		bl	OS_InitRdyList
 243:../os_core/os_core.c **** 
 244:../os_core/os_core.c ****     OS_InitTCBList();                                            /* Initialize the free list of OS_
 2210              		.loc 1 244 0
 2211 0214 D50300EB 		bl	OS_InitTCBList
 245:../os_core/os_core.c **** 
 246:../os_core/os_core.c ****     OS_InitEventList();                                          /* Initialize the free list of OS_
 2212              		.loc 1 246 0
 2213 0218 090300EB 		bl	OS_InitEventList
 247:../os_core/os_core.c **** 
 248:../os_core/os_core.c **** #if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
 249:../os_core/os_core.c ****     OS_FlagInit();                                               /* Initialize the event flag struc
 2214              		.loc 1 249 0
 2215 021c FEFFFFEB 		bl	OS_FlagInit
 250:../os_core/os_core.c **** #endif
 251:../os_core/os_core.c **** 
 252:../os_core/os_core.c **** #if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
 253:../os_core/os_core.c ****     OS_MemInit();                                                /* Initialize the memory manager  
 2216              		.loc 1 253 0
 2217 0220 FEFFFFEB 		bl	OS_MemInit
 254:../os_core/os_core.c **** #endif
 255:../os_core/os_core.c **** 
 256:../os_core/os_core.c **** #if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
 257:../os_core/os_core.c ****     OS_QInit();                                                  /* Initialize the message queue st
 2218              		.loc 1 257 0
 2219 0224 FEFFFFEB 		bl	OS_QInit
 258:../os_core/os_core.c **** #endif
 259:../os_core/os_core.c **** 
 260:../os_core/os_core.c ****     OS_InitTaskIdle();                                           /* Create the Idle Task           
 2220              		.loc 1 260 0
 2221 0228 9C0300EB 		bl	OS_InitTaskIdle
 261:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
 262:../os_core/os_core.c ****     OS_InitTaskStat();                                           /* Create the Statistic Task      
 2222              		.loc 1 262 0
 2223 022c B50300EB 		bl	OS_InitTaskStat
 263:../os_core/os_core.c **** #endif
 264:../os_core/os_core.c **** 
 265:../os_core/os_core.c **** #if OS_VERSION >= 204
 266:../os_core/os_core.c ****     OSInitHookEnd();                                             /* Call port specific init. code  
 2224              		.loc 1 266 0
 2225 0230 FEFFFFEB 		bl	OSInitHookEnd
 267:../os_core/os_core.c **** #endif
 268:../os_core/os_core.c **** 
 269:../os_core/os_core.c **** #if OS_VERSION >= 270 && OS_DEBUG_EN > 0
 270:../os_core/os_core.c ****     OSDebugInit();
 2226              		.loc 1 270 0
 2227 0234 FEFFFFEB 		bl	OSDebugInit
 271:../os_core/os_core.c **** #endif
 272:../os_core/os_core.c **** }
 2228              		.loc 1 272 0
 2229 0238 0CD04BE2 		sub	sp, fp, #12
 2230 023c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2231 0240 1EFF2FE1 		bx	lr
 2232              		.cfi_endproc
 2233              	.LFE2:
 2235              		.align	2
 2236              		.global	OSIntEnter
 2238              	OSIntEnter:
 2239              	.LFB3:
 273:../os_core/os_core.c **** /*$PAGE*/
 274:../os_core/os_core.c **** /*
 275:../os_core/os_core.c **** ***************************************************************************************************
 276:../os_core/os_core.c **** *                                              ENTER ISR
 277:../os_core/os_core.c **** *
 278:../os_core/os_core.c **** * Description: This function is used to notify uC/OS-II that you are about to service an interrupt
 279:../os_core/os_core.c **** *              service routine (ISR).  This allows uC/OS-II to keep track of interrupt nesting and 
 280:../os_core/os_core.c **** *              only perform rescheduling at the last nested ISR.
 281:../os_core/os_core.c **** *
 282:../os_core/os_core.c **** * Arguments  : none
 283:../os_core/os_core.c **** *
 284:../os_core/os_core.c **** * Returns    : none
 285:../os_core/os_core.c **** *
 286:../os_core/os_core.c **** * Notes      : 1) This function should be called ith interrupts already disabled
 287:../os_core/os_core.c **** *              2) Your ISR can directly increment OSIntNesting without calling this function becaus
 288:../os_core/os_core.c **** *                 OSIntNesting has been declared 'global'.  
 289:../os_core/os_core.c **** *              3) You MUST still call OSIntExit() even though you increment OSIntNesting directly.
 290:../os_core/os_core.c **** *              4) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every 
 291:../os_core/os_core.c **** *                 to OSIntEnter() at the beginning of the ISR you MUST have a call to OSIntExit() a
 292:../os_core/os_core.c **** *                 end of the ISR.
 293:../os_core/os_core.c **** *              5) You are allowed to nest interrupts up to 255 levels deep.
 294:../os_core/os_core.c **** *              6) I removed the OS_ENTER_CRITICAL() and OS_EXIT_CRITICAL() around the increment bec
 295:../os_core/os_core.c **** *                 OSIntEnter() is always called with interrupts disabled.
 296:../os_core/os_core.c **** ***************************************************************************************************
 297:../os_core/os_core.c **** */
 298:../os_core/os_core.c **** 
 299:../os_core/os_core.c **** void  OSIntEnter (void)
 300:../os_core/os_core.c **** {
 2240              		.loc 1 300 0
 2241              		.cfi_startproc
 2242              		@ Function supports interworking.
 2243              		@ args = 0, pretend = 0, frame = 0
 2244              		@ frame_needed = 1, uses_anonymous_args = 0
 2245 0244 0DC0A0E1 		mov	ip, sp
 2246              	.LCFI6:
 2247              		.cfi_def_cfa_register 12
 2248 0248 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2249 024c 04B04CE2 		sub	fp, ip, #4
 2250              		.cfi_offset 14, -8
 2251              		.cfi_offset 13, -12
 2252              		.cfi_offset 11, -16
 2253              	.LCFI7:
 2254              		.cfi_def_cfa 11, 4
 301:../os_core/os_core.c ****     if (OSRunning == TRUE) {
 2255              		.loc 1 301 0
 2256 0250 3C309FE5 		ldr	r3, .L19
 2257 0254 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2258 0258 010053E3 		cmp	r3, #1
 2259 025c 0900001A 		bne	.L17
 302:../os_core/os_core.c ****         if (OSIntNesting < 255u) {
 2260              		.loc 1 302 0
 2261 0260 30309FE5 		ldr	r3, .L19+4
 2262 0264 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2263 0268 FF0053E3 		cmp	r3, #255
 2264 026c 0500000A 		beq	.L17
 303:../os_core/os_core.c ****             OSIntNesting++;                      /* Increment ISR nesting level                    
 2265              		.loc 1 303 0
 2266 0270 20309FE5 		ldr	r3, .L19+4
 2267 0274 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2268 0278 013083E2 		add	r3, r3, #1
 2269 027c FF2003E2 		and	r2, r3, #255
 2270 0280 10309FE5 		ldr	r3, .L19+4
 2271 0284 0020C3E5 		strb	r2, [r3, #0]
 2272              	.L17:
 304:../os_core/os_core.c ****         }
 305:../os_core/os_core.c ****     }
 306:../os_core/os_core.c **** }
 2273              		.loc 1 306 0
 2274 0288 0CD04BE2 		sub	sp, fp, #12
 2275 028c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2276 0290 1EFF2FE1 		bx	lr
 2277              	.L20:
 2278              		.align	2
 2279              	.L19:
 2280 0294 00000000 		.word	OSRunning
 2281 0298 00000000 		.word	OSIntNesting
 2282              		.cfi_endproc
 2283              	.LFE3:
 2285              		.align	2
 2286              		.global	OSIntExit
 2288              	OSIntExit:
 2289              	.LFB4:
 307:../os_core/os_core.c **** /*$PAGE*/
 308:../os_core/os_core.c **** /*
 309:../os_core/os_core.c **** ***************************************************************************************************
 310:../os_core/os_core.c **** *                                               EXIT ISR
 311:../os_core/os_core.c **** *
 312:../os_core/os_core.c **** * Description: This function is used to notify uC/OS-II that you have completed serviving an ISR.  
 313:../os_core/os_core.c **** *              the last nested ISR has completed, uC/OS-II will call the scheduler to determine whe
 314:../os_core/os_core.c **** *              a new, high-priority task, is ready to run.
 315:../os_core/os_core.c **** *
 316:../os_core/os_core.c **** * Arguments  : none
 317:../os_core/os_core.c **** *
 318:../os_core/os_core.c **** * Returns    : none
 319:../os_core/os_core.c **** *
 320:../os_core/os_core.c **** * Notes      : 1) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every 
 321:../os_core/os_core.c **** *                 to OSIntEnter() at the beginning of the ISR you MUST have a call to OSIntExit() a
 322:../os_core/os_core.c **** *                 end of the ISR.
 323:../os_core/os_core.c **** *              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
 324:../os_core/os_core.c **** ***************************************************************************************************
 325:../os_core/os_core.c **** */
 326:../os_core/os_core.c **** 
 327:../os_core/os_core.c **** void  OSIntExit (void)
 328:../os_core/os_core.c **** {
 2290              		.loc 1 328 0
 2291              		.cfi_startproc
 2292              		@ Function supports interworking.
 2293              		@ args = 0, pretend = 0, frame = 8
 2294              		@ frame_needed = 1, uses_anonymous_args = 0
 2295 029c 0DC0A0E1 		mov	ip, sp
 2296              	.LCFI8:
 2297              		.cfi_def_cfa_register 12
 2298 02a0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2299 02a4 04B04CE2 		sub	fp, ip, #4
 2300              		.cfi_offset 14, -8
 2301              		.cfi_offset 13, -12
 2302              		.cfi_offset 11, -16
 2303              	.LCFI9:
 2304              		.cfi_def_cfa 11, 4
 2305 02a8 08D04DE2 		sub	sp, sp, #8
 329:../os_core/os_core.c ****     INT8U      y;
 330:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 331:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 332:../os_core/os_core.c ****     
 333:../os_core/os_core.c ****     
 334:../os_core/os_core.c **** 
 335:../os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 336:../os_core/os_core.c **** #endif    
 337:../os_core/os_core.c ****     if (OSRunning == TRUE) {
 2306              		.loc 1 337 0
 2307 02ac 18319FE5 		ldr	r3, .L25
 2308 02b0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2309 02b4 010053E3 		cmp	r3, #1
 2310 02b8 4000001A 		bne	.L21
 338:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 2311              		.loc 1 338 0
 2312              	@ 338 "../os_core/os_core.c" 1
 2313 02bc 00000FE1 		mrs   r0, cpsr              
 2314 02c0 04002DE5 	stmfd sp!, {r0}             
 2315 02c4 C00080E3 	orr   r0, r0, #0b11000000   
 2316 02c8 00F021E1 	msr   cpsr_c, r0              
 2317              	@ 0 "" 2
 339:../os_core/os_core.c ****         if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping   
 2318              		.loc 1 339 0
 2319 02cc FC309FE5 		ldr	r3, .L25+4
 2320 02d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2321 02d4 000053E3 		cmp	r3, #0
 2322 02d8 0500000A 		beq	.L23
 340:../os_core/os_core.c ****             OSIntNesting--;
 2323              		.loc 1 340 0
 2324 02dc EC309FE5 		ldr	r3, .L25+4
 2325 02e0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2326 02e4 013043E2 		sub	r3, r3, #1
 2327 02e8 FF2003E2 		and	r2, r3, #255
 2328 02ec DC309FE5 		ldr	r3, .L25+4
 2329 02f0 0020C3E5 		strb	r2, [r3, #0]
 2330              	.L23:
 341:../os_core/os_core.c ****         }
 342:../os_core/os_core.c ****         if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete 
 2331              		.loc 1 342 0
 2332 02f4 D4309FE5 		ldr	r3, .L25+4
 2333 02f8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2334 02fc 000053E3 		cmp	r3, #0
 2335 0300 2C00001A 		bne	.L24
 343:../os_core/os_core.c ****             if (OSLockNesting == 0) {                      /* ... and not locked.                  
 2336              		.loc 1 343 0
 2337 0304 C8309FE5 		ldr	r3, .L25+8
 2338 0308 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2339 030c 000053E3 		cmp	r3, #0
 2340 0310 2800001A 		bne	.L24
 344:../os_core/os_core.c ****                 y             = OSUnMapTbl[OSRdyGrp];          
 2341              		.loc 1 344 0
 2342 0314 BC309FE5 		ldr	r3, .L25+12
 2343 0318 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2344 031c B8209FE5 		ldr	r2, .L25+16
 2345 0320 0330D2E7 		ldrb	r3, [r2, r3]
 2346 0324 0D304BE5 		strb	r3, [fp, #-13]
 345:../os_core/os_core.c ****                 OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2347              		.loc 1 345 0
 2348 0328 0D305BE5 		ldrb	r3, [fp, #-13]
 2349 032c 8331A0E1 		mov	r3, r3, asl #3
 2350 0330 FF2003E2 		and	r2, r3, #255
 2351 0334 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2352 0338 A0109FE5 		ldr	r1, .L25+20
 2353 033c 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 2354 0340 94109FE5 		ldr	r1, .L25+16
 2355 0344 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 2356 0348 033082E0 		add	r3, r2, r3
 2357 034c FF2003E2 		and	r2, r3, #255
 2358 0350 8C309FE5 		ldr	r3, .L25+24
 2359 0354 0020C3E5 		strb	r2, [r3, #0]
 346:../os_core/os_core.c ****                 if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest 
 2360              		.loc 1 346 0
 2361 0358 84309FE5 		ldr	r3, .L25+24
 2362 035c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2363 0360 80309FE5 		ldr	r3, .L25+28
 2364 0364 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2365 0368 030052E1 		cmp	r2, r3
 2366 036c 1100000A 		beq	.L24
 347:../os_core/os_core.c ****                     OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 2367              		.loc 1 347 0
 2368 0370 6C309FE5 		ldr	r3, .L25+24
 2369 0374 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2370 0378 0320A0E1 		mov	r2, r3
 2371 037c 68309FE5 		ldr	r3, .L25+32
 2372 0380 022193E7 		ldr	r2, [r3, r2, asl #2]
 2373 0384 64309FE5 		ldr	r3, .L25+36
 2374 0388 002083E5 		str	r2, [r3, #0]
 348:../os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
 349:../os_core/os_core.c ****                     OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this ta
 2375              		.loc 1 349 0
 2376 038c 5C309FE5 		ldr	r3, .L25+36
 2377 0390 003093E5 		ldr	r3, [r3, #0]
 2378 0394 342093E5 		ldr	r2, [r3, #52]
 2379 0398 012082E2 		add	r2, r2, #1
 2380 039c 342083E5 		str	r2, [r3, #52]
 350:../os_core/os_core.c **** #endif
 351:../os_core/os_core.c ****                     OSCtxSwCtr++;                          /* Keep track of the number of ctx switc
 2381              		.loc 1 351 0
 2382 03a0 4C309FE5 		ldr	r3, .L25+40
 2383 03a4 003093E5 		ldr	r3, [r3, #0]
 2384 03a8 012083E2 		add	r2, r3, #1
 2385 03ac 40309FE5 		ldr	r3, .L25+40
 2386 03b0 002083E5 		str	r2, [r3, #0]
 352:../os_core/os_core.c ****                     OSIntCtxSw();                          /* Perform interrupt level ctx switch   
 2387              		.loc 1 352 0
 2388 03b4 FEFFFFEB 		bl	OSIntCtxSw
 2389              	.L24:
 353:../os_core/os_core.c ****                 }
 354:../os_core/os_core.c ****             }
 355:../os_core/os_core.c ****         }
 356:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 2390              		.loc 1 356 0
 2391              	@ 356 "../os_core/os_core.c" 1
 2392 03b8 04009DE4 		ldmfd sp!, {r0}             
 2393 03bc 00F021E1 	msr   cpsr_c, r0              
 2394              	@ 0 "" 2
 2395              	.L21:
 357:../os_core/os_core.c ****     }
 358:../os_core/os_core.c **** }
 2396              		.loc 1 358 0
 2397 03c0 0CD04BE2 		sub	sp, fp, #12
 2398 03c4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2399 03c8 1EFF2FE1 		bx	lr
 2400              	.L26:
 2401              		.align	2
 2402              	.L25:
 2403 03cc 00000000 		.word	OSRunning
 2404 03d0 00000000 		.word	OSIntNesting
 2405 03d4 00000000 		.word	OSLockNesting
 2406 03d8 00000000 		.word	OSRdyGrp
 2407 03dc 00000000 		.word	OSUnMapTbl
 2408 03e0 00000000 		.word	OSRdyTbl
 2409 03e4 00000000 		.word	OSPrioHighRdy
 2410 03e8 00000000 		.word	OSPrioCur
 2411 03ec 00000000 		.word	OSTCBPrioTbl
 2412 03f0 00000000 		.word	OSTCBHighRdy
 2413 03f4 00000000 		.word	OSCtxSwCtr
 2414              		.cfi_endproc
 2415              	.LFE4:
 2417              		.align	2
 2418              		.global	OSSchedLock
 2420              	OSSchedLock:
 2421              	.LFB5:
 359:../os_core/os_core.c **** /*$PAGE*/
 360:../os_core/os_core.c **** /*
 361:../os_core/os_core.c **** ***************************************************************************************************
 362:../os_core/os_core.c **** *                                          PREVENT SCHEDULING
 363:../os_core/os_core.c **** *
 364:../os_core/os_core.c **** * Description: This function is used to prevent rescheduling to take place.  This allows your appli
 365:../os_core/os_core.c **** *              to prevent context switches until you are ready to permit context switching.
 366:../os_core/os_core.c **** *
 367:../os_core/os_core.c **** * Arguments  : none
 368:../os_core/os_core.c **** *
 369:../os_core/os_core.c **** * Returns    : none
 370:../os_core/os_core.c **** *
 371:../os_core/os_core.c **** * Notes      : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for e
 372:../os_core/os_core.c **** *                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
 373:../os_core/os_core.c **** ***************************************************************************************************
 374:../os_core/os_core.c **** */
 375:../os_core/os_core.c **** 
 376:../os_core/os_core.c **** #if OS_SCHED_LOCK_EN > 0
 377:../os_core/os_core.c **** void  OSSchedLock (void)
 378:../os_core/os_core.c **** {
 2422              		.loc 1 378 0
 2423              		.cfi_startproc
 2424              		@ Function supports interworking.
 2425              		@ args = 0, pretend = 0, frame = 0
 2426              		@ frame_needed = 1, uses_anonymous_args = 0
 2427 03f8 0DC0A0E1 		mov	ip, sp
 2428              	.LCFI10:
 2429              		.cfi_def_cfa_register 12
 2430 03fc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2431 0400 04B04CE2 		sub	fp, ip, #4
 2432              		.cfi_offset 14, -8
 2433              		.cfi_offset 13, -12
 2434              		.cfi_offset 11, -16
 2435              	.LCFI11:
 2436              		.cfi_def_cfa 11, 4
 379:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 380:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 381:../os_core/os_core.c ****     
 382:../os_core/os_core.c ****     
 383:../os_core/os_core.c **** 
 384:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 385:../os_core/os_core.c **** #endif    
 386:../os_core/os_core.c ****     if (OSRunning == TRUE) {                     /* Make sure multitasking is running              
 2437              		.loc 1 386 0
 2438 0404 54309FE5 		ldr	r3, .L30
 2439 0408 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2440 040c 010053E3 		cmp	r3, #1
 2441 0410 0F00001A 		bne	.L27
 387:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 2442              		.loc 1 387 0
 2443              	@ 387 "../os_core/os_core.c" 1
 2444 0414 00000FE1 		mrs   r0, cpsr              
 2445 0418 04002DE5 	stmfd sp!, {r0}             
 2446 041c C00080E3 	orr   r0, r0, #0b11000000   
 2447 0420 00F021E1 	msr   cpsr_c, r0              
 2448              	@ 0 "" 2
 388:../os_core/os_core.c ****         if (OSLockNesting < 255u) {              /* Prevent OSLockNesting from wrapping back to 0  
 2449              		.loc 1 388 0
 2450 0424 38309FE5 		ldr	r3, .L30+4
 2451 0428 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2452 042c FF0053E3 		cmp	r3, #255
 2453 0430 0500000A 		beq	.L29
 389:../os_core/os_core.c ****             OSLockNesting++;                     /* Increment lock nesting level                   
 2454              		.loc 1 389 0
 2455 0434 28309FE5 		ldr	r3, .L30+4
 2456 0438 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2457 043c 013083E2 		add	r3, r3, #1
 2458 0440 FF2003E2 		and	r2, r3, #255
 2459 0444 18309FE5 		ldr	r3, .L30+4
 2460 0448 0020C3E5 		strb	r2, [r3, #0]
 2461              	.L29:
 390:../os_core/os_core.c ****         }
 391:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 2462              		.loc 1 391 0
 2463              	@ 391 "../os_core/os_core.c" 1
 2464 044c 04009DE4 		ldmfd sp!, {r0}             
 2465 0450 00F021E1 	msr   cpsr_c, r0              
 2466              	@ 0 "" 2
 2467              	.L27:
 392:../os_core/os_core.c ****     }
 393:../os_core/os_core.c **** }
 2468              		.loc 1 393 0
 2469 0454 0CD04BE2 		sub	sp, fp, #12
 2470 0458 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2471 045c 1EFF2FE1 		bx	lr
 2472              	.L31:
 2473              		.align	2
 2474              	.L30:
 2475 0460 00000000 		.word	OSRunning
 2476 0464 00000000 		.word	OSLockNesting
 2477              		.cfi_endproc
 2478              	.LFE5:
 2480              		.align	2
 2481              		.global	OSSchedUnlock
 2483              	OSSchedUnlock:
 2484              	.LFB6:
 394:../os_core/os_core.c **** #endif    
 395:../os_core/os_core.c **** 
 396:../os_core/os_core.c **** /*$PAGE*/
 397:../os_core/os_core.c **** /*
 398:../os_core/os_core.c **** ***************************************************************************************************
 399:../os_core/os_core.c **** *                                          ENABLE SCHEDULING
 400:../os_core/os_core.c **** *
 401:../os_core/os_core.c **** * Description: This function is used to re-allow rescheduling.
 402:../os_core/os_core.c **** *
 403:../os_core/os_core.c **** * Arguments  : none
 404:../os_core/os_core.c **** *
 405:../os_core/os_core.c **** * Returns    : none
 406:../os_core/os_core.c **** *
 407:../os_core/os_core.c **** * Notes      : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for e
 408:../os_core/os_core.c **** *                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
 409:../os_core/os_core.c **** ***************************************************************************************************
 410:../os_core/os_core.c **** */
 411:../os_core/os_core.c **** 
 412:../os_core/os_core.c **** #if OS_SCHED_LOCK_EN > 0
 413:../os_core/os_core.c **** void  OSSchedUnlock (void)
 414:../os_core/os_core.c **** {
 2485              		.loc 1 414 0
 2486              		.cfi_startproc
 2487              		@ Function supports interworking.
 2488              		@ args = 0, pretend = 0, frame = 0
 2489              		@ frame_needed = 1, uses_anonymous_args = 0
 2490 0468 0DC0A0E1 		mov	ip, sp
 2491              	.LCFI12:
 2492              		.cfi_def_cfa_register 12
 2493 046c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2494 0470 04B04CE2 		sub	fp, ip, #4
 2495              		.cfi_offset 14, -8
 2496              		.cfi_offset 13, -12
 2497              		.cfi_offset 11, -16
 2498              	.LCFI13:
 2499              		.cfi_def_cfa 11, 4
 415:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 416:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 417:../os_core/os_core.c ****     
 418:../os_core/os_core.c ****     
 419:../os_core/os_core.c **** 
 420:../os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 421:../os_core/os_core.c **** #endif    
 422:../os_core/os_core.c ****     if (OSRunning == TRUE) {                               /* Make sure multitasking is running    
 2500              		.loc 1 422 0
 2501 0474 9C309FE5 		ldr	r3, .L37
 2502 0478 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2503 047c 010053E3 		cmp	r3, #1
 2504 0480 2100001A 		bne	.L32
 423:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 2505              		.loc 1 423 0
 2506              	@ 423 "../os_core/os_core.c" 1
 2507 0484 00000FE1 		mrs   r0, cpsr              
 2508 0488 04002DE5 	stmfd sp!, {r0}             
 2509 048c C00080E3 	orr   r0, r0, #0b11000000   
 2510 0490 00F021E1 	msr   cpsr_c, r0              
 2511              	@ 0 "" 2
 424:../os_core/os_core.c ****         if (OSLockNesting > 0) {                           /* Do not decrement if already 0        
 2512              		.loc 1 424 0
 2513 0494 80309FE5 		ldr	r3, .L37+4
 2514 0498 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2515 049c 000053E3 		cmp	r3, #0
 2516 04a0 1700000A 		beq	.L34
 425:../os_core/os_core.c ****             OSLockNesting--;                               /* Decrement lock nesting level         
 2517              		.loc 1 425 0
 2518 04a4 70309FE5 		ldr	r3, .L37+4
 2519 04a8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2520 04ac 013043E2 		sub	r3, r3, #1
 2521 04b0 FF2003E2 		and	r2, r3, #255
 2522 04b4 60309FE5 		ldr	r3, .L37+4
 2523 04b8 0020C3E5 		strb	r2, [r3, #0]
 426:../os_core/os_core.c ****             if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...  
 2524              		.loc 1 426 0
 2525 04bc 58309FE5 		ldr	r3, .L37+4
 2526 04c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2527 04c4 000053E3 		cmp	r3, #0
 2528 04c8 0A00001A 		bne	.L35
 427:../os_core/os_core.c ****                 if (OSIntNesting == 0) {                   /* ... not in an ISR                    
 2529              		.loc 1 427 0
 2530 04cc 4C309FE5 		ldr	r3, .L37+8
 2531 04d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2532 04d4 000053E3 		cmp	r3, #0
 2533 04d8 0300001A 		bne	.L36
 428:../os_core/os_core.c ****                     OS_EXIT_CRITICAL();
 2534              		.loc 1 428 0
 2535              	@ 428 "../os_core/os_core.c" 1
 2536 04dc 04009DE4 		ldmfd sp!, {r0}             
 2537 04e0 00F021E1 	msr   cpsr_c, r0              
 2538              	@ 0 "" 2
 429:../os_core/os_core.c ****                     OS_Sched();                            /* See if a HPT is ready                
 2539              		.loc 1 429 0
 2540 04e4 FEFFFFEB 		bl	OS_Sched
 2541 04e8 070000EA 		b	.L32
 2542              	.L36:
 430:../os_core/os_core.c ****                 } else {
 431:../os_core/os_core.c ****                     OS_EXIT_CRITICAL();
 2543              		.loc 1 431 0
 2544              	@ 431 "../os_core/os_core.c" 1
 2545 04ec 04009DE4 		ldmfd sp!, {r0}             
 2546 04f0 00F021E1 	msr   cpsr_c, r0              
 2547              	@ 0 "" 2
 2548 04f4 040000EA 		b	.L32
 2549              	.L35:
 432:../os_core/os_core.c ****                 }
 433:../os_core/os_core.c ****             } else {
 434:../os_core/os_core.c ****                 OS_EXIT_CRITICAL();
 2550              		.loc 1 434 0
 2551              	@ 434 "../os_core/os_core.c" 1
 2552 04f8 04009DE4 		ldmfd sp!, {r0}             
 2553 04fc 00F021E1 	msr   cpsr_c, r0              
 2554              	@ 0 "" 2
 2555 0500 010000EA 		b	.L32
 2556              	.L34:
 435:../os_core/os_core.c ****             }
 436:../os_core/os_core.c ****         } else {
 437:../os_core/os_core.c ****             OS_EXIT_CRITICAL();
 2557              		.loc 1 437 0
 2558              	@ 437 "../os_core/os_core.c" 1
 2559 0504 04009DE4 		ldmfd sp!, {r0}             
 2560 0508 00F021E1 	msr   cpsr_c, r0              
 2561              	@ 0 "" 2
 2562              	.L32:
 438:../os_core/os_core.c ****         }
 439:../os_core/os_core.c ****     }
 440:../os_core/os_core.c **** }
 2563              		.loc 1 440 0
 2564 050c 0CD04BE2 		sub	sp, fp, #12
 2565 0510 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2566 0514 1EFF2FE1 		bx	lr
 2567              	.L38:
 2568              		.align	2
 2569              	.L37:
 2570 0518 00000000 		.word	OSRunning
 2571 051c 00000000 		.word	OSLockNesting
 2572 0520 00000000 		.word	OSIntNesting
 2573              		.cfi_endproc
 2574              	.LFE6:
 2576              		.align	2
 2577              		.global	OSStart
 2579              	OSStart:
 2580              	.LFB7:
 441:../os_core/os_core.c **** #endif    
 442:../os_core/os_core.c **** 
 443:../os_core/os_core.c **** /*$PAGE*/
 444:../os_core/os_core.c **** /*
 445:../os_core/os_core.c **** ***************************************************************************************************
 446:../os_core/os_core.c **** *                                          START MULTITASKING
 447:../os_core/os_core.c **** *
 448:../os_core/os_core.c **** * Description: This function is used to start the multitasking process which lets uC/OS-II manages 
 449:../os_core/os_core.c **** *              task that you have created.  Before you can call OSStart(), you MUST have called OSI
 450:../os_core/os_core.c **** *              and you MUST have created at least one task.
 451:../os_core/os_core.c **** *
 452:../os_core/os_core.c **** * Arguments  : none
 453:../os_core/os_core.c **** *
 454:../os_core/os_core.c **** * Returns    : none
 455:../os_core/os_core.c **** *
 456:../os_core/os_core.c **** * Note       : OSStartHighRdy() MUST:
 457:../os_core/os_core.c **** *                 a) Call OSTaskSwHook() then,
 458:../os_core/os_core.c **** *                 b) Set OSRunning to TRUE.
 459:../os_core/os_core.c **** *                 c) Load the context of the task pointed to by OSTCBHighRdy.
 460:../os_core/os_core.c **** *                 d_ Execute the task.
 461:../os_core/os_core.c **** ***************************************************************************************************
 462:../os_core/os_core.c **** */
 463:../os_core/os_core.c **** 
 464:../os_core/os_core.c **** void  OSStart (void)
 465:../os_core/os_core.c **** {
 2581              		.loc 1 465 0
 2582              		.cfi_startproc
 2583              		@ Function supports interworking.
 2584              		@ args = 0, pretend = 0, frame = 8
 2585              		@ frame_needed = 1, uses_anonymous_args = 0
 2586 0524 0DC0A0E1 		mov	ip, sp
 2587              	.LCFI14:
 2588              		.cfi_def_cfa_register 12
 2589 0528 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2590 052c 04B04CE2 		sub	fp, ip, #4
 2591              		.cfi_offset 14, -8
 2592              		.cfi_offset 13, -12
 2593              		.cfi_offset 11, -16
 2594              	.LCFI15:
 2595              		.cfi_def_cfa 11, 4
 2596 0530 08D04DE2 		sub	sp, sp, #8
 466:../os_core/os_core.c ****     INT8U y;
 467:../os_core/os_core.c ****     INT8U x;
 468:../os_core/os_core.c **** 
 469:../os_core/os_core.c **** 
 470:../os_core/os_core.c ****     if (OSRunning == FALSE) {
 2597              		.loc 1 470 0
 2598 0534 A0309FE5 		ldr	r3, .L41
 2599 0538 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2600 053c 000053E3 		cmp	r3, #0
 2601 0540 2200001A 		bne	.L39
 471:../os_core/os_core.c ****         y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority numbe
 2602              		.loc 1 471 0
 2603 0544 94309FE5 		ldr	r3, .L41+4
 2604 0548 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2605 054c 90209FE5 		ldr	r2, .L41+8
 2606 0550 0330D2E7 		ldrb	r3, [r2, r3]
 2607 0554 0D304BE5 		strb	r3, [fp, #-13]
 472:../os_core/os_core.c ****         x             = OSUnMapTbl[OSRdyTbl[y]];
 2608              		.loc 1 472 0
 2609 0558 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2610 055c 84209FE5 		ldr	r2, .L41+12
 2611 0560 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2612 0564 78209FE5 		ldr	r2, .L41+8
 2613 0568 0330D2E7 		ldrb	r3, [r2, r3]
 2614 056c 0E304BE5 		strb	r3, [fp, #-14]
 473:../os_core/os_core.c ****         OSPrioHighRdy = (INT8U)((y << 3) + x);
 2615              		.loc 1 473 0
 2616 0570 0D305BE5 		ldrb	r3, [fp, #-13]
 2617 0574 8331A0E1 		mov	r3, r3, asl #3
 2618 0578 FF2003E2 		and	r2, r3, #255
 2619 057c 0E305BE5 		ldrb	r3, [fp, #-14]
 2620 0580 033082E0 		add	r3, r2, r3
 2621 0584 FF2003E2 		and	r2, r3, #255
 2622 0588 5C309FE5 		ldr	r3, .L41+16
 2623 058c 0020C3E5 		strb	r2, [r3, #0]
 474:../os_core/os_core.c ****         OSPrioCur     = OSPrioHighRdy;
 2624              		.loc 1 474 0
 2625 0590 54309FE5 		ldr	r3, .L41+16
 2626 0594 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2627 0598 50309FE5 		ldr	r3, .L41+20
 2628 059c 0020C3E5 		strb	r2, [r3, #0]
 475:../os_core/os_core.c ****         OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run
 2629              		.loc 1 475 0
 2630 05a0 44309FE5 		ldr	r3, .L41+16
 2631 05a4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2632 05a8 0320A0E1 		mov	r2, r3
 2633 05ac 40309FE5 		ldr	r3, .L41+24
 2634 05b0 022193E7 		ldr	r2, [r3, r2, asl #2]
 2635 05b4 3C309FE5 		ldr	r3, .L41+28
 2636 05b8 002083E5 		str	r2, [r3, #0]
 476:../os_core/os_core.c ****         OSTCBCur      = OSTCBHighRdy;
 2637              		.loc 1 476 0
 2638 05bc 34309FE5 		ldr	r3, .L41+28
 2639 05c0 002093E5 		ldr	r2, [r3, #0]
 2640 05c4 30309FE5 		ldr	r3, .L41+32
 2641 05c8 002083E5 		str	r2, [r3, #0]
 477:../os_core/os_core.c ****         OSStartHighRdy();                            /* Execute target specific code to start task 
 2642              		.loc 1 477 0
 2643 05cc FEFFFFEB 		bl	OSStartHighRdy
 2644              	.L39:
 478:../os_core/os_core.c ****     }
 479:../os_core/os_core.c **** }
 2645              		.loc 1 479 0
 2646 05d0 0CD04BE2 		sub	sp, fp, #12
 2647 05d4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2648 05d8 1EFF2FE1 		bx	lr
 2649              	.L42:
 2650              		.align	2
 2651              	.L41:
 2652 05dc 00000000 		.word	OSRunning
 2653 05e0 00000000 		.word	OSRdyGrp
 2654 05e4 00000000 		.word	OSUnMapTbl
 2655 05e8 00000000 		.word	OSRdyTbl
 2656 05ec 00000000 		.word	OSPrioHighRdy
 2657 05f0 00000000 		.word	OSPrioCur
 2658 05f4 00000000 		.word	OSTCBPrioTbl
 2659 05f8 00000000 		.word	OSTCBHighRdy
 2660 05fc 00000000 		.word	OSTCBCur
 2661              		.cfi_endproc
 2662              	.LFE7:
 2664              		.align	2
 2665              		.global	OSStatInit
 2667              	OSStatInit:
 2668              	.LFB8:
 480:../os_core/os_core.c **** /*$PAGE*/
 481:../os_core/os_core.c **** /*
 482:../os_core/os_core.c **** ***************************************************************************************************
 483:../os_core/os_core.c **** *                                        STATISTICS INITIALIZATION
 484:../os_core/os_core.c **** *
 485:../os_core/os_core.c **** * Description: This function is called by your application to establish CPU usage by first determin
 486:../os_core/os_core.c **** *              how high a 32-bit counter would count to in 1 second if no other tasks were to execu
 487:../os_core/os_core.c **** *              during that time.  CPU usage is then determined by a low priority task which keeps t
 488:../os_core/os_core.c **** *              of this 32-bit counter every second but this time, with other tasks running.  CPU us
 489:../os_core/os_core.c **** *              determined by:
 490:../os_core/os_core.c **** *
 491:../os_core/os_core.c **** *                                             OSIdleCtr
 492:../os_core/os_core.c **** *                 CPU Usage (%) = 100 * (1 - ------------)
 493:../os_core/os_core.c **** *                                            OSIdleCtrMax
 494:../os_core/os_core.c **** *
 495:../os_core/os_core.c **** * Arguments  : none
 496:../os_core/os_core.c **** *
 497:../os_core/os_core.c **** * Returns    : none
 498:../os_core/os_core.c **** ***************************************************************************************************
 499:../os_core/os_core.c **** */
 500:../os_core/os_core.c **** 
 501:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
 502:../os_core/os_core.c **** void  OSStatInit (void)
 503:../os_core/os_core.c **** {
 2669              		.loc 1 503 0
 2670              		.cfi_startproc
 2671              		@ Function supports interworking.
 2672              		@ args = 0, pretend = 0, frame = 0
 2673              		@ frame_needed = 1, uses_anonymous_args = 0
 2674 0600 0DC0A0E1 		mov	ip, sp
 2675              	.LCFI16:
 2676              		.cfi_def_cfa_register 12
 2677 0604 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2678 0608 04B04CE2 		sub	fp, ip, #4
 2679              		.cfi_offset 14, -8
 2680              		.cfi_offset 13, -12
 2681              		.cfi_offset 11, -16
 2682              	.LCFI17:
 2683              		.cfi_def_cfa 11, 4
 504:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 505:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 506:../os_core/os_core.c ****     
 507:../os_core/os_core.c ****     
 508:../os_core/os_core.c **** 
 509:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 510:../os_core/os_core.c **** #endif    
 511:../os_core/os_core.c ****     OSTimeDly(2);                                /* Synchronize with clock tick                    
 2684              		.loc 1 511 0
 2685 060c 0200A0E3 		mov	r0, #2
 2686 0610 FEFFFFEB 		bl	OSTimeDly
 512:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 2687              		.loc 1 512 0
 2688              	@ 512 "../os_core/os_core.c" 1
 2689 0614 00000FE1 		mrs   r0, cpsr              
 2690 0618 04002DE5 	stmfd sp!, {r0}             
 2691 061c C00080E3 	orr   r0, r0, #0b11000000   
 2692 0620 00F021E1 	msr   cpsr_c, r0              
 2693              	@ 0 "" 2
 513:../os_core/os_core.c ****     OSIdleCtr    = 0L;                           /* Clear idle counter                             
 2694              		.loc 1 513 0
 2695 0624 54309FE5 		ldr	r3, .L44
 2696 0628 0020A0E3 		mov	r2, #0
 2697 062c 002083E5 		str	r2, [r3, #0]
 514:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2698              		.loc 1 514 0
 2699              	@ 514 "../os_core/os_core.c" 1
 2700 0630 04009DE4 		ldmfd sp!, {r0}             
 2701 0634 00F021E1 	msr   cpsr_c, r0              
 2702              	@ 0 "" 2
 515:../os_core/os_core.c ****     OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 seco
 2703              		.loc 1 515 0
 2704 0638 0A00A0E3 		mov	r0, #10
 2705 063c FEFFFFEB 		bl	OSTimeDly
 516:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 2706              		.loc 1 516 0
 2707              	@ 516 "../os_core/os_core.c" 1
 2708 0640 00000FE1 		mrs   r0, cpsr              
 2709 0644 04002DE5 	stmfd sp!, {r0}             
 2710 0648 C00080E3 	orr   r0, r0, #0b11000000   
 2711 064c 00F021E1 	msr   cpsr_c, r0              
 2712              	@ 0 "" 2
 517:../os_core/os_core.c ****     OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second
 2713              		.loc 1 517 0
 2714 0650 28309FE5 		ldr	r3, .L44
 2715 0654 002093E5 		ldr	r2, [r3, #0]
 2716 0658 24309FE5 		ldr	r3, .L44+4
 2717 065c 002083E5 		str	r2, [r3, #0]
 518:../os_core/os_core.c ****     OSStatRdy    = TRUE;
 2718              		.loc 1 518 0
 2719 0660 20309FE5 		ldr	r3, .L44+8
 2720 0664 0120A0E3 		mov	r2, #1
 2721 0668 0020C3E5 		strb	r2, [r3, #0]
 519:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2722              		.loc 1 519 0
 2723              	@ 519 "../os_core/os_core.c" 1
 2724 066c 04009DE4 		ldmfd sp!, {r0}             
 2725 0670 00F021E1 	msr   cpsr_c, r0              
 2726              	@ 0 "" 2
 520:../os_core/os_core.c **** }
 2727              		.loc 1 520 0
 2728 0674 0CD04BE2 		sub	sp, fp, #12
 2729 0678 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2730 067c 1EFF2FE1 		bx	lr
 2731              	.L45:
 2732              		.align	2
 2733              	.L44:
 2734 0680 00000000 		.word	OSIdleCtr
 2735 0684 00000000 		.word	OSIdleCtrMax
 2736 0688 00000000 		.word	OSStatRdy
 2737              		.cfi_endproc
 2738              	.LFE8:
 2740              		.align	2
 2741              		.global	OSTimeTick
 2743              	OSTimeTick:
 2744              	.LFB9:
 521:../os_core/os_core.c **** #endif
 522:../os_core/os_core.c **** /*$PAGE*/
 523:../os_core/os_core.c **** /*
 524:../os_core/os_core.c **** ***************************************************************************************************
 525:../os_core/os_core.c **** *                                         PROCESS SYSTEM TICK
 526:../os_core/os_core.c **** *
 527:../os_core/os_core.c **** * Description: This function is used to signal to uC/OS-II the occurrence of a 'system tick' (also 
 528:../os_core/os_core.c **** *              as a 'clock tick').  This function should be called by the ticker ISR but, can also 
 529:../os_core/os_core.c **** *              called by a high priority task.
 530:../os_core/os_core.c **** *
 531:../os_core/os_core.c **** * Arguments  : none
 532:../os_core/os_core.c **** *
 533:../os_core/os_core.c **** * Returns    : none
 534:../os_core/os_core.c **** ***************************************************************************************************
 535:../os_core/os_core.c **** */
 536:../os_core/os_core.c **** 
 537:../os_core/os_core.c **** void  OSTimeTick (void)
 538:../os_core/os_core.c **** {
 2745              		.loc 1 538 0
 2746              		.cfi_startproc
 2747              		@ Function supports interworking.
 2748              		@ args = 0, pretend = 0, frame = 8
 2749              		@ frame_needed = 1, uses_anonymous_args = 0
 2750 068c 0DC0A0E1 		mov	ip, sp
 2751              	.LCFI18:
 2752              		.cfi_def_cfa_register 12
 2753 0690 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2754 0694 04B04CE2 		sub	fp, ip, #4
 2755              		.cfi_offset 14, -8
 2756              		.cfi_offset 13, -12
 2757              		.cfi_offset 11, -16
 2758              	.LCFI19:
 2759              		.cfi_def_cfa 11, 4
 2760 0698 08D04DE2 		sub	sp, sp, #8
 539:../os_core/os_core.c ****     OS_TCB    *ptcb;
 540:../os_core/os_core.c **** #if OS_TICK_STEP_EN > 0
 541:../os_core/os_core.c ****     BOOLEAN    step;
 542:../os_core/os_core.c **** #endif
 543:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 544:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 545:../os_core/os_core.c **** 
 546:../os_core/os_core.c **** 
 547:../os_core/os_core.c **** 
 548:../os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 549:../os_core/os_core.c **** #endif
 550:../os_core/os_core.c **** #if OS_TIME_TICK_HOOK_EN > 0
 551:../os_core/os_core.c ****     OSTimeTickHook();                                      /* Call user definable hook             
 2761              		.loc 1 551 0
 2762 069c FEFFFFEB 		bl	OSTimeTickHook
 552:../os_core/os_core.c **** #endif
 553:../os_core/os_core.c **** #if OS_TIME_GET_SET_EN > 0
 554:../os_core/os_core.c ****     OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter       
 2763              		.loc 1 554 0
 2764              	@ 554 "../os_core/os_core.c" 1
 2765 06a0 00000FE1 		mrs   r0, cpsr              
 2766 06a4 04002DE5 	stmfd sp!, {r0}             
 2767 06a8 C00080E3 	orr   r0, r0, #0b11000000   
 2768 06ac 00F021E1 	msr   cpsr_c, r0              
 2769              	@ 0 "" 2
 555:../os_core/os_core.c ****     OSTime++;
 2770              		.loc 1 555 0
 2771 06b0 D8319FE5 		ldr	r3, .L61
 2772 06b4 003093E5 		ldr	r3, [r3, #0]
 2773 06b8 012083E2 		add	r2, r3, #1
 2774 06bc CC319FE5 		ldr	r3, .L61
 2775 06c0 002083E5 		str	r2, [r3, #0]
 556:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2776              		.loc 1 556 0
 2777              	@ 556 "../os_core/os_core.c" 1
 2778 06c4 04009DE4 		ldmfd sp!, {r0}             
 2779 06c8 00F021E1 	msr   cpsr_c, r0              
 2780              	@ 0 "" 2
 557:../os_core/os_core.c **** #endif
 558:../os_core/os_core.c ****     if (OSRunning == TRUE) {
 2781              		.loc 1 558 0
 2782 06cc C0319FE5 		ldr	r3, .L61+4
 2783 06d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2784 06d4 010053E3 		cmp	r3, #1
 2785 06d8 6900001A 		bne	.L46
 559:../os_core/os_core.c **** #if OS_TICK_STEP_EN > 0
 560:../os_core/os_core.c ****         switch (OSTickStepState) {                         /* Determine whether we need to process 
 2786              		.loc 1 560 0
 2787 06dc B4319FE5 		ldr	r3, .L61+8
 2788 06e0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2789 06e4 010053E3 		cmp	r3, #1
 2790 06e8 0600000A 		beq	.L50
 2791 06ec 020053E3 		cmp	r3, #2
 2792 06f0 0700000A 		beq	.L51
 2793 06f4 000053E3 		cmp	r3, #0
 2794 06f8 0B00001A 		bne	.L59
 2795              	.L49:
 561:../os_core/os_core.c ****             case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled            
 562:../os_core/os_core.c ****                  step = TRUE;
 2796              		.loc 1 562 0
 2797 06fc 0130A0E3 		mov	r3, #1
 2798 0700 11304BE5 		strb	r3, [fp, #-17]
 563:../os_core/os_core.c ****                  break;
 2799              		.loc 1 563 0
 2800 0704 0E0000EA 		b	.L52
 2801              	.L50:
 564:../os_core/os_core.c **** 
 565:../os_core/os_core.c ****             case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ..
 566:../os_core/os_core.c ****                  step = FALSE;                             /*      .. OSTickStepState to OS_TICK_ST
 2802              		.loc 1 566 0
 2803 0708 0030A0E3 		mov	r3, #0
 2804 070c 11304BE5 		strb	r3, [fp, #-17]
 567:../os_core/os_core.c ****                  break;
 2805              		.loc 1 567 0
 2806 0710 0B0000EA 		b	.L52
 2807              	.L51:
 568:../os_core/os_core.c **** 
 569:../os_core/os_core.c ****             case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for n
 570:../os_core/os_core.c ****                  step            = TRUE;                   /*      ... step command from uC/OS-View
 2808              		.loc 1 570 0
 2809 0714 0130A0E3 		mov	r3, #1
 2810 0718 11304BE5 		strb	r3, [fp, #-17]
 571:../os_core/os_core.c ****                  OSTickStepState = OS_TICK_STEP_WAIT;
 2811              		.loc 1 571 0
 2812 071c 74319FE5 		ldr	r3, .L61+8
 2813 0720 0120A0E3 		mov	r2, #1
 2814 0724 0020C3E5 		strb	r2, [r3, #0]
 572:../os_core/os_core.c ****                  break;
 2815              		.loc 1 572 0
 2816 0728 050000EA 		b	.L52
 2817              	.L59:
 573:../os_core/os_core.c **** 
 574:../os_core/os_core.c ****             default:                                       /* Invalid case, correct situation      
 575:../os_core/os_core.c ****                  step            = TRUE;
 2818              		.loc 1 575 0
 2819 072c 0130A0E3 		mov	r3, #1
 2820 0730 11304BE5 		strb	r3, [fp, #-17]
 576:../os_core/os_core.c ****                  OSTickStepState = OS_TICK_STEP_DIS;
 2821              		.loc 1 576 0
 2822 0734 5C319FE5 		ldr	r3, .L61+8
 2823 0738 0020A0E3 		mov	r2, #0
 2824 073c 0020C3E5 		strb	r2, [r3, #0]
 577:../os_core/os_core.c ****                  break;
 2825              		.loc 1 577 0
 2826 0740 0000A0E1 		mov	r0, r0	@ nop
 2827              	.L52:
 578:../os_core/os_core.c ****         }
 579:../os_core/os_core.c ****         if (step == FALSE) {                               /* Return if waiting for step command   
 2828              		.loc 1 579 0
 2829 0744 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2830 0748 000053E3 		cmp	r3, #0
 2831 074c 4B00000A 		beq	.L60
 2832              	.L53:
 580:../os_core/os_core.c ****             return;
 581:../os_core/os_core.c ****         }
 582:../os_core/os_core.c **** #endif
 583:../os_core/os_core.c ****         ptcb = OSTCBList;                                  /* Point at first TCB in TCB list       
 2833              		.loc 1 583 0
 2834 0750 44319FE5 		ldr	r3, .L61+12
 2835 0754 003093E5 		ldr	r3, [r3, #0]
 2836 0758 10300BE5 		str	r3, [fp, #-16]
 584:../os_core/os_core.c ****         while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {          /* Go through all TCBs in TCB list      
 2837              		.loc 1 584 0
 2838 075c 420000EA 		b	.L54
 2839              	.L58:
 585:../os_core/os_core.c ****             OS_ENTER_CRITICAL();
 2840              		.loc 1 585 0
 2841              	@ 585 "../os_core/os_core.c" 1
 2842 0760 00000FE1 		mrs   r0, cpsr              
 2843 0764 04002DE5 	stmfd sp!, {r0}             
 2844 0768 C00080E3 	orr   r0, r0, #0b11000000   
 2845 076c 00F021E1 	msr   cpsr_c, r0              
 2846              	@ 0 "" 2
 586:../os_core/os_core.c ****             if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with
 2847              		.loc 1 586 0
 2848 0770 10301BE5 		ldr	r3, [fp, #-16]
 2849 0774 BA32D3E1 		ldrh	r3, [r3, #42]
 2850 0778 000053E3 		cmp	r3, #0
 2851 077c 3500000A 		beq	.L55
 587:../os_core/os_core.c ****                 if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of dela
 2852              		.loc 1 587 0
 2853 0780 10301BE5 		ldr	r3, [fp, #-16]
 2854 0784 BA32D3E1 		ldrh	r3, [r3, #42]
 2855 0788 013043E2 		sub	r3, r3, #1
 2856 078c 0338A0E1 		mov	r3, r3, asl #16
 2857 0790 2328A0E1 		mov	r2, r3, lsr #16
 2858 0794 10301BE5 		ldr	r3, [fp, #-16]
 2859 0798 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
 2860 079c 10301BE5 		ldr	r3, [fp, #-16]
 2861 07a0 BA32D3E1 		ldrh	r3, [r3, #42]
 2862 07a4 000053E3 		cmp	r3, #0
 2863 07a8 2A00001A 		bne	.L55
 588:../os_core/os_core.c ****                                                            /* Check for timeout                    
 589:../os_core/os_core.c ****                     if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2864              		.loc 1 589 0
 2865 07ac 10301BE5 		ldr	r3, [fp, #-16]
 2866 07b0 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2867 07b4 373003E2 		and	r3, r3, #55
 2868 07b8 000053E3 		cmp	r3, #0
 2869 07bc 0900000A 		beq	.L56
 590:../os_core/os_core.c ****                         ptcb->OSTCBStat   &= ~OS_STAT_PEND_ANY;                /* Yes, Clear status
 2870              		.loc 1 590 0
 2871 07c0 10301BE5 		ldr	r3, [fp, #-16]
 2872 07c4 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2873 07c8 3730C3E3 		bic	r3, r3, #55
 2874 07cc FF2003E2 		and	r2, r3, #255
 2875 07d0 10301BE5 		ldr	r3, [fp, #-16]
 2876 07d4 2C20C3E5 		strb	r2, [r3, #44]
 591:../os_core/os_core.c ****                         ptcb->OSTCBPendTO  = TRUE;                             /* Indicate PEND tim
 2877              		.loc 1 591 0
 2878 07d8 10301BE5 		ldr	r3, [fp, #-16]
 2879 07dc 0120A0E3 		mov	r2, #1
 2880 07e0 2D20C3E5 		strb	r2, [r3, #45]
 2881 07e4 020000EA 		b	.L57
 2882              	.L56:
 592:../os_core/os_core.c ****                     } else {
 593:../os_core/os_core.c ****                         ptcb->OSTCBPendTO  = FALSE;
 2883              		.loc 1 593 0
 2884 07e8 10301BE5 		ldr	r3, [fp, #-16]
 2885 07ec 0020A0E3 		mov	r2, #0
 2886 07f0 2D20C3E5 		strb	r2, [r3, #45]
 2887              	.L57:
 594:../os_core/os_core.c ****                     }
 595:../os_core/os_core.c **** 
 596:../os_core/os_core.c ****                     if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended
 2888              		.loc 1 596 0
 2889 07f4 10301BE5 		ldr	r3, [fp, #-16]
 2890 07f8 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2891 07fc 083003E2 		and	r3, r3, #8
 2892 0800 000053E3 		cmp	r3, #0
 2893 0804 1300001A 		bne	.L55
 597:../os_core/os_core.c ****                         OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready  
 2894              		.loc 1 597 0
 2895 0808 10301BE5 		ldr	r3, [fp, #-16]
 2896 080c 3220D3E5 		ldrb	r2, [r3, #50]	@ zero_extendqisi2
 2897 0810 88309FE5 		ldr	r3, .L61+16
 2898 0814 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2899 0818 033082E1 		orr	r3, r2, r3
 2900 081c FF2003E2 		and	r2, r3, #255
 2901 0820 78309FE5 		ldr	r3, .L61+16
 2902 0824 0020C3E5 		strb	r2, [r3, #0]
 598:../os_core/os_core.c ****                         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2903              		.loc 1 598 0
 2904 0828 10301BE5 		ldr	r3, [fp, #-16]
 2905 082c 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 2906 0830 10201BE5 		ldr	r2, [fp, #-16]
 2907 0834 3020D2E5 		ldrb	r2, [r2, #48]	@ zero_extendqisi2
 2908 0838 64109FE5 		ldr	r1, .L61+20
 2909 083c 0210D1E7 		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 2910 0840 10201BE5 		ldr	r2, [fp, #-16]
 2911 0844 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 2912 0848 022081E1 		orr	r2, r1, r2
 2913 084c FF1002E2 		and	r1, r2, #255
 2914 0850 4C209FE5 		ldr	r2, .L61+20
 2915 0854 0310C2E7 		strb	r1, [r2, r3]
 2916              	.L55:
 599:../os_core/os_core.c ****                     }
 600:../os_core/os_core.c ****                 }
 601:../os_core/os_core.c ****             }
 602:../os_core/os_core.c ****             ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list        
 2917              		.loc 1 602 0
 2918 0858 10301BE5 		ldr	r3, [fp, #-16]
 2919 085c 143093E5 		ldr	r3, [r3, #20]
 2920 0860 10300BE5 		str	r3, [fp, #-16]
 603:../os_core/os_core.c ****             OS_EXIT_CRITICAL();
 2921              		.loc 1 603 0
 2922              	@ 603 "../os_core/os_core.c" 1
 2923 0864 04009DE4 		ldmfd sp!, {r0}             
 2924 0868 00F021E1 	msr   cpsr_c, r0              
 2925              	@ 0 "" 2
 2926              	.L54:
 584:../os_core/os_core.c ****         while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {          /* Go through all TCBs in TCB list      
 2927              		.loc 1 584 0 discriminator 1
 2928 086c 10301BE5 		ldr	r3, [fp, #-16]
 2929 0870 2E30D3E5 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 2930 0874 3F0053E3 		cmp	r3, #63
 2931 0878 B8FFFF1A 		bne	.L58
 2932 087c 000000EA 		b	.L46
 2933              	.L60:
 580:../os_core/os_core.c ****             return;
 2934              		.loc 1 580 0
 2935 0880 0000A0E1 		mov	r0, r0	@ nop
 2936              	.L46:
 604:../os_core/os_core.c ****         }
 605:../os_core/os_core.c ****     }
 606:../os_core/os_core.c **** }
 2937              		.loc 1 606 0
 2938 0884 0CD04BE2 		sub	sp, fp, #12
 2939 0888 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2940 088c 1EFF2FE1 		bx	lr
 2941              	.L62:
 2942              		.align	2
 2943              	.L61:
 2944 0890 00000000 		.word	OSTime
 2945 0894 00000000 		.word	OSRunning
 2946 0898 00000000 		.word	OSTickStepState
 2947 089c 00000000 		.word	OSTCBList
 2948 08a0 00000000 		.word	OSRdyGrp
 2949 08a4 00000000 		.word	OSRdyTbl
 2950              		.cfi_endproc
 2951              	.LFE9:
 2953              		.align	2
 2954              		.global	OSVersion
 2956              	OSVersion:
 2957              	.LFB10:
 607:../os_core/os_core.c **** /*$PAGE*/
 608:../os_core/os_core.c **** /*
 609:../os_core/os_core.c **** ***************************************************************************************************
 610:../os_core/os_core.c **** *                                             GET VERSION
 611:../os_core/os_core.c **** *
 612:../os_core/os_core.c **** * Description: This function is used to return the version number of uC/OS-II.  The returned value
 613:../os_core/os_core.c **** *              corresponds to uC/OS-II's version number multiplied by 100.  In other words, version
 614:../os_core/os_core.c **** *              would be returned as 200.
 615:../os_core/os_core.c **** *
 616:../os_core/os_core.c **** * Arguments  : none
 617:../os_core/os_core.c **** *
 618:../os_core/os_core.c **** * Returns    : the version number of uC/OS-II multiplied by 100.
 619:../os_core/os_core.c **** ***************************************************************************************************
 620:../os_core/os_core.c **** */
 621:../os_core/os_core.c **** 
 622:../os_core/os_core.c **** INT16U  OSVersion (void)
 623:../os_core/os_core.c **** {
 2958              		.loc 1 623 0
 2959              		.cfi_startproc
 2960              		@ Function supports interworking.
 2961              		@ args = 0, pretend = 0, frame = 0
 2962              		@ frame_needed = 1, uses_anonymous_args = 0
 2963 08a8 0DC0A0E1 		mov	ip, sp
 2964              	.LCFI20:
 2965              		.cfi_def_cfa_register 12
 2966 08ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2967 08b0 04B04CE2 		sub	fp, ip, #4
 2968              		.cfi_offset 14, -8
 2969              		.cfi_offset 13, -12
 2970              		.cfi_offset 11, -16
 2971              	.LCFI21:
 2972              		.cfi_def_cfa 11, 4
 624:../os_core/os_core.c ****     return (OS_VERSION);
 2973              		.loc 1 624 0
 2974 08b4 453FA0E3 		mov	r3, #276
 625:../os_core/os_core.c **** }
 2975              		.loc 1 625 0
 2976 08b8 0300A0E1 		mov	r0, r3
 2977 08bc 0CD04BE2 		sub	sp, fp, #12
 2978 08c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2979 08c4 1EFF2FE1 		bx	lr
 2980              		.cfi_endproc
 2981              	.LFE10:
 2983              		.align	2
 2984              		.global	OS_Dummy
 2986              	OS_Dummy:
 2987              	.LFB11:
 626:../os_core/os_core.c **** 
 627:../os_core/os_core.c **** /*$PAGE*/
 628:../os_core/os_core.c **** /*
 629:../os_core/os_core.c **** ***************************************************************************************************
 630:../os_core/os_core.c **** *                                            DUMMY FUNCTION
 631:../os_core/os_core.c **** *
 632:../os_core/os_core.c **** * Description: This function doesn't do anything.  It is called by OSTaskDel().
 633:../os_core/os_core.c **** *
 634:../os_core/os_core.c **** * Arguments  : none
 635:../os_core/os_core.c **** *
 636:../os_core/os_core.c **** * Returns    : none
 637:../os_core/os_core.c **** ***************************************************************************************************
 638:../os_core/os_core.c **** */
 639:../os_core/os_core.c **** 
 640:../os_core/os_core.c **** #if OS_TASK_DEL_EN > 0
 641:../os_core/os_core.c **** void  OS_Dummy (void)
 642:../os_core/os_core.c **** {
 2988              		.loc 1 642 0
 2989              		.cfi_startproc
 2990              		@ Function supports interworking.
 2991              		@ args = 0, pretend = 0, frame = 0
 2992              		@ frame_needed = 1, uses_anonymous_args = 0
 2993 08c8 0DC0A0E1 		mov	ip, sp
 2994              	.LCFI22:
 2995              		.cfi_def_cfa_register 12
 2996 08cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2997 08d0 04B04CE2 		sub	fp, ip, #4
 2998              		.cfi_offset 14, -8
 2999              		.cfi_offset 13, -12
 3000              		.cfi_offset 11, -16
 3001              	.LCFI23:
 3002              		.cfi_def_cfa 11, 4
 643:../os_core/os_core.c **** }
 3003              		.loc 1 643 0
 3004 08d4 0CD04BE2 		sub	sp, fp, #12
 3005 08d8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3006 08dc 1EFF2FE1 		bx	lr
 3007              		.cfi_endproc
 3008              	.LFE11:
 3010              		.align	2
 3011              		.global	OS_EventTaskRdy
 3013              	OS_EventTaskRdy:
 3014              	.LFB12:
 644:../os_core/os_core.c **** #endif
 645:../os_core/os_core.c **** 
 646:../os_core/os_core.c **** /*$PAGE*/
 647:../os_core/os_core.c **** /*
 648:../os_core/os_core.c **** ***************************************************************************************************
 649:../os_core/os_core.c **** *                             MAKE TASK READY TO RUN BASED ON EVENT OCCURING
 650:../os_core/os_core.c **** *
 651:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services and is used to ready a task that 
 652:../os_core/os_core.c **** *              waiting for an event to occur.
 653:../os_core/os_core.c **** *
 654:../os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event control block corresponding to the event.
 655:../os_core/os_core.c **** *
 656:../os_core/os_core.c **** *              msg       is a pointer to a message.  This pointer is used by message oriented servi
 657:../os_core/os_core.c **** *                        such as MAILBOXEs and QUEUEs.  The pointer is not used when called by othe
 658:../os_core/os_core.c **** *                        service functions.
 659:../os_core/os_core.c **** *
 660:../os_core/os_core.c **** *              msk       is a mask that is used to clear the status byte of the TCB.  For example,
 661:../os_core/os_core.c **** *                        OSSemPost() will pass OS_STAT_SEM, OSMboxPost() will pass OS_STAT_MBOX etc
 662:../os_core/os_core.c **** *
 663:../os_core/os_core.c **** * Returns    : none
 664:../os_core/os_core.c **** *
 665:../os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 666:../os_core/os_core.c **** ***************************************************************************************************
 667:../os_core/os_core.c **** */
 668:../os_core/os_core.c **** #if OS_EVENT_EN
 669:../os_core/os_core.c **** INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
 670:../os_core/os_core.c **** {
 3015              		.loc 1 670 0
 3016              		.cfi_startproc
 3017              		@ Function supports interworking.
 3018              		@ args = 0, pretend = 0, frame = 32
 3019              		@ frame_needed = 1, uses_anonymous_args = 0
 3020 08e0 0DC0A0E1 		mov	ip, sp
 3021              	.LCFI24:
 3022              		.cfi_def_cfa_register 12
 3023 08e4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3024 08e8 04B04CE2 		sub	fp, ip, #4
 3025              		.cfi_offset 14, -8
 3026              		.cfi_offset 13, -12
 3027              		.cfi_offset 11, -16
 3028              	.LCFI25:
 3029              		.cfi_def_cfa 11, 4
 3030 08ec 20D04DE2 		sub	sp, sp, #32
 3031 08f0 20000BE5 		str	r0, [fp, #-32]
 3032 08f4 24100BE5 		str	r1, [fp, #-36]
 3033 08f8 0230A0E1 		mov	r3, r2
 3034 08fc 25304BE5 		strb	r3, [fp, #-37]
 671:../os_core/os_core.c ****     OS_TCB *ptcb;
 672:../os_core/os_core.c ****     INT8U   x;
 673:../os_core/os_core.c ****     INT8U   y;
 674:../os_core/os_core.c ****     INT8U   bitx;
 675:../os_core/os_core.c ****     INT8U   bity;
 676:../os_core/os_core.c ****     INT8U   prio;
 677:../os_core/os_core.c **** 
 678:../os_core/os_core.c **** 
 679:../os_core/os_core.c ****     y                      = OSUnMapTbl[pevent->OSEventGrp];   /* Find HPT waiting for message     
 3035              		.loc 1 679 0
 3036 0900 20301BE5 		ldr	r3, [fp, #-32]
 3037 0904 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3038 0908 C8219FE5 		ldr	r2, .L68
 3039 090c 0330D2E7 		ldrb	r3, [r2, r3]
 3040 0910 0D304BE5 		strb	r3, [fp, #-13]
 680:../os_core/os_core.c ****     bity                   = OSMapTbl[y];
 3041              		.loc 1 680 0
 3042 0914 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3043 0918 BC219FE5 		ldr	r2, .L68+4
 3044 091c 0330D2E7 		ldrb	r3, [r2, r3]
 3045 0920 0E304BE5 		strb	r3, [fp, #-14]
 681:../os_core/os_core.c ****     x                      = OSUnMapTbl[pevent->OSEventTbl[y]];
 3046              		.loc 1 681 0
 3047 0924 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3048 0928 20101BE5 		ldr	r1, [fp, #-32]
 3049 092c 0830A0E3 		mov	r3, #8
 3050 0930 022081E0 		add	r2, r1, r2
 3051 0934 033082E0 		add	r3, r2, r3
 3052 0938 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3053 093c 94219FE5 		ldr	r2, .L68
 3054 0940 0330D2E7 		ldrb	r3, [r2, r3]
 3055 0944 0F304BE5 		strb	r3, [fp, #-15]
 682:../os_core/os_core.c ****     bitx                   = OSMapTbl[x];
 3056              		.loc 1 682 0
 3057 0948 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 3058 094c 88219FE5 		ldr	r2, .L68+4
 3059 0950 0330D2E7 		ldrb	r3, [r2, r3]
 3060 0954 10304BE5 		strb	r3, [fp, #-16]
 683:../os_core/os_core.c ****     prio                   = (INT8U)((y << 3) + x);     /* Find priority of task getting the msg   
 3061              		.loc 1 683 0
 3062 0958 0D305BE5 		ldrb	r3, [fp, #-13]
 3063 095c 8331A0E1 		mov	r3, r3, asl #3
 3064 0960 FF2003E2 		and	r2, r3, #255
 3065 0964 0F305BE5 		ldrb	r3, [fp, #-15]
 3066 0968 033082E0 		add	r3, r2, r3
 3067 096c 11304BE5 		strb	r3, [fp, #-17]
 684:../os_core/os_core.c ****     pevent->OSEventTbl[y] &= ~bitx;                     /* Remove this task from the waiting list  
 3068              		.loc 1 684 0
 3069 0970 0D105BE5 		ldrb	r1, [fp, #-13]	@ zero_extendqisi2
 3070 0974 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3071 0978 20001BE5 		ldr	r0, [fp, #-32]
 3072 097c 0830A0E3 		mov	r3, #8
 3073 0980 022080E0 		add	r2, r0, r2
 3074 0984 033082E0 		add	r3, r2, r3
 3075 0988 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3076 098c FF2003E2 		and	r2, r3, #255
 3077 0990 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 3078 0994 0330E0E1 		mvn	r3, r3
 3079 0998 FF3003E2 		and	r3, r3, #255
 3080 099c 033002E0 		and	r3, r2, r3
 3081 09a0 FF3003E2 		and	r3, r3, #255
 3082 09a4 FF2003E2 		and	r2, r3, #255
 3083 09a8 20001BE5 		ldr	r0, [fp, #-32]
 3084 09ac 0830A0E3 		mov	r3, #8
 3085 09b0 011080E0 		add	r1, r0, r1
 3086 09b4 033081E0 		add	r3, r1, r3
 3087 09b8 0020C3E5 		strb	r2, [r3, #0]
 685:../os_core/os_core.c ****     if (pevent->OSEventTbl[y] == 0x00) {                
 3088              		.loc 1 685 0
 3089 09bc 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3090 09c0 20101BE5 		ldr	r1, [fp, #-32]
 3091 09c4 0830A0E3 		mov	r3, #8
 3092 09c8 022081E0 		add	r2, r1, r2
 3093 09cc 033082E0 		add	r3, r2, r3
 3094 09d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3095 09d4 000053E3 		cmp	r3, #0
 3096 09d8 0A00001A 		bne	.L66
 686:../os_core/os_core.c ****         pevent->OSEventGrp &= ~bity;                    /* Clr group bit if this was only task pend
 3097              		.loc 1 686 0
 3098 09dc 20301BE5 		ldr	r3, [fp, #-32]
 3099 09e0 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3100 09e4 FF2003E2 		and	r2, r3, #255
 3101 09e8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3102 09ec 0330E0E1 		mvn	r3, r3
 3103 09f0 FF3003E2 		and	r3, r3, #255
 3104 09f4 033002E0 		and	r3, r2, r3
 3105 09f8 FF3003E2 		and	r3, r3, #255
 3106 09fc FF2003E2 		and	r2, r3, #255
 3107 0a00 20301BE5 		ldr	r3, [fp, #-32]
 3108 0a04 0120C3E5 		strb	r2, [r3, #1]
 3109              	.L66:
 687:../os_core/os_core.c ****     }
 688:../os_core/os_core.c ****     ptcb                 =  OSTCBPrioTbl[prio];         /* Point to this task's OS_TCB             
 3110              		.loc 1 688 0
 3111 0a08 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 3112 0a0c CC309FE5 		ldr	r3, .L68+8
 3113 0a10 023193E7 		ldr	r3, [r3, r2, asl #2]
 3114 0a14 18300BE5 		str	r3, [fp, #-24]
 689:../os_core/os_core.c ****     ptcb->OSTCBDly       =  0;                          /* Prevent OSTimeTick() from readying task 
 3115              		.loc 1 689 0
 3116 0a18 18301BE5 		ldr	r3, [fp, #-24]
 3117 0a1c 0020A0E3 		mov	r2, #0
 3118 0a20 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
 690:../os_core/os_core.c ****     ptcb->OSTCBEventPtr  = (OS_EVENT *)0;               /* Unlink ECB from this task               
 3119              		.loc 1 690 0
 3120 0a24 18301BE5 		ldr	r3, [fp, #-24]
 3121 0a28 0020A0E3 		mov	r2, #0
 3122 0a2c 1C2083E5 		str	r2, [r3, #28]
 691:../os_core/os_core.c **** #if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
 692:../os_core/os_core.c ****     ptcb->OSTCBMsg       = msg;                         /* Send message directly to waiting task   
 3123              		.loc 1 692 0
 3124 0a30 18301BE5 		ldr	r3, [fp, #-24]
 3125 0a34 24201BE5 		ldr	r2, [fp, #-36]
 3126 0a38 202083E5 		str	r2, [r3, #32]
 693:../os_core/os_core.c **** #else
 694:../os_core/os_core.c ****     msg                  = msg;                         /* Prevent compiler warning if not used    
 695:../os_core/os_core.c **** #endif
 696:../os_core/os_core.c ****     ptcb->OSTCBPendTO    = FALSE;                       /* Cancel 'any' timeout because of post    
 3127              		.loc 1 696 0
 3128 0a3c 18301BE5 		ldr	r3, [fp, #-24]
 3129 0a40 0020A0E3 		mov	r2, #0
 3130 0a44 2D20C3E5 		strb	r2, [r3, #45]
 697:../os_core/os_core.c ****     ptcb->OSTCBStat     &= ~msk;                        /* Clear bit associated with event type    
 3131              		.loc 1 697 0
 3132 0a48 18301BE5 		ldr	r3, [fp, #-24]
 3133 0a4c 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3134 0a50 FF2003E2 		and	r2, r3, #255
 3135 0a54 25305BE5 		ldrb	r3, [fp, #-37]	@ zero_extendqisi2
 3136 0a58 0330E0E1 		mvn	r3, r3
 3137 0a5c FF3003E2 		and	r3, r3, #255
 3138 0a60 033002E0 		and	r3, r2, r3
 3139 0a64 FF3003E2 		and	r3, r3, #255
 3140 0a68 FF2003E2 		and	r2, r3, #255
 3141 0a6c 18301BE5 		ldr	r3, [fp, #-24]
 3142 0a70 2C20C3E5 		strb	r2, [r3, #44]
 698:../os_core/os_core.c ****     if (ptcb->OSTCBStat == OS_STAT_RDY) {               /* See if task is ready (could be susp'd)  
 3143              		.loc 1 698 0
 3144 0a74 18301BE5 		ldr	r3, [fp, #-24]
 3145 0a78 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3146 0a7c 000053E3 		cmp	r3, #0
 3147 0a80 0F00001A 		bne	.L67
 699:../os_core/os_core.c ****         OSRdyGrp        |=  bity;                       /* Put task in the ready to run list       
 3148              		.loc 1 699 0
 3149 0a84 58309FE5 		ldr	r3, .L68+12
 3150 0a88 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3151 0a8c 0E305BE5 		ldrb	r3, [fp, #-14]
 3152 0a90 033082E1 		orr	r3, r2, r3
 3153 0a94 FF2003E2 		and	r2, r3, #255
 3154 0a98 44309FE5 		ldr	r3, .L68+12
 3155 0a9c 0020C3E5 		strb	r2, [r3, #0]
 700:../os_core/os_core.c ****         OSRdyTbl[y]     |=  bitx;
 3156              		.loc 1 700 0
 3157 0aa0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3158 0aa4 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3159 0aa8 38109FE5 		ldr	r1, .L68+16
 3160 0aac 0210D1E7 		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 3161 0ab0 10205BE5 		ldrb	r2, [fp, #-16]
 3162 0ab4 022081E1 		orr	r2, r1, r2
 3163 0ab8 FF1002E2 		and	r1, r2, #255
 3164 0abc 24209FE5 		ldr	r2, .L68+16
 3165 0ac0 0310C2E7 		strb	r1, [r2, r3]
 3166              	.L67:
 701:../os_core/os_core.c ****     }
 702:../os_core/os_core.c ****     return (prio);
 3167              		.loc 1 702 0
 3168 0ac4 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 703:../os_core/os_core.c **** }
 3169              		.loc 1 703 0
 3170 0ac8 0300A0E1 		mov	r0, r3
 3171 0acc 0CD04BE2 		sub	sp, fp, #12
 3172 0ad0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3173 0ad4 1EFF2FE1 		bx	lr
 3174              	.L69:
 3175              		.align	2
 3176              	.L68:
 3177 0ad8 00000000 		.word	OSUnMapTbl
 3178 0adc 00000000 		.word	OSMapTbl
 3179 0ae0 00000000 		.word	OSTCBPrioTbl
 3180 0ae4 00000000 		.word	OSRdyGrp
 3181 0ae8 00000000 		.word	OSRdyTbl
 3182              		.cfi_endproc
 3183              	.LFE12:
 3185              		.align	2
 3186              		.global	OS_EventTaskWait
 3188              	OS_EventTaskWait:
 3189              	.LFB13:
 704:../os_core/os_core.c **** #endif
 705:../os_core/os_core.c **** /*$PAGE*/
 706:../os_core/os_core.c **** /*
 707:../os_core/os_core.c **** ***************************************************************************************************
 708:../os_core/os_core.c **** *                                   MAKE TASK WAIT FOR EVENT TO OCCUR
 709:../os_core/os_core.c **** *
 710:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to suspend a task because an even
 711:../os_core/os_core.c **** *              not occurred.
 712:../os_core/os_core.c **** *
 713:../os_core/os_core.c **** * Arguments  : pevent   is a pointer to the event control block for which the task will be waiting 
 714:../os_core/os_core.c **** *
 715:../os_core/os_core.c **** * Returns    : none
 716:../os_core/os_core.c **** *
 717:../os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 718:../os_core/os_core.c **** ***************************************************************************************************
 719:../os_core/os_core.c **** */
 720:../os_core/os_core.c **** #if OS_EVENT_EN
 721:../os_core/os_core.c **** void  OS_EventTaskWait (OS_EVENT *pevent)
 722:../os_core/os_core.c **** {
 3190              		.loc 1 722 0
 3191              		.cfi_startproc
 3192              		@ Function supports interworking.
 3193              		@ args = 0, pretend = 0, frame = 16
 3194              		@ frame_needed = 1, uses_anonymous_args = 0
 3195 0aec 0DC0A0E1 		mov	ip, sp
 3196              	.LCFI26:
 3197              		.cfi_def_cfa_register 12
 3198 0af0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3199 0af4 04B04CE2 		sub	fp, ip, #4
 3200              		.cfi_offset 14, -8
 3201              		.cfi_offset 13, -12
 3202              		.cfi_offset 11, -16
 3203              	.LCFI27:
 3204              		.cfi_def_cfa 11, 4
 3205 0af8 10D04DE2 		sub	sp, sp, #16
 3206 0afc 18000BE5 		str	r0, [fp, #-24]
 723:../os_core/os_core.c ****     INT8U  y;
 724:../os_core/os_core.c **** 
 725:../os_core/os_core.c **** 
 726:../os_core/os_core.c ****     OSTCBCur->OSTCBEventPtr = pevent;             /* Store pointer to event control block in TCB   
 3207              		.loc 1 726 0
 3208 0b00 30319FE5 		ldr	r3, .L72
 3209 0b04 003093E5 		ldr	r3, [r3, #0]
 3210 0b08 18201BE5 		ldr	r2, [fp, #-24]
 3211 0b0c 1C2083E5 		str	r2, [r3, #28]
 727:../os_core/os_core.c ****     y                       = OSTCBCur->OSTCBY;   /* Task no longer ready                          
 3212              		.loc 1 727 0
 3213 0b10 20319FE5 		ldr	r3, .L72
 3214 0b14 003093E5 		ldr	r3, [r3, #0]
 3215 0b18 3030D3E5 		ldrb	r3, [r3, #48]
 3216 0b1c 0D304BE5 		strb	r3, [fp, #-13]
 728:../os_core/os_core.c ****     OSRdyTbl[y]            &= ~OSTCBCur->OSTCBBitX;
 3217              		.loc 1 728 0
 3218 0b20 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3219 0b24 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3220 0b28 0C119FE5 		ldr	r1, .L72+4
 3221 0b2c 0220D1E7 		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 3222 0b30 FF1002E2 		and	r1, r2, #255
 3223 0b34 FC209FE5 		ldr	r2, .L72
 3224 0b38 002092E5 		ldr	r2, [r2, #0]
 3225 0b3c 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 3226 0b40 FF2002E2 		and	r2, r2, #255
 3227 0b44 0220E0E1 		mvn	r2, r2
 3228 0b48 FF2002E2 		and	r2, r2, #255
 3229 0b4c 022001E0 		and	r2, r1, r2
 3230 0b50 FF2002E2 		and	r2, r2, #255
 3231 0b54 FF1002E2 		and	r1, r2, #255
 3232 0b58 DC209FE5 		ldr	r2, .L72+4
 3233 0b5c 0310C2E7 		strb	r1, [r2, r3]
 729:../os_core/os_core.c ****     if (OSRdyTbl[y] == 0x00) {                   
 3234              		.loc 1 729 0
 3235 0b60 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3236 0b64 D0209FE5 		ldr	r2, .L72+4
 3237 0b68 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3238 0b6c 000053E3 		cmp	r3, #0
 3239 0b70 0D00001A 		bne	.L71
 730:../os_core/os_core.c ****         OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pend
 3240              		.loc 1 730 0
 3241 0b74 BC309FE5 		ldr	r3, .L72
 3242 0b78 003093E5 		ldr	r3, [r3, #0]
 3243 0b7c 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 3244 0b80 FF3003E2 		and	r3, r3, #255
 3245 0b84 0330E0E1 		mvn	r3, r3
 3246 0b88 FF2003E2 		and	r2, r3, #255
 3247 0b8c AC309FE5 		ldr	r3, .L72+8
 3248 0b90 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3249 0b94 FF3003E2 		and	r3, r3, #255
 3250 0b98 033002E0 		and	r3, r2, r3
 3251 0b9c FF3003E2 		and	r3, r3, #255
 3252 0ba0 FF2003E2 		and	r2, r3, #255
 3253 0ba4 94309FE5 		ldr	r3, .L72+8
 3254 0ba8 0020C3E5 		strb	r2, [r3, #0]
 3255              	.L71:
 731:../os_core/os_core.c ****     }
 732:../os_core/os_core.c ****     pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting li
 3256              		.loc 1 732 0
 3257 0bac 84309FE5 		ldr	r3, .L72
 3258 0bb0 003093E5 		ldr	r3, [r3, #0]
 3259 0bb4 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 3260 0bb8 0310A0E1 		mov	r1, r3
 3261 0bbc 74309FE5 		ldr	r3, .L72
 3262 0bc0 003093E5 		ldr	r3, [r3, #0]
 3263 0bc4 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 3264 0bc8 0320A0E1 		mov	r2, r3
 3265 0bcc 18001BE5 		ldr	r0, [fp, #-24]
 3266 0bd0 0830A0E3 		mov	r3, #8
 3267 0bd4 022080E0 		add	r2, r0, r2
 3268 0bd8 033082E0 		add	r3, r2, r3
 3269 0bdc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3270 0be0 50309FE5 		ldr	r3, .L72
 3271 0be4 003093E5 		ldr	r3, [r3, #0]
 3272 0be8 3130D3E5 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 3273 0bec 033082E1 		orr	r3, r2, r3
 3274 0bf0 FF2003E2 		and	r2, r3, #255
 3275 0bf4 18001BE5 		ldr	r0, [fp, #-24]
 3276 0bf8 0830A0E3 		mov	r3, #8
 3277 0bfc 011080E0 		add	r1, r0, r1
 3278 0c00 033081E0 		add	r3, r1, r3
 3279 0c04 0020C3E5 		strb	r2, [r3, #0]
 733:../os_core/os_core.c ****     pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 3280              		.loc 1 733 0
 3281 0c08 18301BE5 		ldr	r3, [fp, #-24]
 3282 0c0c 0120D3E5 		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 3283 0c10 20309FE5 		ldr	r3, .L72
 3284 0c14 003093E5 		ldr	r3, [r3, #0]
 3285 0c18 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 3286 0c1c 033082E1 		orr	r3, r2, r3
 3287 0c20 FF2003E2 		and	r2, r3, #255
 3288 0c24 18301BE5 		ldr	r3, [fp, #-24]
 3289 0c28 0120C3E5 		strb	r2, [r3, #1]
 734:../os_core/os_core.c **** }
 3290              		.loc 1 734 0
 3291 0c2c 0CD04BE2 		sub	sp, fp, #12
 3292 0c30 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3293 0c34 1EFF2FE1 		bx	lr
 3294              	.L73:
 3295              		.align	2
 3296              	.L72:
 3297 0c38 00000000 		.word	OSTCBCur
 3298 0c3c 00000000 		.word	OSRdyTbl
 3299 0c40 00000000 		.word	OSRdyGrp
 3300              		.cfi_endproc
 3301              	.LFE13:
 3303              		.align	2
 3304              		.global	OS_EventTO
 3306              	OS_EventTO:
 3307              	.LFB14:
 735:../os_core/os_core.c **** #endif
 736:../os_core/os_core.c **** /*$PAGE*/
 737:../os_core/os_core.c **** /*
 738:../os_core/os_core.c **** ***************************************************************************************************
 739:../os_core/os_core.c **** *                              MAKE TASK READY TO RUN BASED ON EVENT TIMEOUT
 740:../os_core/os_core.c **** *
 741:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to make a task ready to run becau
 742:../os_core/os_core.c **** *              timeout occurred.
 743:../os_core/os_core.c **** *
 744:../os_core/os_core.c **** * Arguments  : pevent   is a pointer to the event control block which is readying a task.
 745:../os_core/os_core.c **** *
 746:../os_core/os_core.c **** * Returns    : none
 747:../os_core/os_core.c **** *
 748:../os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 749:../os_core/os_core.c **** ***************************************************************************************************
 750:../os_core/os_core.c **** */
 751:../os_core/os_core.c **** #if OS_EVENT_EN
 752:../os_core/os_core.c **** void  OS_EventTO (OS_EVENT *pevent)
 753:../os_core/os_core.c **** {
 3308              		.loc 1 753 0
 3309              		.cfi_startproc
 3310              		@ Function supports interworking.
 3311              		@ args = 0, pretend = 0, frame = 16
 3312              		@ frame_needed = 1, uses_anonymous_args = 0
 3313 0c44 0DC0A0E1 		mov	ip, sp
 3314              	.LCFI28:
 3315              		.cfi_def_cfa_register 12
 3316 0c48 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3317 0c4c 04B04CE2 		sub	fp, ip, #4
 3318              		.cfi_offset 14, -8
 3319              		.cfi_offset 13, -12
 3320              		.cfi_offset 11, -16
 3321              	.LCFI29:
 3322              		.cfi_def_cfa 11, 4
 3323 0c50 10D04DE2 		sub	sp, sp, #16
 3324 0c54 18000BE5 		str	r0, [fp, #-24]
 754:../os_core/os_core.c ****     INT8U  y;
 755:../os_core/os_core.c **** 
 756:../os_core/os_core.c **** 
 757:../os_core/os_core.c ****     y                      = OSTCBCur->OSTCBY;
 3325              		.loc 1 757 0
 3326 0c58 F4309FE5 		ldr	r3, .L76
 3327 0c5c 003093E5 		ldr	r3, [r3, #0]
 3328 0c60 3030D3E5 		ldrb	r3, [r3, #48]
 3329 0c64 0D304BE5 		strb	r3, [fp, #-13]
 758:../os_core/os_core.c ****     pevent->OSEventTbl[y] &= ~OSTCBCur->OSTCBBitX;     /* Remove task from wait list               
 3330              		.loc 1 758 0
 3331 0c68 0D105BE5 		ldrb	r1, [fp, #-13]	@ zero_extendqisi2
 3332 0c6c 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3333 0c70 18001BE5 		ldr	r0, [fp, #-24]
 3334 0c74 0830A0E3 		mov	r3, #8
 3335 0c78 022080E0 		add	r2, r0, r2
 3336 0c7c 033082E0 		add	r3, r2, r3
 3337 0c80 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3338 0c84 FF2003E2 		and	r2, r3, #255
 3339 0c88 C4309FE5 		ldr	r3, .L76
 3340 0c8c 003093E5 		ldr	r3, [r3, #0]
 3341 0c90 3130D3E5 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 3342 0c94 FF3003E2 		and	r3, r3, #255
 3343 0c98 0330E0E1 		mvn	r3, r3
 3344 0c9c FF3003E2 		and	r3, r3, #255
 3345 0ca0 033002E0 		and	r3, r2, r3
 3346 0ca4 FF3003E2 		and	r3, r3, #255
 3347 0ca8 FF2003E2 		and	r2, r3, #255
 3348 0cac 18001BE5 		ldr	r0, [fp, #-24]
 3349 0cb0 0830A0E3 		mov	r3, #8
 3350 0cb4 011080E0 		add	r1, r0, r1
 3351 0cb8 033081E0 		add	r3, r1, r3
 3352 0cbc 0020C3E5 		strb	r2, [r3, #0]
 759:../os_core/os_core.c ****     if (pevent->OSEventTbl[y] == 0x00) {
 3353              		.loc 1 759 0
 3354 0cc0 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3355 0cc4 18101BE5 		ldr	r1, [fp, #-24]
 3356 0cc8 0830A0E3 		mov	r3, #8
 3357 0ccc 022081E0 		add	r2, r1, r2
 3358 0cd0 033082E0 		add	r3, r2, r3
 3359 0cd4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3360 0cd8 000053E3 		cmp	r3, #0
 3361 0cdc 0D00001A 		bne	.L75
 760:../os_core/os_core.c ****         pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
 3362              		.loc 1 760 0
 3363 0ce0 18301BE5 		ldr	r3, [fp, #-24]
 3364 0ce4 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3365 0ce8 FF2003E2 		and	r2, r3, #255
 3366 0cec 60309FE5 		ldr	r3, .L76
 3367 0cf0 003093E5 		ldr	r3, [r3, #0]
 3368 0cf4 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 3369 0cf8 FF3003E2 		and	r3, r3, #255
 3370 0cfc 0330E0E1 		mvn	r3, r3
 3371 0d00 FF3003E2 		and	r3, r3, #255
 3372 0d04 033002E0 		and	r3, r2, r3
 3373 0d08 FF3003E2 		and	r3, r3, #255
 3374 0d0c FF2003E2 		and	r2, r3, #255
 3375 0d10 18301BE5 		ldr	r3, [fp, #-24]
 3376 0d14 0120C3E5 		strb	r2, [r3, #1]
 3377              	.L75:
 761:../os_core/os_core.c ****     }
 762:../os_core/os_core.c ****     OSTCBCur->OSTCBPendTO   = FALSE;                   /* Clear the Pend Timeout flag              
 3378              		.loc 1 762 0
 3379 0d18 34309FE5 		ldr	r3, .L76
 3380 0d1c 003093E5 		ldr	r3, [r3, #0]
 3381 0d20 0020A0E3 		mov	r2, #0
 3382 0d24 2D20C3E5 		strb	r2, [r3, #45]
 763:../os_core/os_core.c ****     OSTCBCur->OSTCBStat     = OS_STAT_RDY;             /* Set status to ready                      
 3383              		.loc 1 763 0
 3384 0d28 24309FE5 		ldr	r3, .L76
 3385 0d2c 003093E5 		ldr	r3, [r3, #0]
 3386 0d30 0020A0E3 		mov	r2, #0
 3387 0d34 2C20C3E5 		strb	r2, [r3, #44]
 764:../os_core/os_core.c ****     OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;           /* No longer waiting for event              
 3388              		.loc 1 764 0
 3389 0d38 14309FE5 		ldr	r3, .L76
 3390 0d3c 003093E5 		ldr	r3, [r3, #0]
 3391 0d40 0020A0E3 		mov	r2, #0
 3392 0d44 1C2083E5 		str	r2, [r3, #28]
 765:../os_core/os_core.c **** }
 3393              		.loc 1 765 0
 3394 0d48 0CD04BE2 		sub	sp, fp, #12
 3395 0d4c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3396 0d50 1EFF2FE1 		bx	lr
 3397              	.L77:
 3398              		.align	2
 3399              	.L76:
 3400 0d54 00000000 		.word	OSTCBCur
 3401              		.cfi_endproc
 3402              	.LFE14:
 3404              		.align	2
 3405              		.global	OS_EventWaitListInit
 3407              	OS_EventWaitListInit:
 3408              	.LFB15:
 766:../os_core/os_core.c **** #endif
 767:../os_core/os_core.c **** /*$PAGE*/
 768:../os_core/os_core.c **** /*
 769:../os_core/os_core.c **** ***************************************************************************************************
 770:../os_core/os_core.c **** *                                 INITIALIZE EVENT CONTROL BLOCK'S WAIT LIST
 771:../os_core/os_core.c **** *
 772:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to initialize the event wait list
 773:../os_core/os_core.c **** *
 774:../os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event control block allocated to the event.
 775:../os_core/os_core.c **** *
 776:../os_core/os_core.c **** * Returns    : none
 777:../os_core/os_core.c **** *
 778:../os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 779:../os_core/os_core.c **** ***************************************************************************************************
 780:../os_core/os_core.c **** */
 781:../os_core/os_core.c **** #if OS_EVENT_EN
 782:../os_core/os_core.c **** void  OS_EventWaitListInit (OS_EVENT *pevent)
 783:../os_core/os_core.c **** {
 3409              		.loc 1 783 0
 3410              		.cfi_startproc
 3411              		@ Function supports interworking.
 3412              		@ args = 0, pretend = 0, frame = 16
 3413              		@ frame_needed = 1, uses_anonymous_args = 0
 3414 0d58 0DC0A0E1 		mov	ip, sp
 3415              	.LCFI30:
 3416              		.cfi_def_cfa_register 12
 3417 0d5c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3418 0d60 04B04CE2 		sub	fp, ip, #4
 3419              		.cfi_offset 14, -8
 3420              		.cfi_offset 13, -12
 3421              		.cfi_offset 11, -16
 3422              	.LCFI31:
 3423              		.cfi_def_cfa 11, 4
 3424 0d64 10D04DE2 		sub	sp, sp, #16
 3425 0d68 18000BE5 		str	r0, [fp, #-24]
 784:../os_core/os_core.c ****     INT8U  *ptbl;
 785:../os_core/os_core.c **** 
 786:../os_core/os_core.c **** 
 787:../os_core/os_core.c ****     pevent->OSEventGrp = 0x00;                   /* No task waiting on event                       
 3426              		.loc 1 787 0
 3427 0d6c 18301BE5 		ldr	r3, [fp, #-24]
 3428 0d70 0020A0E3 		mov	r2, #0
 3429 0d74 0120C3E5 		strb	r2, [r3, #1]
 788:../os_core/os_core.c ****     ptbl               = &pevent->OSEventTbl[0];
 3430              		.loc 1 788 0
 3431 0d78 18301BE5 		ldr	r3, [fp, #-24]
 3432 0d7c 083083E2 		add	r3, r3, #8
 3433 0d80 10300BE5 		str	r3, [fp, #-16]
 789:../os_core/os_core.c **** 
 790:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 0
 791:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3434              		.loc 1 791 0
 3435 0d84 10301BE5 		ldr	r3, [fp, #-16]
 3436 0d88 0020A0E3 		mov	r2, #0
 3437 0d8c 0020C3E5 		strb	r2, [r3, #0]
 3438 0d90 10301BE5 		ldr	r3, [fp, #-16]
 3439 0d94 013083E2 		add	r3, r3, #1
 3440 0d98 10300BE5 		str	r3, [fp, #-16]
 792:../os_core/os_core.c **** #endif
 793:../os_core/os_core.c **** 
 794:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 1
 795:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3441              		.loc 1 795 0
 3442 0d9c 10301BE5 		ldr	r3, [fp, #-16]
 3443 0da0 0020A0E3 		mov	r2, #0
 3444 0da4 0020C3E5 		strb	r2, [r3, #0]
 3445 0da8 10301BE5 		ldr	r3, [fp, #-16]
 3446 0dac 013083E2 		add	r3, r3, #1
 3447 0db0 10300BE5 		str	r3, [fp, #-16]
 796:../os_core/os_core.c **** #endif
 797:../os_core/os_core.c **** 
 798:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 2
 799:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3448              		.loc 1 799 0
 3449 0db4 10301BE5 		ldr	r3, [fp, #-16]
 3450 0db8 0020A0E3 		mov	r2, #0
 3451 0dbc 0020C3E5 		strb	r2, [r3, #0]
 3452 0dc0 10301BE5 		ldr	r3, [fp, #-16]
 3453 0dc4 013083E2 		add	r3, r3, #1
 3454 0dc8 10300BE5 		str	r3, [fp, #-16]
 800:../os_core/os_core.c **** #endif
 801:../os_core/os_core.c **** 
 802:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 3
 803:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3455              		.loc 1 803 0
 3456 0dcc 10301BE5 		ldr	r3, [fp, #-16]
 3457 0dd0 0020A0E3 		mov	r2, #0
 3458 0dd4 0020C3E5 		strb	r2, [r3, #0]
 3459 0dd8 10301BE5 		ldr	r3, [fp, #-16]
 3460 0ddc 013083E2 		add	r3, r3, #1
 3461 0de0 10300BE5 		str	r3, [fp, #-16]
 804:../os_core/os_core.c **** #endif
 805:../os_core/os_core.c **** 
 806:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 4
 807:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3462              		.loc 1 807 0
 3463 0de4 10301BE5 		ldr	r3, [fp, #-16]
 3464 0de8 0020A0E3 		mov	r2, #0
 3465 0dec 0020C3E5 		strb	r2, [r3, #0]
 3466 0df0 10301BE5 		ldr	r3, [fp, #-16]
 3467 0df4 013083E2 		add	r3, r3, #1
 3468 0df8 10300BE5 		str	r3, [fp, #-16]
 808:../os_core/os_core.c **** #endif
 809:../os_core/os_core.c **** 
 810:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 5
 811:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3469              		.loc 1 811 0
 3470 0dfc 10301BE5 		ldr	r3, [fp, #-16]
 3471 0e00 0020A0E3 		mov	r2, #0
 3472 0e04 0020C3E5 		strb	r2, [r3, #0]
 3473 0e08 10301BE5 		ldr	r3, [fp, #-16]
 3474 0e0c 013083E2 		add	r3, r3, #1
 3475 0e10 10300BE5 		str	r3, [fp, #-16]
 812:../os_core/os_core.c **** #endif
 813:../os_core/os_core.c **** 
 814:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 6
 815:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3476              		.loc 1 815 0
 3477 0e14 10301BE5 		ldr	r3, [fp, #-16]
 3478 0e18 0020A0E3 		mov	r2, #0
 3479 0e1c 0020C3E5 		strb	r2, [r3, #0]
 3480 0e20 10301BE5 		ldr	r3, [fp, #-16]
 3481 0e24 013083E2 		add	r3, r3, #1
 3482 0e28 10300BE5 		str	r3, [fp, #-16]
 816:../os_core/os_core.c **** #endif
 817:../os_core/os_core.c **** 
 818:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 7
 819:../os_core/os_core.c ****     *ptbl              = 0x00;
 3483              		.loc 1 819 0
 3484 0e2c 10301BE5 		ldr	r3, [fp, #-16]
 3485 0e30 0020A0E3 		mov	r2, #0
 3486 0e34 0020C3E5 		strb	r2, [r3, #0]
 820:../os_core/os_core.c **** #endif
 821:../os_core/os_core.c **** }
 3487              		.loc 1 821 0
 3488 0e38 0CD04BE2 		sub	sp, fp, #12
 3489 0e3c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3490 0e40 1EFF2FE1 		bx	lr
 3491              		.cfi_endproc
 3492              	.LFE15:
 3494              		.align	2
 3496              	OS_InitEventList:
 3497              	.LFB16:
 822:../os_core/os_core.c **** #endif
 823:../os_core/os_core.c **** /*$PAGE*/
 824:../os_core/os_core.c **** /*
 825:../os_core/os_core.c **** ***************************************************************************************************
 826:../os_core/os_core.c **** *                                             INITIALIZATION
 827:../os_core/os_core.c **** *                           INITIALIZE THE FREE LIST OF EVENT CONTROL BLOCKS
 828:../os_core/os_core.c **** *
 829:../os_core/os_core.c **** * Description: This function is called by OSInit() to initialize the free list of event control blo
 830:../os_core/os_core.c **** *
 831:../os_core/os_core.c **** * Arguments  : none
 832:../os_core/os_core.c **** *
 833:../os_core/os_core.c **** * Returns    : none
 834:../os_core/os_core.c **** ***************************************************************************************************
 835:../os_core/os_core.c **** */
 836:../os_core/os_core.c **** 
 837:../os_core/os_core.c **** static  void  OS_InitEventList (void)
 838:../os_core/os_core.c **** {
 3498              		.loc 1 838 0
 3499              		.cfi_startproc
 3500              		@ Function supports interworking.
 3501              		@ args = 0, pretend = 0, frame = 16
 3502              		@ frame_needed = 1, uses_anonymous_args = 0
 3503 0e44 0DC0A0E1 		mov	ip, sp
 3504              	.LCFI32:
 3505              		.cfi_def_cfa_register 12
 3506 0e48 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3507 0e4c 04B04CE2 		sub	fp, ip, #4
 3508              		.cfi_offset 14, -8
 3509              		.cfi_offset 13, -12
 3510              		.cfi_offset 11, -16
 3511              	.LCFI33:
 3512              		.cfi_def_cfa 11, 4
 3513 0e50 10D04DE2 		sub	sp, sp, #16
 839:../os_core/os_core.c **** #if OS_EVENT_EN && (OS_MAX_EVENTS > 0)
 840:../os_core/os_core.c **** #if (OS_MAX_EVENTS > 1)
 841:../os_core/os_core.c ****     INT16U     i;
 842:../os_core/os_core.c ****     OS_EVENT  *pevent1;
 843:../os_core/os_core.c ****     OS_EVENT  *pevent2;
 844:../os_core/os_core.c **** 
 845:../os_core/os_core.c **** 
 846:../os_core/os_core.c ****     OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table               
 3514              		.loc 1 846 0
 3515 0e54 CC309FE5 		ldr	r3, .L82
 3516 0e58 0300A0E1 		mov	r0, r3
 3517 0e5c 1E1EA0E3 		mov	r1, #480
 3518 0e60 FEFFFFEB 		bl	OS_MemClr
 847:../os_core/os_core.c ****     pevent1 = &OSEventTbl[0];
 3519              		.loc 1 847 0
 3520 0e64 BC309FE5 		ldr	r3, .L82
 3521 0e68 14300BE5 		str	r3, [fp, #-20]
 848:../os_core/os_core.c ****     pevent2 = &OSEventTbl[1];
 3522              		.loc 1 848 0
 3523 0e6c B8309FE5 		ldr	r3, .L82+4
 3524 0e70 18300BE5 		str	r3, [fp, #-24]
 849:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blo
 3525              		.loc 1 849 0
 3526 0e74 0030A0E3 		mov	r3, #0
 3527 0e78 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3528 0e7c 140000EA 		b	.L80
 3529              	.L81:
 850:../os_core/os_core.c ****         pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 3530              		.loc 1 850 0 discriminator 2
 3531 0e80 14301BE5 		ldr	r3, [fp, #-20]
 3532 0e84 0020A0E3 		mov	r2, #0
 3533 0e88 0020C3E5 		strb	r2, [r3, #0]
 851:../os_core/os_core.c ****         pevent1->OSEventPtr     = pevent2;
 3534              		.loc 1 851 0 discriminator 2
 3535 0e8c 14301BE5 		ldr	r3, [fp, #-20]
 3536 0e90 18201BE5 		ldr	r2, [fp, #-24]
 3537 0e94 042083E5 		str	r2, [r3, #4]
 852:../os_core/os_core.c **** #if OS_EVENT_NAME_SIZE > 1
 853:../os_core/os_core.c ****         pevent1->OSEventName[0] = '?';                      /* Unknown name                        
 3538              		.loc 1 853 0 discriminator 2
 3539 0e98 14301BE5 		ldr	r3, [fp, #-20]
 3540 0e9c 3F20A0E3 		mov	r2, #63
 3541 0ea0 1020C3E5 		strb	r2, [r3, #16]
 854:../os_core/os_core.c ****         pevent1->OSEventName[1] = OS_ASCII_NUL;
 3542              		.loc 1 854 0 discriminator 2
 3543 0ea4 14301BE5 		ldr	r3, [fp, #-20]
 3544 0ea8 0020A0E3 		mov	r2, #0
 3545 0eac 1120C3E5 		strb	r2, [r3, #17]
 855:../os_core/os_core.c **** #endif
 856:../os_core/os_core.c ****         pevent1++;
 3546              		.loc 1 856 0 discriminator 2
 3547 0eb0 14301BE5 		ldr	r3, [fp, #-20]
 3548 0eb4 303083E2 		add	r3, r3, #48
 3549 0eb8 14300BE5 		str	r3, [fp, #-20]
 857:../os_core/os_core.c ****         pevent2++;
 3550              		.loc 1 857 0 discriminator 2
 3551 0ebc 18301BE5 		ldr	r3, [fp, #-24]
 3552 0ec0 303083E2 		add	r3, r3, #48
 3553 0ec4 18300BE5 		str	r3, [fp, #-24]
 849:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blo
 3554              		.loc 1 849 0 discriminator 2
 3555 0ec8 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3556 0ecc 013083E2 		add	r3, r3, #1
 3557 0ed0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3558              	.L80:
 849:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blo
 3559              		.loc 1 849 0 is_stmt 0 discriminator 1
 3560 0ed4 BE305BE1 		ldrh	r3, [fp, #-14]
 3561 0ed8 080053E3 		cmp	r3, #8
 3562 0edc E7FFFF9A 		bls	.L81
 858:../os_core/os_core.c ****     }
 859:../os_core/os_core.c ****     pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 3563              		.loc 1 859 0 is_stmt 1
 3564 0ee0 14301BE5 		ldr	r3, [fp, #-20]
 3565 0ee4 0020A0E3 		mov	r2, #0
 3566 0ee8 0020C3E5 		strb	r2, [r3, #0]
 860:../os_core/os_core.c ****     pevent1->OSEventPtr             = (OS_EVENT *)0;
 3567              		.loc 1 860 0
 3568 0eec 14301BE5 		ldr	r3, [fp, #-20]
 3569 0ef0 0020A0E3 		mov	r2, #0
 3570 0ef4 042083E5 		str	r2, [r3, #4]
 861:../os_core/os_core.c **** #if OS_EVENT_NAME_SIZE > 1
 862:../os_core/os_core.c ****     pevent1->OSEventName[0]         = '?';                  
 3571              		.loc 1 862 0
 3572 0ef8 14301BE5 		ldr	r3, [fp, #-20]
 3573 0efc 3F20A0E3 		mov	r2, #63
 3574 0f00 1020C3E5 		strb	r2, [r3, #16]
 863:../os_core/os_core.c ****     pevent1->OSEventName[1]         = OS_ASCII_NUL;
 3575              		.loc 1 863 0
 3576 0f04 14301BE5 		ldr	r3, [fp, #-20]
 3577 0f08 0020A0E3 		mov	r2, #0
 3578 0f0c 1120C3E5 		strb	r2, [r3, #17]
 864:../os_core/os_core.c **** #endif
 865:../os_core/os_core.c ****     OSEventFreeList                 = &OSEventTbl[0];
 3579              		.loc 1 865 0
 3580 0f10 18309FE5 		ldr	r3, .L82+8
 3581 0f14 0C209FE5 		ldr	r2, .L82
 3582 0f18 002083E5 		str	r2, [r3, #0]
 866:../os_core/os_core.c **** #else
 867:../os_core/os_core.c ****     OSEventFreeList                 = &OSEventTbl[0];       /* Only have ONE event control block   
 868:../os_core/os_core.c ****     OSEventFreeList->OSEventType    = OS_EVENT_TYPE_UNUSED;
 869:../os_core/os_core.c ****     OSEventFreeList->OSEventPtr     = (OS_EVENT *)0;
 870:../os_core/os_core.c **** #if OS_EVENT_NAME_SIZE > 1
 871:../os_core/os_core.c ****     OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                        
 872:../os_core/os_core.c ****     OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
 873:../os_core/os_core.c **** #endif
 874:../os_core/os_core.c **** #endif
 875:../os_core/os_core.c **** #endif
 876:../os_core/os_core.c **** }
 3583              		.loc 1 876 0
 3584 0f1c 0CD04BE2 		sub	sp, fp, #12
 3585 0f20 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3586 0f24 1EFF2FE1 		bx	lr
 3587              	.L83:
 3588              		.align	2
 3589              	.L82:
 3590 0f28 00000000 		.word	OSEventTbl
 3591 0f2c 30000000 		.word	OSEventTbl+48
 3592 0f30 00000000 		.word	OSEventFreeList
 3593              		.cfi_endproc
 3594              	.LFE16:
 3596              		.align	2
 3598              	OS_InitMisc:
 3599              	.LFB17:
 877:../os_core/os_core.c **** /*$PAGE*/
 878:../os_core/os_core.c **** /*
 879:../os_core/os_core.c **** ***************************************************************************************************
 880:../os_core/os_core.c **** *                                             INITIALIZATION
 881:../os_core/os_core.c **** *                                    INITIALIZE MISCELLANEOUS VARIABLES
 882:../os_core/os_core.c **** *
 883:../os_core/os_core.c **** * Description: This function is called by OSInit() to initialize miscellaneous variables.
 884:../os_core/os_core.c **** *
 885:../os_core/os_core.c **** * Arguments  : none
 886:../os_core/os_core.c **** *
 887:../os_core/os_core.c **** * Returns    : none
 888:../os_core/os_core.c **** ***************************************************************************************************
 889:../os_core/os_core.c **** */
 890:../os_core/os_core.c **** 
 891:../os_core/os_core.c **** static  void  OS_InitMisc (void)
 892:../os_core/os_core.c **** {
 3600              		.loc 1 892 0
 3601              		.cfi_startproc
 3602              		@ Function supports interworking.
 3603              		@ args = 0, pretend = 0, frame = 0
 3604              		@ frame_needed = 1, uses_anonymous_args = 0
 3605 0f34 0DC0A0E1 		mov	ip, sp
 3606              	.LCFI34:
 3607              		.cfi_def_cfa_register 12
 3608 0f38 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3609 0f3c 04B04CE2 		sub	fp, ip, #4
 3610              		.cfi_offset 14, -8
 3611              		.cfi_offset 13, -12
 3612              		.cfi_offset 11, -16
 3613              	.LCFI35:
 3614              		.cfi_def_cfa 11, 4
 893:../os_core/os_core.c **** #if OS_TIME_GET_SET_EN > 0   
 894:../os_core/os_core.c ****     OSTime        = 0L;                                    /* Clear the 32-bit system clock        
 3615              		.loc 1 894 0
 3616 0f40 7C309FE5 		ldr	r3, .L85
 3617 0f44 0020A0E3 		mov	r2, #0
 3618 0f48 002083E5 		str	r2, [r3, #0]
 895:../os_core/os_core.c **** #endif
 896:../os_core/os_core.c **** 
 897:../os_core/os_core.c ****     OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter  
 3619              		.loc 1 897 0
 3620 0f4c 74309FE5 		ldr	r3, .L85+4
 3621 0f50 0020A0E3 		mov	r2, #0
 3622 0f54 0020C3E5 		strb	r2, [r3, #0]
 898:../os_core/os_core.c ****     OSLockNesting = 0;                                     /* Clear the scheduling lock counter    
 3623              		.loc 1 898 0
 3624 0f58 6C309FE5 		ldr	r3, .L85+8
 3625 0f5c 0020A0E3 		mov	r2, #0
 3626 0f60 0020C3E5 		strb	r2, [r3, #0]
 899:../os_core/os_core.c **** 
 900:../os_core/os_core.c ****     OSTaskCtr     = 0;                                     /* Clear the number of tasks            
 3627              		.loc 1 900 0
 3628 0f64 64309FE5 		ldr	r3, .L85+12
 3629 0f68 0020A0E3 		mov	r2, #0
 3630 0f6c 0020C3E5 		strb	r2, [r3, #0]
 901:../os_core/os_core.c **** 
 902:../os_core/os_core.c ****     OSRunning     = FALSE;                                 /* Indicate that multitasking not starte
 3631              		.loc 1 902 0
 3632 0f70 5C309FE5 		ldr	r3, .L85+16
 3633 0f74 0020A0E3 		mov	r2, #0
 3634 0f78 0020C3E5 		strb	r2, [r3, #0]
 903:../os_core/os_core.c ****     
 904:../os_core/os_core.c ****     OSCtxSwCtr    = 0;                                     /* Clear the context switch counter     
 3635              		.loc 1 904 0
 3636 0f7c 54309FE5 		ldr	r3, .L85+20
 3637 0f80 0020A0E3 		mov	r2, #0
 3638 0f84 002083E5 		str	r2, [r3, #0]
 905:../os_core/os_core.c ****     OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter        
 3639              		.loc 1 905 0
 3640 0f88 4C309FE5 		ldr	r3, .L85+24
 3641 0f8c 0020A0E3 		mov	r2, #0
 3642 0f90 002083E5 		str	r2, [r3, #0]
 906:../os_core/os_core.c **** 
 907:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
 908:../os_core/os_core.c ****     OSIdleCtrRun  = 0L;
 3643              		.loc 1 908 0
 3644 0f94 44309FE5 		ldr	r3, .L85+28
 3645 0f98 0020A0E3 		mov	r2, #0
 3646 0f9c 002083E5 		str	r2, [r3, #0]
 909:../os_core/os_core.c ****     OSIdleCtrMax  = 0L;
 3647              		.loc 1 909 0
 3648 0fa0 3C309FE5 		ldr	r3, .L85+32
 3649 0fa4 0020A0E3 		mov	r2, #0
 3650 0fa8 002083E5 		str	r2, [r3, #0]
 910:../os_core/os_core.c ****     OSStatRdy     = FALSE;                                 /* Statistic task is not ready          
 3651              		.loc 1 910 0
 3652 0fac 34309FE5 		ldr	r3, .L85+36
 3653 0fb0 0020A0E3 		mov	r2, #0
 3654 0fb4 0020C3E5 		strb	r2, [r3, #0]
 911:../os_core/os_core.c **** #endif
 912:../os_core/os_core.c **** }
 3655              		.loc 1 912 0
 3656 0fb8 0CD04BE2 		sub	sp, fp, #12
 3657 0fbc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3658 0fc0 1EFF2FE1 		bx	lr
 3659              	.L86:
 3660              		.align	2
 3661              	.L85:
 3662 0fc4 00000000 		.word	OSTime
 3663 0fc8 00000000 		.word	OSIntNesting
 3664 0fcc 00000000 		.word	OSLockNesting
 3665 0fd0 00000000 		.word	OSTaskCtr
 3666 0fd4 00000000 		.word	OSRunning
 3667 0fd8 00000000 		.word	OSCtxSwCtr
 3668 0fdc 00000000 		.word	OSIdleCtr
 3669 0fe0 00000000 		.word	OSIdleCtrRun
 3670 0fe4 00000000 		.word	OSIdleCtrMax
 3671 0fe8 00000000 		.word	OSStatRdy
 3672              		.cfi_endproc
 3673              	.LFE17:
 3675              		.align	2
 3677              	OS_InitRdyList:
 3678              	.LFB18:
 913:../os_core/os_core.c **** /*$PAGE*/
 914:../os_core/os_core.c **** /*
 915:../os_core/os_core.c **** ***************************************************************************************************
 916:../os_core/os_core.c **** *                                             INITIALIZATION
 917:../os_core/os_core.c **** *                                       INITIALIZE THE READY LIST
 918:../os_core/os_core.c **** *
 919:../os_core/os_core.c **** * Description: This function is called by OSInit() to initialize the Ready List.
 920:../os_core/os_core.c **** *
 921:../os_core/os_core.c **** * Arguments  : none
 922:../os_core/os_core.c **** *
 923:../os_core/os_core.c **** * Returns    : none
 924:../os_core/os_core.c **** ***************************************************************************************************
 925:../os_core/os_core.c **** */
 926:../os_core/os_core.c **** 
 927:../os_core/os_core.c **** static  void  OS_InitRdyList (void)
 928:../os_core/os_core.c **** {
 3679              		.loc 1 928 0
 3680              		.cfi_startproc
 3681              		@ Function supports interworking.
 3682              		@ args = 0, pretend = 0, frame = 8
 3683              		@ frame_needed = 1, uses_anonymous_args = 0
 3684 0fec 0DC0A0E1 		mov	ip, sp
 3685              	.LCFI36:
 3686              		.cfi_def_cfa_register 12
 3687 0ff0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3688 0ff4 04B04CE2 		sub	fp, ip, #4
 3689              		.cfi_offset 14, -8
 3690              		.cfi_offset 13, -12
 3691              		.cfi_offset 11, -16
 3692              	.LCFI37:
 3693              		.cfi_def_cfa 11, 4
 3694 0ff8 08D04DE2 		sub	sp, sp, #8
 929:../os_core/os_core.c ****     INT8U    i;
 930:../os_core/os_core.c ****     INT8U   *prdytbl;
 931:../os_core/os_core.c **** 
 932:../os_core/os_core.c **** 
 933:../os_core/os_core.c ****     OSRdyGrp      = 0x00;                                  /* Clear the ready list                 
 3695              		.loc 1 933 0
 3696 0ffc 84309FE5 		ldr	r3, .L90
 3697 1000 0020A0E3 		mov	r2, #0
 3698 1004 0020C3E5 		strb	r2, [r3, #0]
 934:../os_core/os_core.c ****     prdytbl       = &OSRdyTbl[0];
 3699              		.loc 1 934 0
 3700 1008 7C309FE5 		ldr	r3, .L90+4
 3701 100c 14300BE5 		str	r3, [fp, #-20]
 935:../os_core/os_core.c ****     for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 3702              		.loc 1 935 0
 3703 1010 0030A0E3 		mov	r3, #0
 3704 1014 0D304BE5 		strb	r3, [fp, #-13]
 3705 1018 080000EA 		b	.L88
 3706              	.L89:
 936:../os_core/os_core.c ****         *prdytbl++ = 0x00;
 3707              		.loc 1 936 0 discriminator 2
 3708 101c 14301BE5 		ldr	r3, [fp, #-20]
 3709 1020 0020A0E3 		mov	r2, #0
 3710 1024 0020C3E5 		strb	r2, [r3, #0]
 3711 1028 14301BE5 		ldr	r3, [fp, #-20]
 3712 102c 013083E2 		add	r3, r3, #1
 3713 1030 14300BE5 		str	r3, [fp, #-20]
 935:../os_core/os_core.c ****     for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 3714              		.loc 1 935 0 discriminator 2
 3715 1034 0D305BE5 		ldrb	r3, [fp, #-13]
 3716 1038 013083E2 		add	r3, r3, #1
 3717 103c 0D304BE5 		strb	r3, [fp, #-13]
 3718              	.L88:
 935:../os_core/os_core.c ****     for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 3719              		.loc 1 935 0 is_stmt 0 discriminator 1
 3720 1040 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3721 1044 070053E3 		cmp	r3, #7
 3722 1048 F3FFFF9A 		bls	.L89
 937:../os_core/os_core.c ****     }
 938:../os_core/os_core.c **** 
 939:../os_core/os_core.c ****     OSPrioCur     = 0;
 3723              		.loc 1 939 0 is_stmt 1
 3724 104c 3C309FE5 		ldr	r3, .L90+8
 3725 1050 0020A0E3 		mov	r2, #0
 3726 1054 0020C3E5 		strb	r2, [r3, #0]
 940:../os_core/os_core.c ****     OSPrioHighRdy = 0;
 3727              		.loc 1 940 0
 3728 1058 34309FE5 		ldr	r3, .L90+12
 3729 105c 0020A0E3 		mov	r2, #0
 3730 1060 0020C3E5 		strb	r2, [r3, #0]
 941:../os_core/os_core.c **** 
 942:../os_core/os_core.c ****     OSTCBHighRdy  = (OS_TCB *)0;                                 
 3731              		.loc 1 942 0
 3732 1064 2C309FE5 		ldr	r3, .L90+16
 3733 1068 0020A0E3 		mov	r2, #0
 3734 106c 002083E5 		str	r2, [r3, #0]
 943:../os_core/os_core.c ****     OSTCBCur      = (OS_TCB *)0;
 3735              		.loc 1 943 0
 3736 1070 24309FE5 		ldr	r3, .L90+20
 3737 1074 0020A0E3 		mov	r2, #0
 3738 1078 002083E5 		str	r2, [r3, #0]
 944:../os_core/os_core.c **** }
 3739              		.loc 1 944 0
 3740 107c 0CD04BE2 		sub	sp, fp, #12
 3741 1080 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3742 1084 1EFF2FE1 		bx	lr
 3743              	.L91:
 3744              		.align	2
 3745              	.L90:
 3746 1088 00000000 		.word	OSRdyGrp
 3747 108c 00000000 		.word	OSRdyTbl
 3748 1090 00000000 		.word	OSPrioCur
 3749 1094 00000000 		.word	OSPrioHighRdy
 3750 1098 00000000 		.word	OSTCBHighRdy
 3751 109c 00000000 		.word	OSTCBCur
 3752              		.cfi_endproc
 3753              	.LFE18:
 3755              		.align	2
 3757              	OS_InitTaskIdle:
 3758              	.LFB19:
 945:../os_core/os_core.c **** 
 946:../os_core/os_core.c **** /*$PAGE*/
 947:../os_core/os_core.c **** /*
 948:../os_core/os_core.c **** ***************************************************************************************************
 949:../os_core/os_core.c **** *                                             INITIALIZATION
 950:../os_core/os_core.c **** *                                         CREATING THE IDLE TASK
 951:../os_core/os_core.c **** *
 952:../os_core/os_core.c **** * Description: This function creates the Idle Task.
 953:../os_core/os_core.c **** *
 954:../os_core/os_core.c **** * Arguments  : none
 955:../os_core/os_core.c **** *
 956:../os_core/os_core.c **** * Returns    : none
 957:../os_core/os_core.c **** ***************************************************************************************************
 958:../os_core/os_core.c **** */
 959:../os_core/os_core.c **** 
 960:../os_core/os_core.c **** static  void  OS_InitTaskIdle (void)
 961:../os_core/os_core.c **** {
 3759              		.loc 1 961 0
 3760              		.cfi_startproc
 3761              		@ Function supports interworking.
 3762              		@ args = 0, pretend = 0, frame = 0
 3763              		@ frame_needed = 1, uses_anonymous_args = 0
 3764 10a0 0DC0A0E1 		mov	ip, sp
 3765              	.LCFI38:
 3766              		.cfi_def_cfa_register 12
 3767 10a4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3768 10a8 04B04CE2 		sub	fp, ip, #4
 3769              		.cfi_offset 14, -8
 3770              		.cfi_offset 13, -12
 3771              		.cfi_offset 11, -16
 3772              	.LCFI39:
 3773              		.cfi_def_cfa 11, 4
 3774 10ac 18D04DE2 		sub	sp, sp, #24
 962:../os_core/os_core.c **** #if OS_TASK_CREATE_EXT_EN > 0
 963:../os_core/os_core.c ****     #if OS_STK_GROWTH == 1
 964:../os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskIdle,
 3775              		.loc 1 964 0
 3776 10b0 40309FE5 		ldr	r3, .L93
 3777 10b4 00308DE5 		str	r3, [sp, #0]
 3778 10b8 3C309FE5 		ldr	r3, .L93+4
 3779 10bc 04308DE5 		str	r3, [sp, #4]
 3780 10c0 023CA0E3 		mov	r3, #512
 3781 10c4 08308DE5 		str	r3, [sp, #8]
 3782 10c8 0030A0E3 		mov	r3, #0
 3783 10cc 0C308DE5 		str	r3, [sp, #12]
 3784 10d0 0330A0E3 		mov	r3, #3
 3785 10d4 10308DE5 		str	r3, [sp, #16]
 3786 10d8 20009FE5 		ldr	r0, .L93+8
 3787 10dc 0010A0E3 		mov	r1, #0
 3788 10e0 1C209FE5 		ldr	r2, .L93+12
 3789 10e4 3F30A0E3 		mov	r3, #63
 3790 10e8 FEFFFFEB 		bl	OSTaskCreateExt
 965:../os_core/os_core.c ****                           (void *)0,                                 /* No arguments passed to OS_T
 966:../os_core/os_core.c ****                           &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], /* Set Top-Of-Stack           
 967:../os_core/os_core.c ****                           OS_IDLE_PRIO,                              /* Lowest priority level      
 968:../os_core/os_core.c ****                           OS_TASK_IDLE_ID,
 969:../os_core/os_core.c ****                           &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack        
 970:../os_core/os_core.c ****                           OS_TASK_IDLE_STK_SIZE,
 971:../os_core/os_core.c ****                           (void *)0,                                 /* No TCB extension           
 972:../os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + cle
 973:../os_core/os_core.c ****     #else
 974:../os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskIdle,
 975:../os_core/os_core.c ****                           (void *)0,                                 /* No arguments passed to OS_T
 976:../os_core/os_core.c ****                           &OSTaskIdleStk[0],                         /* Set Top-Of-Stack           
 977:../os_core/os_core.c ****                           OS_IDLE_PRIO,                              /* Lowest priority level      
 978:../os_core/os_core.c ****                           OS_TASK_IDLE_ID,
 979:../os_core/os_core.c ****                           &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], /* Set Bottom-Of-Stack        
 980:../os_core/os_core.c ****                           OS_TASK_IDLE_STK_SIZE,
 981:../os_core/os_core.c ****                           (void *)0,                                 /* No TCB extension           
 982:../os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + cle
 983:../os_core/os_core.c ****     #endif
 984:../os_core/os_core.c **** #else
 985:../os_core/os_core.c ****     #if OS_STK_GROWTH == 1
 986:../os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskIdle,
 987:../os_core/os_core.c ****                        (void *)0,
 988:../os_core/os_core.c ****                        &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1],
 989:../os_core/os_core.c ****                        OS_IDLE_PRIO);
 990:../os_core/os_core.c ****     #else
 991:../os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskIdle,
 992:../os_core/os_core.c ****                        (void *)0,
 993:../os_core/os_core.c ****                        &OSTaskIdleStk[0],
 994:../os_core/os_core.c ****                        OS_IDLE_PRIO);
 995:../os_core/os_core.c ****     #endif
 996:../os_core/os_core.c **** #endif
 997:../os_core/os_core.c **** }
 3791              		.loc 1 997 0
 3792 10ec 0CD04BE2 		sub	sp, fp, #12
 3793 10f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3794 10f4 1EFF2FE1 		bx	lr
 3795              	.L94:
 3796              		.align	2
 3797              	.L93:
 3798 10f8 FFFF0000 		.word	65535
 3799 10fc 00000000 		.word	OSTaskIdleStk
 3800 1100 00000000 		.word	OS_TaskIdle
 3801 1104 FC070000 		.word	OSTaskIdleStk+2044
 3802              		.cfi_endproc
 3803              	.LFE19:
 3805              		.align	2
 3807              	OS_InitTaskStat:
 3808              	.LFB20:
 998:../os_core/os_core.c **** /*$PAGE*/
 999:../os_core/os_core.c **** /*
1000:../os_core/os_core.c **** ***************************************************************************************************
1001:../os_core/os_core.c **** *                                             INITIALIZATION
1002:../os_core/os_core.c **** *                                      CREATING THE STATISTIC TASK
1003:../os_core/os_core.c **** *
1004:../os_core/os_core.c **** * Description: This function creates the Statistic Task.
1005:../os_core/os_core.c **** *
1006:../os_core/os_core.c **** * Arguments  : none
1007:../os_core/os_core.c **** *
1008:../os_core/os_core.c **** * Returns    : none
1009:../os_core/os_core.c **** ***************************************************************************************************
1010:../os_core/os_core.c **** */
1011:../os_core/os_core.c **** 
1012:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
1013:../os_core/os_core.c **** static  void  OS_InitTaskStat (void)
1014:../os_core/os_core.c **** {
 3809              		.loc 1 1014 0
 3810              		.cfi_startproc
 3811              		@ Function supports interworking.
 3812              		@ args = 0, pretend = 0, frame = 0
 3813              		@ frame_needed = 1, uses_anonymous_args = 0
 3814 1108 0DC0A0E1 		mov	ip, sp
 3815              	.LCFI40:
 3816              		.cfi_def_cfa_register 12
 3817 110c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3818 1110 04B04CE2 		sub	fp, ip, #4
 3819              		.cfi_offset 14, -8
 3820              		.cfi_offset 13, -12
 3821              		.cfi_offset 11, -16
 3822              	.LCFI41:
 3823              		.cfi_def_cfa 11, 4
 3824 1114 18D04DE2 		sub	sp, sp, #24
1015:../os_core/os_core.c **** #if OS_TASK_CREATE_EXT_EN > 0
1016:../os_core/os_core.c ****     #if OS_STK_GROWTH == 1
1017:../os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskStat,
 3825              		.loc 1 1017 0
 3826 1118 40309FE5 		ldr	r3, .L96
 3827 111c 00308DE5 		str	r3, [sp, #0]
 3828 1120 3C309FE5 		ldr	r3, .L96+4
 3829 1124 04308DE5 		str	r3, [sp, #4]
 3830 1128 023CA0E3 		mov	r3, #512
 3831 112c 08308DE5 		str	r3, [sp, #8]
 3832 1130 0030A0E3 		mov	r3, #0
 3833 1134 0C308DE5 		str	r3, [sp, #12]
 3834 1138 0330A0E3 		mov	r3, #3
 3835 113c 10308DE5 		str	r3, [sp, #16]
 3836 1140 20009FE5 		ldr	r0, .L96+8
 3837 1144 0010A0E3 		mov	r1, #0
 3838 1148 1C209FE5 		ldr	r2, .L96+12
 3839 114c 3E30A0E3 		mov	r3, #62
 3840 1150 FEFFFFEB 		bl	OSTaskCreateExt
1018:../os_core/os_core.c ****                           (void *)0,                                   /* No args passed to OS_Task
1019:../os_core/os_core.c ****                           &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1],   /* Set Top-Of-Stack         
1020:../os_core/os_core.c ****                           OS_STAT_PRIO,                                /* One higher than the idle 
1021:../os_core/os_core.c ****                           OS_TASK_STAT_ID,
1022:../os_core/os_core.c ****                           &OSTaskStatStk[0],                           /* Set Bottom-Of-Stack      
1023:../os_core/os_core.c ****                           OS_TASK_STAT_STK_SIZE,
1024:../os_core/os_core.c ****                           (void *)0,                                   /* No TCB extension         
1025:../os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + c
1026:../os_core/os_core.c ****     #else
1027:../os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskStat,
1028:../os_core/os_core.c ****                           (void *)0,                                   /* No args passed to OS_Task
1029:../os_core/os_core.c ****                           &OSTaskStatStk[0],                           /* Set Top-Of-Stack         
1030:../os_core/os_core.c ****                           OS_STAT_PRIO,                                /* One higher than the idle 
1031:../os_core/os_core.c ****                           OS_TASK_STAT_ID,
1032:../os_core/os_core.c ****                           &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1],   /* Set Bottom-Of-Stack      
1033:../os_core/os_core.c ****                           OS_TASK_STAT_STK_SIZE,
1034:../os_core/os_core.c ****                           (void *)0,                                   /* No TCB extension         
1035:../os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + c
1036:../os_core/os_core.c ****     #endif
1037:../os_core/os_core.c **** #else
1038:../os_core/os_core.c ****     #if OS_STK_GROWTH == 1
1039:../os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskStat,
1040:../os_core/os_core.c ****                        (void *)0,                                      /* No args passed to OS_Task
1041:../os_core/os_core.c ****                        &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1],      /* Set Top-Of-Stack         
1042:../os_core/os_core.c ****                        OS_STAT_PRIO);                                  /* One higher than the idle 
1043:../os_core/os_core.c ****     #else
1044:../os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskStat,
1045:../os_core/os_core.c ****                        (void *)0,                                      /* No args passed to OS_Task
1046:../os_core/os_core.c ****                        &OSTaskStatStk[0],                              /* Set Top-Of-Stack         
1047:../os_core/os_core.c ****                        OS_STAT_PRIO);                                  /* One higher than the idle 
1048:../os_core/os_core.c ****     #endif
1049:../os_core/os_core.c **** #endif
1050:../os_core/os_core.c **** }
 3841              		.loc 1 1050 0
 3842 1154 0CD04BE2 		sub	sp, fp, #12
 3843 1158 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3844 115c 1EFF2FE1 		bx	lr
 3845              	.L97:
 3846              		.align	2
 3847              	.L96:
 3848 1160 FEFF0000 		.word	65534
 3849 1164 00000000 		.word	OSTaskStatStk
 3850 1168 00000000 		.word	OS_TaskStat
 3851 116c FC070000 		.word	OSTaskStatStk+2044
 3852              		.cfi_endproc
 3853              	.LFE20:
 3855              		.align	2
 3857              	OS_InitTCBList:
 3858              	.LFB21:
1051:../os_core/os_core.c **** #endif
1052:../os_core/os_core.c **** /*$PAGE*/
1053:../os_core/os_core.c **** /*
1054:../os_core/os_core.c **** ***************************************************************************************************
1055:../os_core/os_core.c **** *                                             INITIALIZATION
1056:../os_core/os_core.c **** *                            INITIALIZE THE FREE LIST OF TASK CONTROL BLOCKS
1057:../os_core/os_core.c **** *
1058:../os_core/os_core.c **** * Description: This function is called by OSInit() to initialize the free list of OS_TCBs.
1059:../os_core/os_core.c **** *
1060:../os_core/os_core.c **** * Arguments  : none
1061:../os_core/os_core.c **** *
1062:../os_core/os_core.c **** * Returns    : none
1063:../os_core/os_core.c **** ***************************************************************************************************
1064:../os_core/os_core.c **** */
1065:../os_core/os_core.c **** 
1066:../os_core/os_core.c **** static  void  OS_InitTCBList (void)
1067:../os_core/os_core.c **** {
 3859              		.loc 1 1067 0
 3860              		.cfi_startproc
 3861              		@ Function supports interworking.
 3862              		@ args = 0, pretend = 0, frame = 16
 3863              		@ frame_needed = 1, uses_anonymous_args = 0
 3864 1170 0DC0A0E1 		mov	ip, sp
 3865              	.LCFI42:
 3866              		.cfi_def_cfa_register 12
 3867 1174 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3868 1178 04B04CE2 		sub	fp, ip, #4
 3869              		.cfi_offset 14, -8
 3870              		.cfi_offset 13, -12
 3871              		.cfi_offset 11, -16
 3872              	.LCFI43:
 3873              		.cfi_def_cfa 11, 4
 3874 117c 10D04DE2 		sub	sp, sp, #16
1068:../os_core/os_core.c ****     INT8U    i;
1069:../os_core/os_core.c ****     OS_TCB  *ptcb1;
1070:../os_core/os_core.c ****     OS_TCB  *ptcb2;
1071:../os_core/os_core.c **** 
1072:../os_core/os_core.c **** 
1073:../os_core/os_core.c ****     OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs             
 3875              		.loc 1 1073 0
 3876 1180 D0309FE5 		ldr	r3, .L101
 3877 1184 0300A0E1 		mov	r0, r3
 3878 1188 8F1EA0E3 		mov	r1, #2288
 3879 118c FEFFFFEB 		bl	OS_MemClr
1074:../os_core/os_core.c ****     OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table       
 3880              		.loc 1 1074 0
 3881 1190 C4309FE5 		ldr	r3, .L101+4
 3882 1194 0300A0E1 		mov	r0, r3
 3883 1198 011CA0E3 		mov	r1, #256
 3884 119c FEFFFFEB 		bl	OS_MemClr
1075:../os_core/os_core.c ****     ptcb1 = &OSTCBTbl[0];
 3885              		.loc 1 1075 0
 3886 11a0 B0309FE5 		ldr	r3, .L101
 3887 11a4 14300BE5 		str	r3, [fp, #-20]
1076:../os_core/os_core.c ****     ptcb2 = &OSTCBTbl[1];
 3888              		.loc 1 1076 0
 3889 11a8 B0309FE5 		ldr	r3, .L101+8
 3890 11ac 18300BE5 		str	r3, [fp, #-24]
1077:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs        
 3891              		.loc 1 1077 0
 3892 11b0 0030A0E3 		mov	r3, #0
 3893 11b4 0D304BE5 		strb	r3, [fp, #-13]
 3894 11b8 110000EA 		b	.L99
 3895              	.L100:
1078:../os_core/os_core.c ****         ptcb1->OSTCBNext = ptcb2;
 3896              		.loc 1 1078 0 discriminator 2
 3897 11bc 14301BE5 		ldr	r3, [fp, #-20]
 3898 11c0 18201BE5 		ldr	r2, [fp, #-24]
 3899 11c4 142083E5 		str	r2, [r3, #20]
1079:../os_core/os_core.c **** #if OS_TASK_NAME_SIZE > 1
1080:../os_core/os_core.c ****         ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                   
 3900              		.loc 1 1080 0 discriminator 2
 3901 11c8 14301BE5 		ldr	r3, [fp, #-20]
 3902 11cc 3F20A0E3 		mov	r2, #63
 3903 11d0 4820C3E5 		strb	r2, [r3, #72]
1081:../os_core/os_core.c ****         ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 3904              		.loc 1 1081 0 discriminator 2
 3905 11d4 14301BE5 		ldr	r3, [fp, #-20]
 3906 11d8 0020A0E3 		mov	r2, #0
 3907 11dc 4920C3E5 		strb	r2, [r3, #73]
1082:../os_core/os_core.c **** #endif
1083:../os_core/os_core.c ****         ptcb1++;
 3908              		.loc 1 1083 0 discriminator 2
 3909 11e0 14301BE5 		ldr	r3, [fp, #-20]
 3910 11e4 683083E2 		add	r3, r3, #104
 3911 11e8 14300BE5 		str	r3, [fp, #-20]
1084:../os_core/os_core.c ****         ptcb2++;
 3912              		.loc 1 1084 0 discriminator 2
 3913 11ec 18301BE5 		ldr	r3, [fp, #-24]
 3914 11f0 683083E2 		add	r3, r3, #104
 3915 11f4 18300BE5 		str	r3, [fp, #-24]
1077:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs        
 3916              		.loc 1 1077 0 discriminator 2
 3917 11f8 0D305BE5 		ldrb	r3, [fp, #-13]
 3918 11fc 013083E2 		add	r3, r3, #1
 3919 1200 0D304BE5 		strb	r3, [fp, #-13]
 3920              	.L99:
1077:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs        
 3921              		.loc 1 1077 0 is_stmt 0 discriminator 1
 3922 1204 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3923 1208 140053E3 		cmp	r3, #20
 3924 120c EAFFFF9A 		bls	.L100
1085:../os_core/os_core.c ****     }
1086:../os_core/os_core.c ****     ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                    
 3925              		.loc 1 1086 0 is_stmt 1
 3926 1210 14301BE5 		ldr	r3, [fp, #-20]
 3927 1214 0020A0E3 		mov	r2, #0
 3928 1218 142083E5 		str	r2, [r3, #20]
1087:../os_core/os_core.c **** #if OS_TASK_NAME_SIZE > 1
1088:../os_core/os_core.c ****     ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                   
 3929              		.loc 1 1088 0
 3930 121c 14301BE5 		ldr	r3, [fp, #-20]
 3931 1220 3F20A0E3 		mov	r2, #63
 3932 1224 4820C3E5 		strb	r2, [r3, #72]
1089:../os_core/os_core.c ****     ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 3933              		.loc 1 1089 0
 3934 1228 14301BE5 		ldr	r3, [fp, #-20]
 3935 122c 0020A0E3 		mov	r2, #0
 3936 1230 4920C3E5 		strb	r2, [r3, #73]
1090:../os_core/os_core.c **** #endif
1091:../os_core/os_core.c ****     OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations      
 3937              		.loc 1 1091 0
 3938 1234 28309FE5 		ldr	r3, .L101+12
 3939 1238 0020A0E3 		mov	r2, #0
 3940 123c 002083E5 		str	r2, [r3, #0]
1092:../os_core/os_core.c ****     OSTCBFreeList           = &OSTCBTbl[0];
 3941              		.loc 1 1092 0
 3942 1240 20309FE5 		ldr	r3, .L101+16
 3943 1244 0C209FE5 		ldr	r2, .L101
 3944 1248 002083E5 		str	r2, [r3, #0]
1093:../os_core/os_core.c **** }
 3945              		.loc 1 1093 0
 3946 124c 0CD04BE2 		sub	sp, fp, #12
 3947 1250 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3948 1254 1EFF2FE1 		bx	lr
 3949              	.L102:
 3950              		.align	2
 3951              	.L101:
 3952 1258 00000000 		.word	OSTCBTbl
 3953 125c 00000000 		.word	OSTCBPrioTbl
 3954 1260 68000000 		.word	OSTCBTbl+104
 3955 1264 00000000 		.word	OSTCBList
 3956 1268 00000000 		.word	OSTCBFreeList
 3957              		.cfi_endproc
 3958              	.LFE21:
 3960              		.align	2
 3961              		.global	OS_MemClr
 3963              	OS_MemClr:
 3964              	.LFB22:
1094:../os_core/os_core.c **** /*$PAGE*/
1095:../os_core/os_core.c **** /*
1096:../os_core/os_core.c **** ***************************************************************************************************
1097:../os_core/os_core.c **** *                                        CLEAR A SECTION OF MEMORY
1098:../os_core/os_core.c **** *
1099:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to clear a contiguous block of RA
1100:../os_core/os_core.c **** *
1101:../os_core/os_core.c **** * Arguments  : pdest    is the start of the RAM to clear (i.e. write 0x00 to)
1102:../os_core/os_core.c **** *
1103:../os_core/os_core.c **** *              size     is the number of bytes to clear.  
1104:../os_core/os_core.c **** *
1105:../os_core/os_core.c **** * Returns    : none
1106:../os_core/os_core.c **** *
1107:../os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1108:../os_core/os_core.c **** *              2) Note that we can only clear up to 64K bytes of RAM.  This is not an issue because
1109:../os_core/os_core.c **** *                 of the uses of this function gets close to this limit.
1110:../os_core/os_core.c **** *              3) The clear is done one byte at a time since this will work on any processor irresp
1111:../os_core/os_core.c **** *                 of the alignment of the destination.
1112:../os_core/os_core.c **** ***************************************************************************************************
1113:../os_core/os_core.c **** */
1114:../os_core/os_core.c **** 
1115:../os_core/os_core.c **** void  OS_MemClr (INT8U *pdest, INT16U size)
1116:../os_core/os_core.c **** {
 3965              		.loc 1 1116 0
 3966              		.cfi_startproc
 3967              		@ Function supports interworking.
 3968              		@ args = 0, pretend = 0, frame = 8
 3969              		@ frame_needed = 1, uses_anonymous_args = 0
 3970 126c 0DC0A0E1 		mov	ip, sp
 3971              	.LCFI44:
 3972              		.cfi_def_cfa_register 12
 3973 1270 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3974 1274 04B04CE2 		sub	fp, ip, #4
 3975              		.cfi_offset 14, -8
 3976              		.cfi_offset 13, -12
 3977              		.cfi_offset 11, -16
 3978              	.LCFI45:
 3979              		.cfi_def_cfa 11, 4
 3980 1278 08D04DE2 		sub	sp, sp, #8
 3981 127c 10000BE5 		str	r0, [fp, #-16]
 3982 1280 0130A0E1 		mov	r3, r1
 3983 1284 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
1117:../os_core/os_core.c ****     while (size > 0) {
 3984              		.loc 1 1117 0
 3985 1288 080000EA 		b	.L104
 3986              	.L105:
1118:../os_core/os_core.c ****         *pdest++ = (INT8U)0;
 3987              		.loc 1 1118 0
 3988 128c 10301BE5 		ldr	r3, [fp, #-16]
 3989 1290 0020A0E3 		mov	r2, #0
 3990 1294 0020C3E5 		strb	r2, [r3, #0]
 3991 1298 10301BE5 		ldr	r3, [fp, #-16]
 3992 129c 013083E2 		add	r3, r3, #1
 3993 12a0 10300BE5 		str	r3, [fp, #-16]
1119:../os_core/os_core.c ****         size--;
 3994              		.loc 1 1119 0
 3995 12a4 B2315BE1 		ldrh	r3, [fp, #-18]	@ movhi
 3996 12a8 013043E2 		sub	r3, r3, #1
 3997 12ac B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 3998              	.L104:
1117:../os_core/os_core.c ****     while (size > 0) {
 3999              		.loc 1 1117 0 discriminator 1
 4000 12b0 B2315BE1 		ldrh	r3, [fp, #-18]
 4001 12b4 000053E3 		cmp	r3, #0
 4002 12b8 F3FFFF1A 		bne	.L105
1120:../os_core/os_core.c ****     }
1121:../os_core/os_core.c **** }
 4003              		.loc 1 1121 0
 4004 12bc 0CD04BE2 		sub	sp, fp, #12
 4005 12c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4006 12c4 1EFF2FE1 		bx	lr
 4007              		.cfi_endproc
 4008              	.LFE22:
 4010              		.align	2
 4011              		.global	OS_MemCopy
 4013              	OS_MemCopy:
 4014              	.LFB23:
1122:../os_core/os_core.c **** /*$PAGE*/
1123:../os_core/os_core.c **** /*
1124:../os_core/os_core.c **** ***************************************************************************************************
1125:../os_core/os_core.c **** *                                        COPY A BLOCK OF MEMORY
1126:../os_core/os_core.c **** *
1127:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to copy a block of memory from on
1128:../os_core/os_core.c **** *              location to another.
1129:../os_core/os_core.c **** *
1130:../os_core/os_core.c **** * Arguments  : pdest    is a pointer to the 'destination' memory block
1131:../os_core/os_core.c **** *
1132:../os_core/os_core.c **** *              psrc     is a pointer to the 'source'      memory block
1133:../os_core/os_core.c **** *
1134:../os_core/os_core.c **** *              size     is the number of bytes to copy.  
1135:../os_core/os_core.c **** *
1136:../os_core/os_core.c **** * Returns    : none
1137:../os_core/os_core.c **** *
1138:../os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.  T
1139:../os_core/os_core.c **** *                 no provision to handle overlapping memory copy.  However, that's not a problem si
1140:../os_core/os_core.c **** *                 is not a situation that will happen.
1141:../os_core/os_core.c **** *              2) Note that we can only copy up to 64K bytes of RAM
1142:../os_core/os_core.c **** *              3) The copy is done one byte at a time since this will work on any processor irrespe
1143:../os_core/os_core.c **** *                 of the alignment of the source and destination.
1144:../os_core/os_core.c **** ***************************************************************************************************
1145:../os_core/os_core.c **** */
1146:../os_core/os_core.c **** 
1147:../os_core/os_core.c **** void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
1148:../os_core/os_core.c **** {
 4015              		.loc 1 1148 0
 4016              		.cfi_startproc
 4017              		@ Function supports interworking.
 4018              		@ args = 0, pretend = 0, frame = 16
 4019              		@ frame_needed = 1, uses_anonymous_args = 0
 4020 12c8 0DC0A0E1 		mov	ip, sp
 4021              	.LCFI46:
 4022              		.cfi_def_cfa_register 12
 4023 12cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4024 12d0 04B04CE2 		sub	fp, ip, #4
 4025              		.cfi_offset 14, -8
 4026              		.cfi_offset 13, -12
 4027              		.cfi_offset 11, -16
 4028              	.LCFI47:
 4029              		.cfi_def_cfa 11, 4
 4030 12d4 10D04DE2 		sub	sp, sp, #16
 4031 12d8 10000BE5 		str	r0, [fp, #-16]
 4032 12dc 14100BE5 		str	r1, [fp, #-20]
 4033 12e0 0230A0E1 		mov	r3, r2
 4034 12e4 B6314BE1 		strh	r3, [fp, #-22]	@ movhi
1149:../os_core/os_core.c ****     while (size > 0) {
 4035              		.loc 1 1149 0
 4036 12e8 0C0000EA 		b	.L107
 4037              	.L108:
1150:../os_core/os_core.c ****         *pdest++ = *psrc++;
 4038              		.loc 1 1150 0
 4039 12ec 14301BE5 		ldr	r3, [fp, #-20]
 4040 12f0 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4041 12f4 10301BE5 		ldr	r3, [fp, #-16]
 4042 12f8 0020C3E5 		strb	r2, [r3, #0]
 4043 12fc 10301BE5 		ldr	r3, [fp, #-16]
 4044 1300 013083E2 		add	r3, r3, #1
 4045 1304 10300BE5 		str	r3, [fp, #-16]
 4046 1308 14301BE5 		ldr	r3, [fp, #-20]
 4047 130c 013083E2 		add	r3, r3, #1
 4048 1310 14300BE5 		str	r3, [fp, #-20]
1151:../os_core/os_core.c ****         size--;
 4049              		.loc 1 1151 0
 4050 1314 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 4051 1318 013043E2 		sub	r3, r3, #1
 4052 131c B6314BE1 		strh	r3, [fp, #-22]	@ movhi
 4053              	.L107:
1149:../os_core/os_core.c ****     while (size > 0) {
 4054              		.loc 1 1149 0 discriminator 1
 4055 1320 B6315BE1 		ldrh	r3, [fp, #-22]
 4056 1324 000053E3 		cmp	r3, #0
 4057 1328 EFFFFF1A 		bne	.L108
1152:../os_core/os_core.c ****     }
1153:../os_core/os_core.c **** }
 4058              		.loc 1 1153 0
 4059 132c 0CD04BE2 		sub	sp, fp, #12
 4060 1330 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4061 1334 1EFF2FE1 		bx	lr
 4062              		.cfi_endproc
 4063              	.LFE23:
 4065              		.align	2
 4066              		.global	OS_Sched
 4068              	OS_Sched:
 4069              	.LFB24:
1154:../os_core/os_core.c **** /*$PAGE*/
1155:../os_core/os_core.c **** /*
1156:../os_core/os_core.c **** ***************************************************************************************************
1157:../os_core/os_core.c **** *                                              SCHEDULER
1158:../os_core/os_core.c **** *
1159:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to determine whether a new, high
1160:../os_core/os_core.c **** *              priority task has been made ready to run.  This function is invoked by TASK level co
1161:../os_core/os_core.c **** *              and is not used to reschedule tasks from ISRs (see OSIntExit() for ISR rescheduling)
1162:../os_core/os_core.c **** *
1163:../os_core/os_core.c **** * Arguments  : none
1164:../os_core/os_core.c **** *
1165:../os_core/os_core.c **** * Returns    : none
1166:../os_core/os_core.c **** *
1167:../os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1168:../os_core/os_core.c **** *              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
1169:../os_core/os_core.c **** ***************************************************************************************************
1170:../os_core/os_core.c **** */
1171:../os_core/os_core.c **** 
1172:../os_core/os_core.c **** void  OS_Sched (void)
1173:../os_core/os_core.c **** {
 4070              		.loc 1 1173 0
 4071              		.cfi_startproc
 4072              		@ Function supports interworking.
 4073              		@ args = 0, pretend = 0, frame = 8
 4074              		@ frame_needed = 1, uses_anonymous_args = 0
 4075 1338 0DC0A0E1 		mov	ip, sp
 4076              	.LCFI48:
 4077              		.cfi_def_cfa_register 12
 4078 133c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4079 1340 04B04CE2 		sub	fp, ip, #4
 4080              		.cfi_offset 14, -8
 4081              		.cfi_offset 13, -12
 4082              		.cfi_offset 11, -16
 4083              	.LCFI49:
 4084              		.cfi_def_cfa 11, 4
 4085 1344 08D04DE2 		sub	sp, sp, #8
1174:../os_core/os_core.c ****     INT8U      y;
1175:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register 
1176:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1177:../os_core/os_core.c **** 
1178:../os_core/os_core.c **** 
1179:../os_core/os_core.c **** 
1180:../os_core/os_core.c ****     cpu_sr = 0;                                        /* Prevent compiler warning                 
1181:../os_core/os_core.c **** #endif    
1182:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 4086              		.loc 1 1182 0
 4087              	@ 1182 "../os_core/os_core.c" 1
 4088 1348 00000FE1 		mrs   r0, cpsr              
 4089 134c 04002DE5 	stmfd sp!, {r0}             
 4090 1350 C00080E3 	orr   r0, r0, #0b11000000   
 4091 1354 00F021E1 	msr   cpsr_c, r0              
 4092              	@ 0 "" 2
1183:../os_core/os_core.c ****     if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...   
 4093              		.loc 1 1183 0
 4094 1358 D0309FE5 		ldr	r3, .L111
 4095 135c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4096 1360 000053E3 		cmp	r3, #0
 4097 1364 2C00001A 		bne	.L110
1184:../os_core/os_core.c ****         if (OSLockNesting == 0) {                      /* ... scheduler is not locked              
 4098              		.loc 1 1184 0
 4099 1368 C4309FE5 		ldr	r3, .L111+4
 4100 136c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4101 1370 000053E3 		cmp	r3, #0
 4102 1374 2800001A 		bne	.L110
1185:../os_core/os_core.c ****             y             = OSUnMapTbl[OSRdyGrp];      /* Get pointer to HPT ready to run          
 4103              		.loc 1 1185 0
 4104 1378 B8309FE5 		ldr	r3, .L111+8
 4105 137c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4106 1380 B4209FE5 		ldr	r2, .L111+12
 4107 1384 0330D2E7 		ldrb	r3, [r2, r3]
 4108 1388 0D304BE5 		strb	r3, [fp, #-13]
1186:../os_core/os_core.c ****             OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 4109              		.loc 1 1186 0
 4110 138c 0D305BE5 		ldrb	r3, [fp, #-13]
 4111 1390 8331A0E1 		mov	r3, r3, asl #3
 4112 1394 FF2003E2 		and	r2, r3, #255
 4113 1398 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 4114 139c 9C109FE5 		ldr	r1, .L111+16
 4115 13a0 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 4116 13a4 90109FE5 		ldr	r1, .L111+12
 4117 13a8 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 4118 13ac 033082E0 		add	r3, r2, r3
 4119 13b0 FF2003E2 		and	r2, r3, #255
 4120 13b4 88309FE5 		ldr	r3, .L111+20
 4121 13b8 0020C3E5 		strb	r2, [r3, #0]
1187:../os_core/os_core.c ****             if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy 
 4122              		.loc 1 1187 0
 4123 13bc 80309FE5 		ldr	r3, .L111+20
 4124 13c0 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4125 13c4 7C309FE5 		ldr	r3, .L111+24
 4126 13c8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4127 13cc 030052E1 		cmp	r2, r3
 4128 13d0 1100000A 		beq	.L110
1188:../os_core/os_core.c ****                 OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 4129              		.loc 1 1188 0
 4130 13d4 68309FE5 		ldr	r3, .L111+20
 4131 13d8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4132 13dc 0320A0E1 		mov	r2, r3
 4133 13e0 64309FE5 		ldr	r3, .L111+28
 4134 13e4 022193E7 		ldr	r2, [r3, r2, asl #2]
 4135 13e8 60309FE5 		ldr	r3, .L111+32
 4136 13ec 002083E5 		str	r2, [r3, #0]
1189:../os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
1190:../os_core/os_core.c ****                 OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  
 4137              		.loc 1 1190 0
 4138 13f0 58309FE5 		ldr	r3, .L111+32
 4139 13f4 003093E5 		ldr	r3, [r3, #0]
 4140 13f8 342093E5 		ldr	r2, [r3, #52]
 4141 13fc 012082E2 		add	r2, r2, #1
 4142 1400 342083E5 		str	r2, [r3, #52]
1191:../os_core/os_core.c **** #endif
1192:../os_core/os_core.c ****                 OSCtxSwCtr++;                          /* Increment context switch counter         
 4143              		.loc 1 1192 0
 4144 1404 48309FE5 		ldr	r3, .L111+36
 4145 1408 003093E5 		ldr	r3, [r3, #0]
 4146 140c 012083E2 		add	r2, r3, #1
 4147 1410 3C309FE5 		ldr	r3, .L111+36
 4148 1414 002083E5 		str	r2, [r3, #0]
1193:../os_core/os_core.c ****                 OS_TASK_SW();                          /* Perform a context switch                 
 4149              		.loc 1 1193 0
 4150 1418 FEFFFFEB 		bl	OSCtxSw
 4151              	.L110:
1194:../os_core/os_core.c ****             }
1195:../os_core/os_core.c ****         }
1196:../os_core/os_core.c ****     }
1197:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 4152              		.loc 1 1197 0
 4153              	@ 1197 "../os_core/os_core.c" 1
 4154 141c 04009DE4 		ldmfd sp!, {r0}             
 4155 1420 00F021E1 	msr   cpsr_c, r0              
 4156              	@ 0 "" 2
1198:../os_core/os_core.c **** }
 4157              		.loc 1 1198 0
 4158 1424 0CD04BE2 		sub	sp, fp, #12
 4159 1428 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4160 142c 1EFF2FE1 		bx	lr
 4161              	.L112:
 4162              		.align	2
 4163              	.L111:
 4164 1430 00000000 		.word	OSIntNesting
 4165 1434 00000000 		.word	OSLockNesting
 4166 1438 00000000 		.word	OSRdyGrp
 4167 143c 00000000 		.word	OSUnMapTbl
 4168 1440 00000000 		.word	OSRdyTbl
 4169 1444 00000000 		.word	OSPrioHighRdy
 4170 1448 00000000 		.word	OSPrioCur
 4171 144c 00000000 		.word	OSTCBPrioTbl
 4172 1450 00000000 		.word	OSTCBHighRdy
 4173 1454 00000000 		.word	OSCtxSwCtr
 4174              		.cfi_endproc
 4175              	.LFE24:
 4177              		.align	2
 4178              		.global	OS_StrCopy
 4180              	OS_StrCopy:
 4181              	.LFB25:
1199:../os_core/os_core.c **** /*$PAGE*/
1200:../os_core/os_core.c **** /*
1201:../os_core/os_core.c **** ***************************************************************************************************
1202:../os_core/os_core.c **** *                                        COPY AN ASCII STRING
1203:../os_core/os_core.c **** *
1204:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to copy an ASCII string from a 's
1205:../os_core/os_core.c **** *              string to a 'destination' string.
1206:../os_core/os_core.c **** *
1207:../os_core/os_core.c **** * Arguments  : pdest    is a pointer to the string that will be receiving the copy.  Note that ther
1208:../os_core/os_core.c **** *                       be sufficient space in the destination storage area to receive this string.
1209:../os_core/os_core.c **** *
1210:../os_core/os_core.c **** *              psrc     is a pointer to the source string.  The source string MUST NOT be greater t
1211:../os_core/os_core.c **** *                       254 characters.
1212:../os_core/os_core.c **** *
1213:../os_core/os_core.c **** * Returns    : The size of the string (excluding the NUL terminating character)
1214:../os_core/os_core.c **** *
1215:../os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1216:../os_core/os_core.c **** ***************************************************************************************************
1217:../os_core/os_core.c **** */
1218:../os_core/os_core.c **** 
1219:../os_core/os_core.c **** #if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_
1220:../os_core/os_core.c **** INT8U  OS_StrCopy (char *pdest, char *psrc)
1221:../os_core/os_core.c **** {
 4182              		.loc 1 1221 0
 4183              		.cfi_startproc
 4184              		@ Function supports interworking.
 4185              		@ args = 0, pretend = 0, frame = 16
 4186              		@ frame_needed = 1, uses_anonymous_args = 0
 4187 1458 0DC0A0E1 		mov	ip, sp
 4188              	.LCFI50:
 4189              		.cfi_def_cfa_register 12
 4190 145c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4191 1460 04B04CE2 		sub	fp, ip, #4
 4192              		.cfi_offset 14, -8
 4193              		.cfi_offset 13, -12
 4194              		.cfi_offset 11, -16
 4195              	.LCFI51:
 4196              		.cfi_def_cfa 11, 4
 4197 1464 10D04DE2 		sub	sp, sp, #16
 4198 1468 18000BE5 		str	r0, [fp, #-24]
 4199 146c 1C100BE5 		str	r1, [fp, #-28]
1222:../os_core/os_core.c ****     INT8U  len;
1223:../os_core/os_core.c **** 
1224:../os_core/os_core.c **** 
1225:../os_core/os_core.c ****     len = 0;
 4200              		.loc 1 1225 0
 4201 1470 0030A0E3 		mov	r3, #0
 4202 1474 0D304BE5 		strb	r3, [fp, #-13]
1226:../os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4203              		.loc 1 1226 0
 4204 1478 0C0000EA 		b	.L114
 4205              	.L115:
1227:../os_core/os_core.c ****         *pdest++ = *psrc++;
 4206              		.loc 1 1227 0
 4207 147c 1C301BE5 		ldr	r3, [fp, #-28]
 4208 1480 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4209 1484 18301BE5 		ldr	r3, [fp, #-24]
 4210 1488 0020C3E5 		strb	r2, [r3, #0]
 4211 148c 18301BE5 		ldr	r3, [fp, #-24]
 4212 1490 013083E2 		add	r3, r3, #1
 4213 1494 18300BE5 		str	r3, [fp, #-24]
 4214 1498 1C301BE5 		ldr	r3, [fp, #-28]
 4215 149c 013083E2 		add	r3, r3, #1
 4216 14a0 1C300BE5 		str	r3, [fp, #-28]
1228:../os_core/os_core.c ****         len++;
 4217              		.loc 1 1228 0
 4218 14a4 0D305BE5 		ldrb	r3, [fp, #-13]
 4219 14a8 013083E2 		add	r3, r3, #1
 4220 14ac 0D304BE5 		strb	r3, [fp, #-13]
 4221              	.L114:
1226:../os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4222              		.loc 1 1226 0 discriminator 1
 4223 14b0 1C301BE5 		ldr	r3, [fp, #-28]
 4224 14b4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4225 14b8 000053E3 		cmp	r3, #0
 4226 14bc EEFFFF1A 		bne	.L115
1229:../os_core/os_core.c ****     }
1230:../os_core/os_core.c ****     *pdest = OS_ASCII_NUL;
 4227              		.loc 1 1230 0
 4228 14c0 18301BE5 		ldr	r3, [fp, #-24]
 4229 14c4 0020A0E3 		mov	r2, #0
 4230 14c8 0020C3E5 		strb	r2, [r3, #0]
1231:../os_core/os_core.c ****     return (len);
 4231              		.loc 1 1231 0
 4232 14cc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
1232:../os_core/os_core.c **** }
 4233              		.loc 1 1232 0
 4234 14d0 0300A0E1 		mov	r0, r3
 4235 14d4 0CD04BE2 		sub	sp, fp, #12
 4236 14d8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4237 14dc 1EFF2FE1 		bx	lr
 4238              		.cfi_endproc
 4239              	.LFE25:
 4241              		.align	2
 4242              		.global	OS_StrLen
 4244              	OS_StrLen:
 4245              	.LFB26:
1233:../os_core/os_core.c **** #endif
1234:../os_core/os_core.c **** /*$PAGE*/
1235:../os_core/os_core.c **** /*
1236:../os_core/os_core.c **** ***************************************************************************************************
1237:../os_core/os_core.c **** *                                DETERMINE THE LENGTH OF AN ASCII STRING
1238:../os_core/os_core.c **** *
1239:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to determine the size of an ASCII
1240:../os_core/os_core.c **** *              (excluding the NUL character).
1241:../os_core/os_core.c **** *
1242:../os_core/os_core.c **** * Arguments  : psrc     is a pointer to the string for which we need to know the size.
1243:../os_core/os_core.c **** *
1244:../os_core/os_core.c **** * Returns    : The size of the string (excluding the NUL terminating character)
1245:../os_core/os_core.c **** *
1246:../os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1247:../os_core/os_core.c **** *              2) The string to check must be less than 255 characters long.
1248:../os_core/os_core.c **** ***************************************************************************************************
1249:../os_core/os_core.c **** */
1250:../os_core/os_core.c **** 
1251:../os_core/os_core.c **** #if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_
1252:../os_core/os_core.c **** INT8U  OS_StrLen (char *psrc)
1253:../os_core/os_core.c **** {
 4246              		.loc 1 1253 0
 4247              		.cfi_startproc
 4248              		@ Function supports interworking.
 4249              		@ args = 0, pretend = 0, frame = 16
 4250              		@ frame_needed = 1, uses_anonymous_args = 0
 4251 14e0 0DC0A0E1 		mov	ip, sp
 4252              	.LCFI52:
 4253              		.cfi_def_cfa_register 12
 4254 14e4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4255 14e8 04B04CE2 		sub	fp, ip, #4
 4256              		.cfi_offset 14, -8
 4257              		.cfi_offset 13, -12
 4258              		.cfi_offset 11, -16
 4259              	.LCFI53:
 4260              		.cfi_def_cfa 11, 4
 4261 14ec 10D04DE2 		sub	sp, sp, #16
 4262 14f0 18000BE5 		str	r0, [fp, #-24]
1254:../os_core/os_core.c ****     INT8U  len;
1255:../os_core/os_core.c **** 
1256:../os_core/os_core.c **** 
1257:../os_core/os_core.c ****     len = 0;
 4263              		.loc 1 1257 0
 4264 14f4 0030A0E3 		mov	r3, #0
 4265 14f8 0D304BE5 		strb	r3, [fp, #-13]
1258:../os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4266              		.loc 1 1258 0
 4267 14fc 050000EA 		b	.L117
 4268              	.L118:
1259:../os_core/os_core.c ****         psrc++;
 4269              		.loc 1 1259 0
 4270 1500 18301BE5 		ldr	r3, [fp, #-24]
 4271 1504 013083E2 		add	r3, r3, #1
 4272 1508 18300BE5 		str	r3, [fp, #-24]
1260:../os_core/os_core.c ****         len++;
 4273              		.loc 1 1260 0
 4274 150c 0D305BE5 		ldrb	r3, [fp, #-13]
 4275 1510 013083E2 		add	r3, r3, #1
 4276 1514 0D304BE5 		strb	r3, [fp, #-13]
 4277              	.L117:
1258:../os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4278              		.loc 1 1258 0 discriminator 1
 4279 1518 18301BE5 		ldr	r3, [fp, #-24]
 4280 151c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4281 1520 000053E3 		cmp	r3, #0
 4282 1524 F5FFFF1A 		bne	.L118
1261:../os_core/os_core.c ****     }
1262:../os_core/os_core.c ****     return (len);
 4283              		.loc 1 1262 0
 4284 1528 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
1263:../os_core/os_core.c **** }
 4285              		.loc 1 1263 0
 4286 152c 0300A0E1 		mov	r0, r3
 4287 1530 0CD04BE2 		sub	sp, fp, #12
 4288 1534 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4289 1538 1EFF2FE1 		bx	lr
 4290              		.cfi_endproc
 4291              	.LFE26:
 4293              		.align	2
 4294              		.global	OS_TaskIdle
 4296              	OS_TaskIdle:
 4297              	.LFB27:
1264:../os_core/os_core.c **** #endif
1265:../os_core/os_core.c **** /*$PAGE*/
1266:../os_core/os_core.c **** /*
1267:../os_core/os_core.c **** ***************************************************************************************************
1268:../os_core/os_core.c **** *                                              IDLE TASK
1269:../os_core/os_core.c **** *
1270:../os_core/os_core.c **** * Description: This task is internal to uC/OS-II and executes whenever no other higher priority tas
1271:../os_core/os_core.c **** *              executes because they are ALL waiting for event(s) to occur.
1272:../os_core/os_core.c **** *
1273:../os_core/os_core.c **** * Arguments  : none
1274:../os_core/os_core.c **** *
1275:../os_core/os_core.c **** * Returns    : none
1276:../os_core/os_core.c **** *
1277:../os_core/os_core.c **** * Note(s)    : 1) OSTaskIdleHook() is called after the critical section to ensure that interrupts w
1278:../os_core/os_core.c **** *                 enabled for at least a few instructions.  On some processors (ex. Philips XA), en
1279:../os_core/os_core.c **** *                 and then disabling interrupts didn't allow the processor enough time to have inte
1280:../os_core/os_core.c **** *                 enabled before they were disabled again.  uC/OS-II would thus never recognize
1281:../os_core/os_core.c **** *                 interrupts.
1282:../os_core/os_core.c **** *              2) This hook has been added to allow you to do such things as STOP the CPU to conser
1283:../os_core/os_core.c **** *                 power.
1284:../os_core/os_core.c **** ***************************************************************************************************
1285:../os_core/os_core.c **** */
1286:../os_core/os_core.c **** 
1287:../os_core/os_core.c **** void  OS_TaskIdle (void *parg)
1288:../os_core/os_core.c **** {
 4298              		.loc 1 1288 0
 4299              		.cfi_startproc
 4300              		@ Function supports interworking.
 4301              		@ args = 0, pretend = 0, frame = 8
 4302              		@ frame_needed = 1, uses_anonymous_args = 0
 4303 153c 0DC0A0E1 		mov	ip, sp
 4304              	.LCFI54:
 4305              		.cfi_def_cfa_register 12
 4306 1540 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4307 1544 04B04CE2 		sub	fp, ip, #4
 4308              		.cfi_offset 14, -8
 4309              		.cfi_offset 13, -12
 4310              		.cfi_offset 11, -16
 4311              	.LCFI55:
 4312              		.cfi_def_cfa 11, 4
 4313 1548 08D04DE2 		sub	sp, sp, #8
 4314 154c 10000BE5 		str	r0, [fp, #-16]
 4315              	.L120:
1289:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
1290:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1291:../os_core/os_core.c ****     
1292:../os_core/os_core.c ****     
1293:../os_core/os_core.c **** 
1294:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
1295:../os_core/os_core.c **** #endif    
1296:../os_core/os_core.c ****     parg   = parg;                               /* Prevent compiler warning for not using 'parg'  
1297:../os_core/os_core.c ****     for (;;) {
1298:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 4316              		.loc 1 1298 0 discriminator 1
 4317              	@ 1298 "../os_core/os_core.c" 1
 4318 1550 00000FE1 		mrs   r0, cpsr              
 4319 1554 04002DE5 	stmfd sp!, {r0}             
 4320 1558 C00080E3 	orr   r0, r0, #0b11000000   
 4321 155c 00F021E1 	msr   cpsr_c, r0              
 4322              	@ 0 "" 2
1299:../os_core/os_core.c ****         OSIdleCtr++;
 4323              		.loc 1 1299 0 discriminator 1
 4324 1560 1C309FE5 		ldr	r3, .L121
 4325 1564 003093E5 		ldr	r3, [r3, #0]
 4326 1568 012083E2 		add	r2, r3, #1
 4327 156c 10309FE5 		ldr	r3, .L121
 4328 1570 002083E5 		str	r2, [r3, #0]
1300:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4329              		.loc 1 1300 0 discriminator 1
 4330              	@ 1300 "../os_core/os_core.c" 1
 4331 1574 04009DE4 		ldmfd sp!, {r0}             
 4332 1578 00F021E1 	msr   cpsr_c, r0              
 4333              	@ 0 "" 2
1301:../os_core/os_core.c ****         OSTaskIdleHook();                        /* Call user definable HOOK                       
 4334              		.loc 1 1301 0 discriminator 1
 4335 157c FEFFFFEB 		bl	OSTaskIdleHook
1302:../os_core/os_core.c ****     }
 4336              		.loc 1 1302 0 discriminator 1
 4337 1580 F2FFFFEA 		b	.L120
 4338              	.L122:
 4339              		.align	2
 4340              	.L121:
 4341 1584 00000000 		.word	OSIdleCtr
 4342              		.cfi_endproc
 4343              	.LFE27:
 4345              		.global	__aeabi_uidiv
 4346              		.align	2
 4347              		.global	OS_TaskStat
 4349              	OS_TaskStat:
 4350              	.LFB28:
1303:../os_core/os_core.c **** }
1304:../os_core/os_core.c **** /*$PAGE*/
1305:../os_core/os_core.c **** /*
1306:../os_core/os_core.c **** ***************************************************************************************************
1307:../os_core/os_core.c **** *                                            STATISTICS TASK
1308:../os_core/os_core.c **** *
1309:../os_core/os_core.c **** * Description: This task is internal to uC/OS-II and is used to compute some statistics about the
1310:../os_core/os_core.c **** *              multitasking environment.  Specifically, OS_TaskStat() computes the CPU usage.
1311:../os_core/os_core.c **** *              CPU usage is determined by:
1312:../os_core/os_core.c **** *
1313:../os_core/os_core.c **** *                                          OSIdleCtr
1314:../os_core/os_core.c **** *                 OSCPUUsage = 100 * (1 - ------------)     (units are in %)
1315:../os_core/os_core.c **** *                                         OSIdleCtrMax
1316:../os_core/os_core.c **** *
1317:../os_core/os_core.c **** * Arguments  : parg     this pointer is not used at this time.
1318:../os_core/os_core.c **** *
1319:../os_core/os_core.c **** * Returns    : none
1320:../os_core/os_core.c **** *
1321:../os_core/os_core.c **** * Notes      : 1) This task runs at a priority level higher than the idle task.  In fact, it runs a
1322:../os_core/os_core.c **** *                 next higher priority, OS_IDLE_PRIO-1.
1323:../os_core/os_core.c **** *              2) You can disable this task by setting the configuration #define OS_TASK_STAT_EN to
1324:../os_core/os_core.c **** *              3) You MUST have at least a delay of 2/10 seconds to allow for the system to establi
1325:../os_core/os_core.c **** *                 maximum value for the idle counter.
1326:../os_core/os_core.c **** ***************************************************************************************************
1327:../os_core/os_core.c **** */
1328:../os_core/os_core.c **** 
1329:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
1330:../os_core/os_core.c **** void  OS_TaskStat (void *parg)
1331:../os_core/os_core.c **** {
 4351              		.loc 1 1331 0
 4352              		.cfi_startproc
 4353              		@ Function supports interworking.
 4354              		@ args = 0, pretend = 0, frame = 24
 4355              		@ frame_needed = 1, uses_anonymous_args = 0
 4356 1588 0DC0A0E1 		mov	ip, sp
 4357              	.LCFI56:
 4358              		.cfi_def_cfa_register 12
 4359 158c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4360 1590 04B04CE2 		sub	fp, ip, #4
 4361              		.cfi_offset 14, -8
 4362              		.cfi_offset 13, -12
 4363              		.cfi_offset 11, -16
 4364              	.LCFI57:
 4365              		.cfi_def_cfa 11, 4
 4366 1594 18D04DE2 		sub	sp, sp, #24
 4367 1598 20000BE5 		str	r0, [fp, #-32]
1332:../os_core/os_core.c ****     INT32U     run;
1333:../os_core/os_core.c ****     INT32U     max;
1334:../os_core/os_core.c ****     INT8S      usage;
1335:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
1336:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1337:../os_core/os_core.c **** 
1338:../os_core/os_core.c **** 
1339:../os_core/os_core.c **** 
1340:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
1341:../os_core/os_core.c **** #endif    
1342:../os_core/os_core.c ****     parg   = parg;                               /* Prevent compiler warning for not using 'parg'  
1343:../os_core/os_core.c ****     while (OSStatRdy == FALSE) {
 4368              		.loc 1 1343 0
 4369 159c 010000EA 		b	.L124
 4370              	.L125:
1344:../os_core/os_core.c ****         OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready             
 4371              		.loc 1 1344 0
 4372 15a0 1400A0E3 		mov	r0, #20
 4373 15a4 FEFFFFEB 		bl	OSTimeDly
 4374              	.L124:
1343:../os_core/os_core.c ****     while (OSStatRdy == FALSE) {
 4375              		.loc 1 1343 0 discriminator 1
 4376 15a8 F0309FE5 		ldr	r3, .L130
 4377 15ac 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4378 15b0 000053E3 		cmp	r3, #0
 4379 15b4 F9FFFF0A 		beq	.L125
1345:../os_core/os_core.c ****     }
1346:../os_core/os_core.c ****     max = OSIdleCtrMax / 100L;
 4380              		.loc 1 1346 0
 4381 15b8 E4309FE5 		ldr	r3, .L130+4
 4382 15bc 002093E5 		ldr	r2, [r3, #0]
 4383 15c0 E0309FE5 		ldr	r3, .L130+8
 4384 15c4 921383E0 		umull	r1, r3, r2, r3
 4385 15c8 A332A0E1 		mov	r3, r3, lsr #5
 4386 15cc 10300BE5 		str	r3, [fp, #-16]
 4387              	.L129:
1347:../os_core/os_core.c ****     for (;;) {
1348:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 4388              		.loc 1 1348 0
 4389              	@ 1348 "../os_core/os_core.c" 1
 4390 15d0 00000FE1 		mrs   r0, cpsr              
 4391 15d4 04002DE5 	stmfd sp!, {r0}             
 4392 15d8 C00080E3 	orr   r0, r0, #0b11000000   
 4393 15dc 00F021E1 	msr   cpsr_c, r0              
 4394              	@ 0 "" 2
1349:../os_core/os_core.c ****         OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past sec
 4395              		.loc 1 1349 0
 4396 15e0 C4309FE5 		ldr	r3, .L130+12
 4397 15e4 002093E5 		ldr	r2, [r3, #0]
 4398 15e8 C0309FE5 		ldr	r3, .L130+16
 4399 15ec 002083E5 		str	r2, [r3, #0]
1350:../os_core/os_core.c ****         run          = OSIdleCtr;
 4400              		.loc 1 1350 0
 4401 15f0 B4309FE5 		ldr	r3, .L130+12
 4402 15f4 003093E5 		ldr	r3, [r3, #0]
 4403 15f8 14300BE5 		str	r3, [fp, #-20]
1351:../os_core/os_core.c ****         OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second     
 4404              		.loc 1 1351 0
 4405 15fc A8309FE5 		ldr	r3, .L130+12
 4406 1600 0020A0E3 		mov	r2, #0
 4407 1604 002083E5 		str	r2, [r3, #0]
1352:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4408              		.loc 1 1352 0
 4409              	@ 1352 "../os_core/os_core.c" 1
 4410 1608 04009DE4 		ldmfd sp!, {r0}             
 4411 160c 00F021E1 	msr   cpsr_c, r0              
 4412              	@ 0 "" 2
1353:../os_core/os_core.c ****         if (max > 0L) {
 4413              		.loc 1 1353 0
 4414 1610 10301BE5 		ldr	r3, [fp, #-16]
 4415 1614 000053E3 		cmp	r3, #0
 4416 1618 1200000A 		beq	.L126
1354:../os_core/os_core.c ****             usage = (INT8S)(100L - run / max);
 4417              		.loc 1 1354 0
 4418 161c 14001BE5 		ldr	r0, [fp, #-20]
 4419 1620 10101BE5 		ldr	r1, [fp, #-16]
 4420 1624 FEFFFFEB 		bl	__aeabi_uidiv
 4421 1628 0030A0E1 		mov	r3, r0
 4422 162c FF3003E2 		and	r3, r3, #255
 4423 1630 643063E2 		rsb	r3, r3, #100
 4424 1634 FF3003E2 		and	r3, r3, #255
 4425 1638 15304BE5 		strb	r3, [fp, #-21]
1355:../os_core/os_core.c ****             if (usage >= 0) {                    /* Make sure we don't have a negative percentage  
 4426              		.loc 1 1355 0
 4427 163c D5315BE1 		ldrsb	r3, [fp, #-21]
 4428 1640 000053E3 		cmp	r3, #0
 4429 1644 030000BA 		blt	.L127
1356:../os_core/os_core.c ****                 OSCPUUsage = usage;
 4430              		.loc 1 1356 0
 4431 1648 64309FE5 		ldr	r3, .L130+20
 4432 164c 15205BE5 		ldrb	r2, [fp, #-21]
 4433 1650 0020C3E5 		strb	r2, [r3, #0]
 4434 1654 0C0000EA 		b	.L128
 4435              	.L127:
1357:../os_core/os_core.c ****             } else {
1358:../os_core/os_core.c ****                 OSCPUUsage = 0;
 4436              		.loc 1 1358 0
 4437 1658 54309FE5 		ldr	r3, .L130+20
 4438 165c 0020A0E3 		mov	r2, #0
 4439 1660 0020C3E5 		strb	r2, [r3, #0]
 4440 1664 080000EA 		b	.L128
 4441              	.L126:
1359:../os_core/os_core.c ****             }
1360:../os_core/os_core.c ****         } else {
1361:../os_core/os_core.c ****             OSCPUUsage = 0;
 4442              		.loc 1 1361 0
 4443 1668 44309FE5 		ldr	r3, .L130+20
 4444 166c 0020A0E3 		mov	r2, #0
 4445 1670 0020C3E5 		strb	r2, [r3, #0]
1362:../os_core/os_core.c ****             max        = OSIdleCtrMax / 100L;
 4446              		.loc 1 1362 0
 4447 1674 28309FE5 		ldr	r3, .L130+4
 4448 1678 002093E5 		ldr	r2, [r3, #0]
 4449 167c 24309FE5 		ldr	r3, .L130+8
 4450 1680 921383E0 		umull	r1, r3, r2, r3
 4451 1684 A332A0E1 		mov	r3, r3, lsr #5
 4452 1688 10300BE5 		str	r3, [fp, #-16]
 4453              	.L128:
1363:../os_core/os_core.c ****         }
1364:../os_core/os_core.c ****         OSTaskStatHook();                        /* Invoke user definable hook                     
 4454              		.loc 1 1364 0
 4455 168c FEFFFFEB 		bl	OSTaskStatHook
1365:../os_core/os_core.c **** #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
1366:../os_core/os_core.c ****         OS_TaskStatStkChk();                     /* Check the stacks for each task                 
 4456              		.loc 1 1366 0
 4457 1690 FEFFFFEB 		bl	OS_TaskStatStkChk
1367:../os_core/os_core.c **** #endif
1368:../os_core/os_core.c ****         OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second  
 4458              		.loc 1 1368 0
 4459 1694 0A00A0E3 		mov	r0, #10
 4460 1698 FEFFFFEB 		bl	OSTimeDly
1369:../os_core/os_core.c ****     }
 4461              		.loc 1 1369 0
 4462 169c CBFFFFEA 		b	.L129
 4463              	.L131:
 4464              		.align	2
 4465              	.L130:
 4466 16a0 00000000 		.word	OSStatRdy
 4467 16a4 00000000 		.word	OSIdleCtrMax
 4468 16a8 1F85EB51 		.word	1374389535
 4469 16ac 00000000 		.word	OSIdleCtr
 4470 16b0 00000000 		.word	OSIdleCtrRun
 4471 16b4 00000000 		.word	OSCPUUsage
 4472              		.cfi_endproc
 4473              	.LFE28:
 4475              		.align	2
 4476              		.global	OS_TaskStatStkChk
 4478              	OS_TaskStatStkChk:
 4479              	.LFB29:
1370:../os_core/os_core.c **** }
1371:../os_core/os_core.c **** #endif
1372:../os_core/os_core.c **** /*$PAGE*/
1373:../os_core/os_core.c **** /*
1374:../os_core/os_core.c **** ***************************************************************************************************
1375:../os_core/os_core.c **** *                                      CHECK ALL TASK STACKS
1376:../os_core/os_core.c **** *
1377:../os_core/os_core.c **** * Description: This function is called by OS_TaskStat() to check the stacks of each active task.
1378:../os_core/os_core.c **** *
1379:../os_core/os_core.c **** * Arguments  : none
1380:../os_core/os_core.c **** *
1381:../os_core/os_core.c **** * Returns    : none
1382:../os_core/os_core.c **** ***************************************************************************************************
1383:../os_core/os_core.c **** */
1384:../os_core/os_core.c **** 
1385:../os_core/os_core.c **** #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
1386:../os_core/os_core.c **** void  OS_TaskStatStkChk (void)
1387:../os_core/os_core.c **** {
 4480              		.loc 1 1387 0
 4481              		.cfi_startproc
 4482              		@ Function supports interworking.
 4483              		@ args = 0, pretend = 0, frame = 16
 4484              		@ frame_needed = 1, uses_anonymous_args = 0
 4485 16b8 0DC0A0E1 		mov	ip, sp
 4486              	.LCFI58:
 4487              		.cfi_def_cfa_register 12
 4488 16bc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4489 16c0 04B04CE2 		sub	fp, ip, #4
 4490              		.cfi_offset 14, -8
 4491              		.cfi_offset 13, -12
 4492              		.cfi_offset 11, -16
 4493              	.LCFI59:
 4494              		.cfi_def_cfa 11, 4
 4495 16c4 10D04DE2 		sub	sp, sp, #16
1388:../os_core/os_core.c ****     OS_TCB      *ptcb;
1389:../os_core/os_core.c ****     OS_STK_DATA  stk_data;
1390:../os_core/os_core.c ****     INT8U        err;
1391:../os_core/os_core.c ****     INT8U        prio;
1392:../os_core/os_core.c **** 
1393:../os_core/os_core.c **** 
1394:../os_core/os_core.c ****     for (prio = 0; prio <= OS_IDLE_PRIO; prio++) {
 4496              		.loc 1 1394 0
 4497 16c8 0030A0E3 		mov	r3, #0
 4498 16cc 0D304BE5 		strb	r3, [fp, #-13]
 4499 16d0 210000EA 		b	.L133
 4500              	.L135:
1395:../os_core/os_core.c ****         err = OSTaskStkChk(prio, &stk_data);
 4501              		.loc 1 1395 0
 4502 16d4 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 4503 16d8 1C304BE2 		sub	r3, fp, #28
 4504 16dc 0200A0E1 		mov	r0, r2
 4505 16e0 0310A0E1 		mov	r1, r3
 4506 16e4 FEFFFFEB 		bl	OSTaskStkChk
 4507 16e8 0030A0E1 		mov	r3, r0
 4508 16ec 0E304BE5 		strb	r3, [fp, #-14]
1396:../os_core/os_core.c ****         if (err == OS_NO_ERR) {
 4509              		.loc 1 1396 0
 4510 16f0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 4511 16f4 000053E3 		cmp	r3, #0
 4512 16f8 1400001A 		bne	.L134
1397:../os_core/os_core.c ****             ptcb = OSTCBPrioTbl[prio];
 4513              		.loc 1 1397 0
 4514 16fc 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 4515 1700 6C309FE5 		ldr	r3, .L136
 4516 1704 023193E7 		ldr	r3, [r3, r2, asl #2]
 4517 1708 14300BE5 		str	r3, [fp, #-20]
1398:../os_core/os_core.c ****             if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ..
 4518              		.loc 1 1398 0
 4519 170c 14301BE5 		ldr	r3, [fp, #-20]
 4520 1710 000053E3 		cmp	r3, #0
 4521 1714 0D00000A 		beq	.L134
1399:../os_core/os_core.c ****                 if (ptcb != (OS_TCB *)1) {                           /* ... still valid.           
 4522              		.loc 1 1399 0
 4523 1718 14301BE5 		ldr	r3, [fp, #-20]
 4524 171c 010053E3 		cmp	r3, #1
 4525 1720 0A00000A 		beq	.L134
1400:../os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
1401:../os_core/os_core.c ****                     #if OS_STK_GROWTH == 1
1402:../os_core/os_core.c ****                     ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 4526              		.loc 1 1402 0
 4527 1724 14301BE5 		ldr	r3, [fp, #-20]
 4528 1728 082093E5 		ldr	r2, [r3, #8]
 4529 172c 14301BE5 		ldr	r3, [fp, #-20]
 4530 1730 0C3093E5 		ldr	r3, [r3, #12]
 4531 1734 0331A0E1 		mov	r3, r3, asl #2
 4532 1738 032082E0 		add	r2, r2, r3
 4533 173c 14301BE5 		ldr	r3, [fp, #-20]
 4534 1740 402083E5 		str	r2, [r3, #64]
1403:../os_core/os_core.c ****                     #else
1404:../os_core/os_core.c ****                     ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
1405:../os_core/os_core.c ****                     #endif
1406:../os_core/os_core.c ****                     ptcb->OSTCBStkUsed = (INT32U)stk_data.OSUsed;    /* Store the number of bytes u
 4535              		.loc 1 1406 0
 4536 1744 18201BE5 		ldr	r2, [fp, #-24]
 4537 1748 14301BE5 		ldr	r3, [fp, #-20]
 4538 174c 442083E5 		str	r2, [r3, #68]
 4539              	.L134:
1394:../os_core/os_core.c ****     for (prio = 0; prio <= OS_IDLE_PRIO; prio++) {
 4540              		.loc 1 1394 0
 4541 1750 0D305BE5 		ldrb	r3, [fp, #-13]
 4542 1754 013083E2 		add	r3, r3, #1
 4543 1758 0D304BE5 		strb	r3, [fp, #-13]
 4544              	.L133:
1394:../os_core/os_core.c ****     for (prio = 0; prio <= OS_IDLE_PRIO; prio++) {
 4545              		.loc 1 1394 0 is_stmt 0 discriminator 1
 4546 175c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 4547 1760 3F0053E3 		cmp	r3, #63
 4548 1764 DAFFFF9A 		bls	.L135
1407:../os_core/os_core.c **** #endif
1408:../os_core/os_core.c ****                 }
1409:../os_core/os_core.c ****             }
1410:../os_core/os_core.c ****         }
1411:../os_core/os_core.c ****     }
1412:../os_core/os_core.c **** }
 4549              		.loc 1 1412 0 is_stmt 1
 4550 1768 0CD04BE2 		sub	sp, fp, #12
 4551 176c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4552 1770 1EFF2FE1 		bx	lr
 4553              	.L137:
 4554              		.align	2
 4555              	.L136:
 4556 1774 00000000 		.word	OSTCBPrioTbl
 4557              		.cfi_endproc
 4558              	.LFE29:
 4560              		.align	2
 4561              		.global	OS_TCBInit
 4563              	OS_TCBInit:
 4564              	.LFB30:
1413:../os_core/os_core.c **** #endif
1414:../os_core/os_core.c **** /*$PAGE*/
1415:../os_core/os_core.c **** /*
1416:../os_core/os_core.c **** ***************************************************************************************************
1417:../os_core/os_core.c **** *                                            INITIALIZE TCB
1418:../os_core/os_core.c **** *
1419:../os_core/os_core.c **** * Description: This function is internal to uC/OS-II and is used to initialize a Task Control Block
1420:../os_core/os_core.c **** *              a task is created (see OSTaskCreate() and OSTaskCreateExt()).
1421:../os_core/os_core.c **** *
1422:../os_core/os_core.c **** * Arguments  : prio          is the priority of the task being created
1423:../os_core/os_core.c **** *
1424:../os_core/os_core.c **** *              ptos          is a pointer to the task's top-of-stack assuming that the CPU register
1425:../os_core/os_core.c **** *                            have been placed on the stack.  Note that the top-of-stack corresponds
1426:../os_core/os_core.c **** *                            'high' memory location is OS_STK_GROWTH is set to 1 and a 'low' memory
1427:../os_core/os_core.c **** *                            location if OS_STK_GROWTH is set to 0.  Note that stack growth is CPU
1428:../os_core/os_core.c **** *                            specific.
1429:../os_core/os_core.c **** *
1430:../os_core/os_core.c **** *              pbos          is a pointer to the bottom of stack.  A NULL pointer is passed if call
1431:../os_core/os_core.c **** *                            'OSTaskCreate()'.
1432:../os_core/os_core.c **** *
1433:../os_core/os_core.c **** *              id            is the task's ID (0..65535)
1434:../os_core/os_core.c **** *
1435:../os_core/os_core.c **** *              stk_size      is the size of the stack (in 'stack units').  If the stack units are I
1436:../os_core/os_core.c **** *                            then, 'stk_size' contains the number of bytes for the stack.  If the s
1437:../os_core/os_core.c **** *                            units are INT32Us then, the stack contains '4 * stk_size' bytes.  The 
1438:../os_core/os_core.c **** *                            units are established by the #define constant OS_STK which is CPU
1439:../os_core/os_core.c **** *                            specific.  'stk_size' is 0 if called by 'OSTaskCreate()'.
1440:../os_core/os_core.c **** *
1441:../os_core/os_core.c **** *              pext          is a pointer to a user supplied memory area that is used to extend the
1442:../os_core/os_core.c **** *                            control block.  This allows you to store the contents of floating-poin
1443:../os_core/os_core.c **** *                            registers, MMU registers or anything else you could find useful during
1444:../os_core/os_core.c **** *                            context switch.  You can even assign a name to each task and store thi
1445:../os_core/os_core.c **** *                            in this TCB extension.  A NULL pointer is passed if called by OSTaskCr
1446:../os_core/os_core.c **** *
1447:../os_core/os_core.c **** *              opt           options as passed to 'OSTaskCreateExt()' or,
1448:../os_core/os_core.c **** *                            0 if called from 'OSTaskCreate()'.
1449:../os_core/os_core.c **** *
1450:../os_core/os_core.c **** * Returns    : OS_NO_ERR         if the call was successful
1451:../os_core/os_core.c **** *              OS_NO_MORE_TCB    if there are no more free TCBs to be allocated and thus, the task 
1452:../os_core/os_core.c **** *                                be created.
1453:../os_core/os_core.c **** *
1454:../os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
1455:../os_core/os_core.c **** ***************************************************************************************************
1456:../os_core/os_core.c **** */
1457:../os_core/os_core.c **** 
1458:../os_core/os_core.c **** INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, 
1459:../os_core/os_core.c **** {
 4565              		.loc 1 1459 0
 4566              		.cfi_startproc
 4567              		@ Function supports interworking.
 4568              		@ args = 12, pretend = 0, frame = 24
 4569              		@ frame_needed = 1, uses_anonymous_args = 0
 4570 1778 0DC0A0E1 		mov	ip, sp
 4571              	.LCFI60:
 4572              		.cfi_def_cfa_register 12
 4573 177c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4574 1780 04B04CE2 		sub	fp, ip, #4
 4575              		.cfi_offset 14, -8
 4576              		.cfi_offset 13, -12
 4577              		.cfi_offset 11, -16
 4578              	.LCFI61:
 4579              		.cfi_def_cfa 11, 4
 4580 1784 18D04DE2 		sub	sp, sp, #24
 4581 1788 1C100BE5 		str	r1, [fp, #-28]
 4582 178c 20200BE5 		str	r2, [fp, #-32]
 4583 1790 0020A0E1 		mov	r2, r0
 4584 1794 15204BE5 		strb	r2, [fp, #-21]
 4585 1798 B2324BE1 		strh	r3, [fp, #-34]	@ movhi
1460:../os_core/os_core.c ****     OS_TCB    *ptcb;
1461:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
1462:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1463:../os_core/os_core.c **** 
1464:../os_core/os_core.c **** 
1465:../os_core/os_core.c **** 
1466:../os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
1467:../os_core/os_core.c **** #endif    
1468:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 4586              		.loc 1 1468 0
 4587              	@ 1468 "../os_core/os_core.c" 1
 4588 179c 00000FE1 		mrs   r0, cpsr              
 4589 17a0 04002DE5 	stmfd sp!, {r0}             
 4590 17a4 C00080E3 	orr   r0, r0, #0b11000000   
 4591 17a8 00F021E1 	msr   cpsr_c, r0              
 4592              	@ 0 "" 2
1469:../os_core/os_core.c ****     ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list
 4593              		.loc 1 1469 0
 4594 17ac 88329FE5 		ldr	r3, .L142
 4595 17b0 003093E5 		ldr	r3, [r3, #0]
 4596 17b4 10300BE5 		str	r3, [fp, #-16]
1470:../os_core/os_core.c ****     if (ptcb != (OS_TCB *)0) {
 4597              		.loc 1 1470 0
 4598 17b8 10301BE5 		ldr	r3, [fp, #-16]
 4599 17bc 000053E3 		cmp	r3, #0
 4600 17c0 9600000A 		beq	.L139
1471:../os_core/os_core.c ****         OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list      
 4601              		.loc 1 1471 0
 4602 17c4 10301BE5 		ldr	r3, [fp, #-16]
 4603 17c8 142093E5 		ldr	r2, [r3, #20]
 4604 17cc 68329FE5 		ldr	r3, .L142
 4605 17d0 002083E5 		str	r2, [r3, #0]
1472:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4606              		.loc 1 1472 0
 4607              	@ 1472 "../os_core/os_core.c" 1
 4608 17d4 04009DE4 		ldmfd sp!, {r0}             
 4609 17d8 00F021E1 	msr   cpsr_c, r0              
 4610              	@ 0 "" 2
1473:../os_core/os_core.c ****         ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB            
 4611              		.loc 1 1473 0
 4612 17dc 10301BE5 		ldr	r3, [fp, #-16]
 4613 17e0 1C201BE5 		ldr	r2, [fp, #-28]
 4614 17e4 002083E5 		str	r2, [r3, #0]
1474:../os_core/os_core.c ****         ptcb->OSTCBPrio      = prio;                       /* Load task priority into TCB          
 4615              		.loc 1 1474 0
 4616 17e8 10301BE5 		ldr	r3, [fp, #-16]
 4617 17ec 15205BE5 		ldrb	r2, [fp, #-21]
 4618 17f0 2E20C3E5 		strb	r2, [r3, #46]
1475:../os_core/os_core.c ****         ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                 
 4619              		.loc 1 1475 0
 4620 17f4 10301BE5 		ldr	r3, [fp, #-16]
 4621 17f8 0020A0E3 		mov	r2, #0
 4622 17fc 2C20C3E5 		strb	r2, [r3, #44]
1476:../os_core/os_core.c ****         ptcb->OSTCBPendTO    = FALSE;                      /* Clear the Pend timeout flag          
 4623              		.loc 1 1476 0
 4624 1800 10301BE5 		ldr	r3, [fp, #-16]
 4625 1804 0020A0E3 		mov	r2, #0
 4626 1808 2D20C3E5 		strb	r2, [r3, #45]
1477:../os_core/os_core.c ****         ptcb->OSTCBDly       = 0;                          /* Task is not delayed                  
 4627              		.loc 1 1477 0
 4628 180c 10301BE5 		ldr	r3, [fp, #-16]
 4629 1810 0020A0E3 		mov	r2, #0
 4630 1814 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
1478:../os_core/os_core.c **** 
1479:../os_core/os_core.c **** #if OS_TASK_CREATE_EXT_EN > 0
1480:../os_core/os_core.c ****         ptcb->OSTCBExtPtr    = pext;                       /* Store pointer to TCB extension       
 4631              		.loc 1 1480 0
 4632 1818 10301BE5 		ldr	r3, [fp, #-16]
 4633 181c 08209BE5 		ldr	r2, [fp, #8]
 4634 1820 042083E5 		str	r2, [r3, #4]
1481:../os_core/os_core.c ****         ptcb->OSTCBStkSize   = stk_size;                   /* Store stack size                     
 4635              		.loc 1 1481 0
 4636 1824 10301BE5 		ldr	r3, [fp, #-16]
 4637 1828 04209BE5 		ldr	r2, [fp, #4]
 4638 182c 0C2083E5 		str	r2, [r3, #12]
1482:../os_core/os_core.c ****         ptcb->OSTCBStkBottom = pbos;                       /* Store pointer to bottom of stack     
 4639              		.loc 1 1482 0
 4640 1830 10301BE5 		ldr	r3, [fp, #-16]
 4641 1834 20201BE5 		ldr	r2, [fp, #-32]
 4642 1838 082083E5 		str	r2, [r3, #8]
1483:../os_core/os_core.c ****         ptcb->OSTCBOpt       = opt;                        /* Store task options                   
 4643              		.loc 1 1483 0
 4644 183c 10301BE5 		ldr	r3, [fp, #-16]
 4645 1840 BC20DBE1 		ldrh	r2, [fp, #12]	@ movhi
 4646 1844 B021C3E1 		strh	r2, [r3, #16]	@ movhi
1484:../os_core/os_core.c ****         ptcb->OSTCBId        = id;                         /* Store task ID                        
 4647              		.loc 1 1484 0
 4648 1848 10301BE5 		ldr	r3, [fp, #-16]
 4649 184c B2225BE1 		ldrh	r2, [fp, #-34]	@ movhi
 4650 1850 B221C3E1 		strh	r2, [r3, #18]	@ movhi
1485:../os_core/os_core.c **** #else
1486:../os_core/os_core.c ****         pext                 = pext;                       /* Prevent compiler warning if not used 
1487:../os_core/os_core.c ****         stk_size             = stk_size;
1488:../os_core/os_core.c ****         pbos                 = pbos;
1489:../os_core/os_core.c ****         opt                  = opt;
1490:../os_core/os_core.c ****         id                   = id;
1491:../os_core/os_core.c **** #endif
1492:../os_core/os_core.c **** 
1493:../os_core/os_core.c **** #if OS_TASK_DEL_EN > 0
1494:../os_core/os_core.c ****         ptcb->OSTCBDelReq    = OS_NO_ERR;
 4651              		.loc 1 1494 0
 4652 1854 10301BE5 		ldr	r3, [fp, #-16]
 4653 1858 0020A0E3 		mov	r2, #0
 4654 185c 3320C3E5 		strb	r2, [r3, #51]
1495:../os_core/os_core.c **** #endif
1496:../os_core/os_core.c **** 
1497:../os_core/os_core.c ****         ptcb->OSTCBY         = (INT8U)(prio >> 3);         /* Pre-compute X, Y, BitX and BitY      
 4655              		.loc 1 1497 0
 4656 1860 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 4657 1864 A331A0E1 		mov	r3, r3, lsr #3
 4658 1868 FF2003E2 		and	r2, r3, #255
 4659 186c 10301BE5 		ldr	r3, [fp, #-16]
 4660 1870 3020C3E5 		strb	r2, [r3, #48]
1498:../os_core/os_core.c ****         ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
 4661              		.loc 1 1498 0
 4662 1874 10301BE5 		ldr	r3, [fp, #-16]
 4663 1878 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 4664 187c BC219FE5 		ldr	r2, .L142+4
 4665 1880 0320D2E7 		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 4666 1884 10301BE5 		ldr	r3, [fp, #-16]
 4667 1888 3220C3E5 		strb	r2, [r3, #50]
1499:../os_core/os_core.c ****         ptcb->OSTCBX         = (INT8U)(prio & 0x07);
 4668              		.loc 1 1499 0
 4669 188c 15305BE5 		ldrb	r3, [fp, #-21]
 4670 1890 073003E2 		and	r3, r3, #7
 4671 1894 FF2003E2 		and	r2, r3, #255
 4672 1898 10301BE5 		ldr	r3, [fp, #-16]
 4673 189c 2F20C3E5 		strb	r2, [r3, #47]
1500:../os_core/os_core.c ****         ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
 4674              		.loc 1 1500 0
 4675 18a0 10301BE5 		ldr	r3, [fp, #-16]
 4676 18a4 2F30D3E5 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 4677 18a8 90219FE5 		ldr	r2, .L142+4
 4678 18ac 0320D2E7 		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 4679 18b0 10301BE5 		ldr	r3, [fp, #-16]
 4680 18b4 3120C3E5 		strb	r2, [r3, #49]
1501:../os_core/os_core.c **** 
1502:../os_core/os_core.c **** #if OS_EVENT_EN
1503:../os_core/os_core.c ****         ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event      
 4681              		.loc 1 1503 0
 4682 18b8 10301BE5 		ldr	r3, [fp, #-16]
 4683 18bc 0020A0E3 		mov	r2, #0
 4684 18c0 1C2083E5 		str	r2, [r3, #28]
1504:../os_core/os_core.c **** #endif
1505:../os_core/os_core.c **** 
1506:../os_core/os_core.c **** #if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
1507:../os_core/os_core.c ****         ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag 
 4685              		.loc 1 1507 0
 4686 18c4 10301BE5 		ldr	r3, [fp, #-16]
 4687 18c8 0020A0E3 		mov	r2, #0
 4688 18cc 242083E5 		str	r2, [r3, #36]
1508:../os_core/os_core.c **** #endif
1509:../os_core/os_core.c **** 
1510:../os_core/os_core.c **** #if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
1511:../os_core/os_core.c ****         ptcb->OSTCBMsg       = (void *)0;                  /* No message received                  
 4689              		.loc 1 1511 0
 4690 18d0 10301BE5 		ldr	r3, [fp, #-16]
 4691 18d4 0020A0E3 		mov	r2, #0
 4692 18d8 202083E5 		str	r2, [r3, #32]
1512:../os_core/os_core.c **** #endif
1513:../os_core/os_core.c **** 
1514:../os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
1515:../os_core/os_core.c ****         ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables       
 4693              		.loc 1 1515 0
 4694 18dc 10301BE5 		ldr	r3, [fp, #-16]
 4695 18e0 0020A0E3 		mov	r2, #0
 4696 18e4 342083E5 		str	r2, [r3, #52]
1516:../os_core/os_core.c ****         ptcb->OSTCBCyclesStart = 0L;
 4697              		.loc 1 1516 0
 4698 18e8 10301BE5 		ldr	r3, [fp, #-16]
 4699 18ec 0020A0E3 		mov	r2, #0
 4700 18f0 3C2083E5 		str	r2, [r3, #60]
1517:../os_core/os_core.c ****         ptcb->OSTCBCyclesTot   = 0L;
 4701              		.loc 1 1517 0
 4702 18f4 10301BE5 		ldr	r3, [fp, #-16]
 4703 18f8 0020A0E3 		mov	r2, #0
 4704 18fc 382083E5 		str	r2, [r3, #56]
1518:../os_core/os_core.c ****         ptcb->OSTCBStkBase     = (OS_STK *)0;
 4705              		.loc 1 1518 0
 4706 1900 10301BE5 		ldr	r3, [fp, #-16]
 4707 1904 0020A0E3 		mov	r2, #0
 4708 1908 402083E5 		str	r2, [r3, #64]
1519:../os_core/os_core.c ****         ptcb->OSTCBStkUsed     = 0L;
 4709              		.loc 1 1519 0
 4710 190c 10301BE5 		ldr	r3, [fp, #-16]
 4711 1910 0020A0E3 		mov	r2, #0
 4712 1914 442083E5 		str	r2, [r3, #68]
1520:../os_core/os_core.c **** #endif
1521:../os_core/os_core.c **** 
1522:../os_core/os_core.c **** #if OS_TASK_NAME_SIZE > 1
1523:../os_core/os_core.c ****         ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation        
 4713              		.loc 1 1523 0
 4714 1918 10301BE5 		ldr	r3, [fp, #-16]
 4715 191c 3F20A0E3 		mov	r2, #63
 4716 1920 4820C3E5 		strb	r2, [r3, #72]
1524:../os_core/os_core.c ****         ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4717              		.loc 1 1524 0
 4718 1924 10301BE5 		ldr	r3, [fp, #-16]
 4719 1928 0020A0E3 		mov	r2, #0
 4720 192c 4920C3E5 		strb	r2, [r3, #73]
1525:../os_core/os_core.c **** #endif
1526:../os_core/os_core.c **** 
1527:../os_core/os_core.c **** #if OS_VERSION >= 204
1528:../os_core/os_core.c ****         OSTCBInitHook(ptcb);
 4721              		.loc 1 1528 0
 4722 1930 10001BE5 		ldr	r0, [fp, #-16]
 4723 1934 FEFFFFEB 		bl	OSTCBInitHook
1529:../os_core/os_core.c **** #endif
1530:../os_core/os_core.c **** 
1531:../os_core/os_core.c ****         OSTaskCreateHook(ptcb);                            /* Call user defined hook               
 4724              		.loc 1 1531 0
 4725 1938 10001BE5 		ldr	r0, [fp, #-16]
 4726 193c FEFFFFEB 		bl	OSTaskCreateHook
1532:../os_core/os_core.c ****         
1533:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 4727              		.loc 1 1533 0
 4728              	@ 1533 "../os_core/os_core.c" 1
 4729 1940 00000FE1 		mrs   r0, cpsr              
 4730 1944 04002DE5 	stmfd sp!, {r0}             
 4731 1948 C00080E3 	orr   r0, r0, #0b11000000   
 4732 194c 00F021E1 	msr   cpsr_c, r0              
 4733              	@ 0 "" 2
1534:../os_core/os_core.c ****         OSTCBPrioTbl[prio] = ptcb;
 4734              		.loc 1 1534 0
 4735 1950 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 4736 1954 E8309FE5 		ldr	r3, .L142+8
 4737 1958 10101BE5 		ldr	r1, [fp, #-16]
 4738 195c 021183E7 		str	r1, [r3, r2, asl #2]
1535:../os_core/os_core.c ****         ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                  
 4739              		.loc 1 1535 0
 4740 1960 E0309FE5 		ldr	r3, .L142+12
 4741 1964 002093E5 		ldr	r2, [r3, #0]
 4742 1968 10301BE5 		ldr	r3, [fp, #-16]
 4743 196c 142083E5 		str	r2, [r3, #20]
1536:../os_core/os_core.c ****         ptcb->OSTCBPrev    = (OS_TCB *)0;
 4744              		.loc 1 1536 0
 4745 1970 10301BE5 		ldr	r3, [fp, #-16]
 4746 1974 0020A0E3 		mov	r2, #0
 4747 1978 182083E5 		str	r2, [r3, #24]
1537:../os_core/os_core.c ****         if (OSTCBList != (OS_TCB *)0) {
 4748              		.loc 1 1537 0
 4749 197c C4309FE5 		ldr	r3, .L142+12
 4750 1980 003093E5 		ldr	r3, [r3, #0]
 4751 1984 000053E3 		cmp	r3, #0
 4752 1988 0300000A 		beq	.L140
1538:../os_core/os_core.c ****             OSTCBList->OSTCBPrev = ptcb;
 4753              		.loc 1 1538 0
 4754 198c B4309FE5 		ldr	r3, .L142+12
 4755 1990 003093E5 		ldr	r3, [r3, #0]
 4756 1994 10201BE5 		ldr	r2, [fp, #-16]
 4757 1998 182083E5 		str	r2, [r3, #24]
 4758              	.L140:
1539:../os_core/os_core.c ****         }
1540:../os_core/os_core.c ****         OSTCBList               = ptcb;
 4759              		.loc 1 1540 0
 4760 199c A4309FE5 		ldr	r3, .L142+12
 4761 19a0 10201BE5 		ldr	r2, [fp, #-16]
 4762 19a4 002083E5 		str	r2, [r3, #0]
1541:../os_core/os_core.c ****         OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run               
 4763              		.loc 1 1541 0
 4764 19a8 10301BE5 		ldr	r3, [fp, #-16]
 4765 19ac 3220D3E5 		ldrb	r2, [r3, #50]	@ zero_extendqisi2
 4766 19b0 94309FE5 		ldr	r3, .L142+16
 4767 19b4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4768 19b8 033082E1 		orr	r3, r2, r3
 4769 19bc FF2003E2 		and	r2, r3, #255
 4770 19c0 84309FE5 		ldr	r3, .L142+16
 4771 19c4 0020C3E5 		strb	r2, [r3, #0]
1542:../os_core/os_core.c ****         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4772              		.loc 1 1542 0
 4773 19c8 10301BE5 		ldr	r3, [fp, #-16]
 4774 19cc 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 4775 19d0 10201BE5 		ldr	r2, [fp, #-16]
 4776 19d4 3020D2E5 		ldrb	r2, [r2, #48]	@ zero_extendqisi2
 4777 19d8 70109FE5 		ldr	r1, .L142+20
 4778 19dc 0210D1E7 		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 4779 19e0 10201BE5 		ldr	r2, [fp, #-16]
 4780 19e4 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 4781 19e8 022081E1 		orr	r2, r1, r2
 4782 19ec FF1002E2 		and	r1, r2, #255
 4783 19f0 58209FE5 		ldr	r2, .L142+20
 4784 19f4 0310C2E7 		strb	r1, [r2, r3]
1543:../os_core/os_core.c ****         OSTaskCtr++;                                       /* Increment the #tasks counter         
 4785              		.loc 1 1543 0
 4786 19f8 54309FE5 		ldr	r3, .L142+24
 4787 19fc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4788 1a00 013083E2 		add	r3, r3, #1
 4789 1a04 FF2003E2 		and	r2, r3, #255
 4790 1a08 44309FE5 		ldr	r3, .L142+24
 4791 1a0c 0020C3E5 		strb	r2, [r3, #0]
1544:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4792              		.loc 1 1544 0
 4793              	@ 1544 "../os_core/os_core.c" 1
 4794 1a10 04009DE4 		ldmfd sp!, {r0}             
 4795 1a14 00F021E1 	msr   cpsr_c, r0              
 4796              	@ 0 "" 2
1545:../os_core/os_core.c ****         return (OS_NO_ERR);
 4797              		.loc 1 1545 0
 4798 1a18 0030A0E3 		mov	r3, #0
 4799 1a1c 020000EA 		b	.L141
 4800              	.L139:
1546:../os_core/os_core.c ****     }
1547:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 4801              		.loc 1 1547 0
 4802              	@ 1547 "../os_core/os_core.c" 1
 4803 1a20 04009DE4 		ldmfd sp!, {r0}             
 4804 1a24 00F021E1 	msr   cpsr_c, r0              
 4805              	@ 0 "" 2
1548:../os_core/os_core.c ****     return (OS_NO_MORE_TCB);
 4806              		.loc 1 1548 0
 4807 1a28 4630A0E3 		mov	r3, #70
 4808              	.L141:
1549:../os_core/os_core.c **** }
 4809              		.loc 1 1549 0
 4810 1a2c 0300A0E1 		mov	r0, r3
 4811 1a30 0CD04BE2 		sub	sp, fp, #12
 4812 1a34 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4813 1a38 1EFF2FE1 		bx	lr
 4814              	.L143:
 4815              		.align	2
 4816              	.L142:
 4817 1a3c 00000000 		.word	OSTCBFreeList
 4818 1a40 00000000 		.word	OSMapTbl
 4819 1a44 00000000 		.word	OSTCBPrioTbl
 4820 1a48 00000000 		.word	OSTCBList
 4821 1a4c 00000000 		.word	OSRdyGrp
 4822 1a50 00000000 		.word	OSRdyTbl
 4823 1a54 00000000 		.word	OSTaskCtr
 4824              		.cfi_endproc
 4825              	.LFE30:
 4827              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 os_core.c
                            *COM*:00000004 OSCtxSwCtr
                            *COM*:00000004 OSEventFreeList
                            *COM*:000001e0 OSEventTbl
                            *COM*:000000dc OSFlagTbl
                            *COM*:00000004 OSFlagFreeList
                            *COM*:00000001 OSCPUUsage
                            *COM*:00000004 OSIdleCtrMax
                            *COM*:00000004 OSIdleCtrRun
                            *COM*:00000001 OSStatRdy
                            *COM*:00000800 OSTaskStatStk
                            *COM*:00000001 OSIntNesting
                            *COM*:00000001 OSLockNesting
                            *COM*:00000001 OSPrioCur
                            *COM*:00000001 OSPrioHighRdy
                            *COM*:00000001 OSRdyGrp
                            *COM*:00000008 OSRdyTbl
                            *COM*:00000001 OSRunning
                            *COM*:00000001 OSTaskCtr
                            *COM*:00000004 OSIdleCtr
                            *COM*:00000800 OSTaskIdleStk
                            *COM*:00000004 OSTCBCur
                            *COM*:00000004 OSTCBFreeList
                            *COM*:00000004 OSTCBHighRdy
                            *COM*:00000004 OSTCBList
                            *COM*:00000100 OSTCBPrioTbl
                            *COM*:000008f0 OSTCBTbl
                            *COM*:00000001 OSTickStepState
                            *COM*:00000004 OSMemFreeList
                            *COM*:00000104 OSMemTbl
                            *COM*:00000004 OSQFreeList
                            *COM*:00000060 OSQTbl
                            *COM*:00000004 OSTime
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:1674   .rodata:00000000 OSMapTbl
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:1671   .rodata:00000000 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:1687   .rodata:00000008 OSUnMapTbl
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:1945   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:1948   .text:00000000 OSEventNameGet
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4180   .text:00001458 OS_StrCopy
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2060   .text:000000f0 OSEventNameSet
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4244   .text:000014e0 OS_StrLen
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2187   .text:000001fc OSInit
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3598   .text:00000f34 OS_InitMisc
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3677   .text:00000fec OS_InitRdyList
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3857   .text:00001170 OS_InitTCBList
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3496   .text:00000e44 OS_InitEventList
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3757   .text:000010a0 OS_InitTaskIdle
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3807   .text:00001108 OS_InitTaskStat
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2238   .text:00000244 OSIntEnter
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2280   .text:00000294 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2285   .text:0000029c $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2288   .text:0000029c OSIntExit
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2403   .text:000003cc $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2417   .text:000003f8 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2420   .text:000003f8 OSSchedLock
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2475   .text:00000460 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2480   .text:00000468 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2483   .text:00000468 OSSchedUnlock
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4068   .text:00001338 OS_Sched
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2570   .text:00000518 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2576   .text:00000524 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2579   .text:00000524 OSStart
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2652   .text:000005dc $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2664   .text:00000600 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2667   .text:00000600 OSStatInit
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2734   .text:00000680 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2740   .text:0000068c $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2743   .text:0000068c OSTimeTick
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2944   .text:00000890 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2953   .text:000008a8 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2956   .text:000008a8 OSVersion
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:2986   .text:000008c8 OS_Dummy
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3013   .text:000008e0 OS_EventTaskRdy
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3177   .text:00000ad8 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3185   .text:00000aec $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3188   .text:00000aec OS_EventTaskWait
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3297   .text:00000c38 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3303   .text:00000c44 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3306   .text:00000c44 OS_EventTO
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3400   .text:00000d54 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3404   .text:00000d58 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3407   .text:00000d58 OS_EventWaitListInit
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3963   .text:0000126c OS_MemClr
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3590   .text:00000f28 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3596   .text:00000f34 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3662   .text:00000fc4 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3675   .text:00000fec $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3746   .text:00001088 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3755   .text:000010a0 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3798   .text:000010f8 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4296   .text:0000153c OS_TaskIdle
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3805   .text:00001108 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3848   .text:00001160 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4349   .text:00001588 OS_TaskStat
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3855   .text:00001170 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3952   .text:00001258 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:3960   .text:0000126c $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4013   .text:000012c8 OS_MemCopy
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4164   .text:00001430 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4177   .text:00001458 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4341   .text:00001584 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4346   .text:00001588 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4478   .text:000016b8 OS_TaskStatStkChk
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4466   .text:000016a0 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4475   .text:000016b8 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4556   .text:00001774 $d
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4560   .text:00001778 $a
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4563   .text:00001778 OS_TCBInit
C:\Users\USUARI~1\AppData\Local\Temp\cc15GlfJ.s:4817   .text:00001a3c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
OSInitHookBegin
OS_FlagInit
OS_MemInit
OS_QInit
OSInitHookEnd
OSDebugInit
OSIntCtxSw
OSStartHighRdy
OSTimeDly
OSTimeTickHook
OSTaskCreateExt
OSCtxSw
OSTaskIdleHook
__aeabi_uidiv
OSTaskStatHook
OSTaskStkChk
OSTCBInitHook
OSTaskCreateHook
