   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"os_mbox.c"
  21              	.Ltext0:
  22              		.file 1 "../os_core/os_mbox.c"
 1635              		.align	2
 1636              		.global	OSMboxAccept
 1638              	OSMboxAccept:
 1639              	.LFB0:
   1:../os_core/os_mbox.c **** /*
   2:../os_core/os_mbox.c **** ***************************************************************************************************
   3:../os_core/os_mbox.c **** *                                                uC/OS-II
   4:../os_core/os_mbox.c **** *                                          The Real-Time Kernel
   5:../os_core/os_mbox.c **** *                                       MESSAGE MAILBOX MANAGEMENT
   6:../os_core/os_mbox.c **** *
   7:../os_core/os_mbox.c **** *                          (c) Copyright 1992-2003, Jean J. Labrosse, Weston, FL
   8:../os_core/os_mbox.c **** *                                           All Rights Reserved
   9:../os_core/os_mbox.c **** *
  10:../os_core/os_mbox.c **** * File    : OS_MBOX.C
  11:../os_core/os_mbox.c **** * By      : Jean J. Labrosse
  12:../os_core/os_mbox.c **** * Version : V2.76
  13:../os_core/os_mbox.c **** ***************************************************************************************************
  14:../os_core/os_mbox.c **** */
  15:../os_core/os_mbox.c **** 
  16:../os_core/os_mbox.c **** #ifndef  OS_MASTER_FILE
  17:../os_core/os_mbox.c **** #include "ucos_ii.h"
  18:../os_core/os_mbox.c **** #endif
  19:../os_core/os_mbox.c **** 
  20:../os_core/os_mbox.c **** #if OS_MBOX_EN > 0
  21:../os_core/os_mbox.c **** /*
  22:../os_core/os_mbox.c **** ***************************************************************************************************
  23:../os_core/os_mbox.c **** *                                     ACCEPT MESSAGE FROM MAILBOX
  24:../os_core/os_mbox.c **** *
  25:../os_core/os_mbox.c **** * Description: This function checks the mailbox to see if a message is available.  Unlike OSMboxPen
  26:../os_core/os_mbox.c **** *              OSMboxAccept() does not suspend the calling task if a message is not available.
  27:../os_core/os_mbox.c **** *
  28:../os_core/os_mbox.c **** * Arguments  : pevent        is a pointer to the event control block
  29:../os_core/os_mbox.c **** *
  30:../os_core/os_mbox.c **** * Returns    : != (void *)0  is the message in the mailbox if one is available.  The mailbox is cle
  31:../os_core/os_mbox.c **** *                            so the next time OSMboxAccept() is called, the mailbox will be empty.
  32:../os_core/os_mbox.c **** *              == (void *)0  if the mailbox is empty or,
  33:../os_core/os_mbox.c **** *                            if 'pevent' is a NULL pointer or,
  34:../os_core/os_mbox.c **** *                            if you didn't pass the proper event pointer.
  35:../os_core/os_mbox.c **** ***************************************************************************************************
  36:../os_core/os_mbox.c **** */
  37:../os_core/os_mbox.c **** 
  38:../os_core/os_mbox.c **** #if OS_MBOX_ACCEPT_EN > 0
  39:../os_core/os_mbox.c **** void  *OSMboxAccept (OS_EVENT *pevent)
  40:../os_core/os_mbox.c **** {
 1640              		.loc 1 40 0
 1641              		.cfi_startproc
 1642              		@ Function supports interworking.
 1643              		@ args = 0, pretend = 0, frame = 16
 1644              		@ frame_needed = 1, uses_anonymous_args = 0
 1645 0000 0DC0A0E1 		mov	ip, sp
 1646              	.LCFI0:
 1647              		.cfi_def_cfa_register 12
 1648 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1649 0008 04B04CE2 		sub	fp, ip, #4
 1650              		.cfi_offset 14, -8
 1651              		.cfi_offset 13, -12
 1652              		.cfi_offset 11, -16
 1653              	.LCFI1:
 1654              		.cfi_def_cfa 11, 4
 1655 000c 10D04DE2 		sub	sp, sp, #16
 1656 0010 18000BE5 		str	r0, [fp, #-24]
  41:../os_core/os_mbox.c ****     void      *msg;
  42:../os_core/os_mbox.c **** #if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status regist
  43:../os_core/os_mbox.c ****     OS_CPU_SR  cpu_sr;
  44:../os_core/os_mbox.c **** 
  45:../os_core/os_mbox.c **** 
  46:../os_core/os_mbox.c **** 
  47:../os_core/os_mbox.c ****     cpu_sr = 0;                                           /* Prevent compiler warning              
  48:../os_core/os_mbox.c **** #endif    
  49:../os_core/os_mbox.c **** #if OS_ARG_CHK_EN > 0
  50:../os_core/os_mbox.c ****     if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                     
 1657              		.loc 1 50 0
 1658 0014 18301BE5 		ldr	r3, [fp, #-24]
 1659 0018 000053E3 		cmp	r3, #0
 1660 001c 0100001A 		bne	.L2
  51:../os_core/os_mbox.c ****         return ((void *)0);
 1661              		.loc 1 51 0
 1662 0020 0030A0E3 		mov	r3, #0
 1663 0024 120000EA 		b	.L3
 1664              	.L2:
  52:../os_core/os_mbox.c ****     }
  53:../os_core/os_mbox.c **** #endif
  54:../os_core/os_mbox.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type             
 1665              		.loc 1 54 0
 1666 0028 18301BE5 		ldr	r3, [fp, #-24]
 1667 002c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1668 0030 010053E3 		cmp	r3, #1
 1669 0034 0100000A 		beq	.L4
  55:../os_core/os_mbox.c ****         return ((void *)0);
 1670              		.loc 1 55 0
 1671 0038 0030A0E3 		mov	r3, #0
 1672 003c 0C0000EA 		b	.L3
 1673              	.L4:
  56:../os_core/os_mbox.c ****     }
  57:../os_core/os_mbox.c ****     OS_ENTER_CRITICAL();
 1674              		.loc 1 57 0
 1675              	@ 57 "../os_core/os_mbox.c" 1
 1676 0040 00000FE1 		mrs   r0, cpsr              
 1677 0044 04002DE5 	stmfd sp!, {r0}             
 1678 0048 C00080E3 	orr   r0, r0, #0b11000000   
 1679 004c 00F021E1 	msr   cpsr_c, r0              
 1680              	@ 0 "" 2
  58:../os_core/os_mbox.c ****     msg                = pevent->OSEventPtr;
 1681              		.loc 1 58 0
 1682 0050 18301BE5 		ldr	r3, [fp, #-24]
 1683 0054 043093E5 		ldr	r3, [r3, #4]
 1684 0058 10300BE5 		str	r3, [fp, #-16]
  59:../os_core/os_mbox.c ****     pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                     
 1685              		.loc 1 59 0
 1686 005c 18301BE5 		ldr	r3, [fp, #-24]
 1687 0060 0020A0E3 		mov	r2, #0
 1688 0064 042083E5 		str	r2, [r3, #4]
  60:../os_core/os_mbox.c ****     OS_EXIT_CRITICAL();
 1689              		.loc 1 60 0
 1690              	@ 60 "../os_core/os_mbox.c" 1
 1691 0068 04009DE4 		ldmfd sp!, {r0}             
 1692 006c 00F021E1 	msr   cpsr_c, r0              
 1693              	@ 0 "" 2
  61:../os_core/os_mbox.c ****     return (msg);                                         /* Return the message received (or NULL) 
 1694              		.loc 1 61 0
 1695 0070 10301BE5 		ldr	r3, [fp, #-16]
 1696              	.L3:
  62:../os_core/os_mbox.c **** }
 1697              		.loc 1 62 0
 1698 0074 0300A0E1 		mov	r0, r3
 1699 0078 0CD04BE2 		sub	sp, fp, #12
 1700 007c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1701 0080 1EFF2FE1 		bx	lr
 1702              		.cfi_endproc
 1703              	.LFE0:
 1705              		.align	2
 1706              		.global	OSMboxCreate
 1708              	OSMboxCreate:
 1709              	.LFB1:
  63:../os_core/os_mbox.c **** #endif
  64:../os_core/os_mbox.c **** /*$PAGE*/
  65:../os_core/os_mbox.c **** /*
  66:../os_core/os_mbox.c **** ***************************************************************************************************
  67:../os_core/os_mbox.c **** *                                        CREATE A MESSAGE MAILBOX
  68:../os_core/os_mbox.c **** *
  69:../os_core/os_mbox.c **** * Description: This function creates a message mailbox if free event control blocks are available.
  70:../os_core/os_mbox.c **** *
  71:../os_core/os_mbox.c **** * Arguments  : msg           is a pointer to a message that you wish to deposit in the mailbox.  If
  72:../os_core/os_mbox.c **** *                            you set this value to the NULL pointer (i.e. (void *)0) then the mailb
  73:../os_core/os_mbox.c **** *                            will be considered empty.
  74:../os_core/os_mbox.c **** *
  75:../os_core/os_mbox.c **** * Returns    : != (OS_EVENT *)0  is a pointer to the event control clock (OS_EVENT) associated with
  76:../os_core/os_mbox.c **** *                                created mailbox
  77:../os_core/os_mbox.c **** *              == (OS_EVENT *)0  if no event control blocks were available
  78:../os_core/os_mbox.c **** ***************************************************************************************************
  79:../os_core/os_mbox.c **** */
  80:../os_core/os_mbox.c **** 
  81:../os_core/os_mbox.c **** OS_EVENT  *OSMboxCreate (void *msg)
  82:../os_core/os_mbox.c **** {
 1710              		.loc 1 82 0
 1711              		.cfi_startproc
 1712              		@ Function supports interworking.
 1713              		@ args = 0, pretend = 0, frame = 16
 1714              		@ frame_needed = 1, uses_anonymous_args = 0
 1715 0084 0DC0A0E1 		mov	ip, sp
 1716              	.LCFI2:
 1717              		.cfi_def_cfa_register 12
 1718 0088 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1719 008c 04B04CE2 		sub	fp, ip, #4
 1720              		.cfi_offset 14, -8
 1721              		.cfi_offset 13, -12
 1722              		.cfi_offset 11, -16
 1723              	.LCFI3:
 1724              		.cfi_def_cfa 11, 4
 1725 0090 10D04DE2 		sub	sp, sp, #16
 1726 0094 18000BE5 		str	r0, [fp, #-24]
  83:../os_core/os_mbox.c ****     OS_EVENT  *pevent;
  84:../os_core/os_mbox.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
  85:../os_core/os_mbox.c ****     OS_CPU_SR  cpu_sr;
  86:../os_core/os_mbox.c **** 
  87:../os_core/os_mbox.c **** 
  88:../os_core/os_mbox.c **** 
  89:../os_core/os_mbox.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
  90:../os_core/os_mbox.c **** #endif    
  91:../os_core/os_mbox.c ****     if (OSIntNesting > 0) {                      /* See if called from ISR ...                     
 1727              		.loc 1 91 0
 1728 0098 C0309FE5 		ldr	r3, .L10
 1729 009c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1730 00a0 000053E3 		cmp	r3, #0
 1731 00a4 0100000A 		beq	.L6
  92:../os_core/os_mbox.c ****         return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                   
 1732              		.loc 1 92 0
 1733 00a8 0030A0E3 		mov	r3, #0
 1734 00ac 270000EA 		b	.L7
 1735              	.L6:
  93:../os_core/os_mbox.c ****     }
  94:../os_core/os_mbox.c ****     OS_ENTER_CRITICAL();
 1736              		.loc 1 94 0
 1737              	@ 94 "../os_core/os_mbox.c" 1
 1738 00b0 00000FE1 		mrs   r0, cpsr              
 1739 00b4 04002DE5 	stmfd sp!, {r0}             
 1740 00b8 C00080E3 	orr   r0, r0, #0b11000000   
 1741 00bc 00F021E1 	msr   cpsr_c, r0              
 1742              	@ 0 "" 2
  95:../os_core/os_mbox.c ****     pevent = OSEventFreeList;                    /* Get next free event control block              
 1743              		.loc 1 95 0
 1744 00c0 9C309FE5 		ldr	r3, .L10+4
 1745 00c4 003093E5 		ldr	r3, [r3, #0]
 1746 00c8 10300BE5 		str	r3, [fp, #-16]
  96:../os_core/os_mbox.c ****     if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty         
 1747              		.loc 1 96 0
 1748 00cc 90309FE5 		ldr	r3, .L10+4
 1749 00d0 003093E5 		ldr	r3, [r3, #0]
 1750 00d4 000053E3 		cmp	r3, #0
 1751 00d8 0500000A 		beq	.L8
  97:../os_core/os_mbox.c ****         OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 1752              		.loc 1 97 0
 1753 00dc 80309FE5 		ldr	r3, .L10+4
 1754 00e0 003093E5 		ldr	r3, [r3, #0]
 1755 00e4 043093E5 		ldr	r3, [r3, #4]
 1756 00e8 0320A0E1 		mov	r2, r3
 1757 00ec 70309FE5 		ldr	r3, .L10+4
 1758 00f0 002083E5 		str	r2, [r3, #0]
 1759              	.L8:
  98:../os_core/os_mbox.c ****     }
  99:../os_core/os_mbox.c ****     OS_EXIT_CRITICAL();
 1760              		.loc 1 99 0
 1761              	@ 99 "../os_core/os_mbox.c" 1
 1762 00f4 04009DE4 		ldmfd sp!, {r0}             
 1763 00f8 00F021E1 	msr   cpsr_c, r0              
 1764              	@ 0 "" 2
 100:../os_core/os_mbox.c ****     if (pevent != (OS_EVENT *)0) {
 1765              		.loc 1 100 0
 1766 00fc 10301BE5 		ldr	r3, [fp, #-16]
 1767 0100 000053E3 		cmp	r3, #0
 1768 0104 1000000A 		beq	.L9
 101:../os_core/os_mbox.c ****         pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 1769              		.loc 1 101 0
 1770 0108 10301BE5 		ldr	r3, [fp, #-16]
 1771 010c 0120A0E3 		mov	r2, #1
 1772 0110 0020C3E5 		strb	r2, [r3, #0]
 102:../os_core/os_mbox.c ****         pevent->OSEventCnt     = 0;
 1773              		.loc 1 102 0
 1774 0114 10301BE5 		ldr	r3, [fp, #-16]
 1775 0118 0020A0E3 		mov	r2, #0
 1776 011c B220C3E1 		strh	r2, [r3, #2]	@ movhi
 103:../os_core/os_mbox.c ****         pevent->OSEventPtr     = msg;            /* Deposit message in event control block         
 1777              		.loc 1 103 0
 1778 0120 10301BE5 		ldr	r3, [fp, #-16]
 1779 0124 18201BE5 		ldr	r2, [fp, #-24]
 1780 0128 042083E5 		str	r2, [r3, #4]
 104:../os_core/os_mbox.c **** #if OS_EVENT_NAME_SIZE > 1
 105:../os_core/os_mbox.c ****         pevent->OSEventName[0] = '?';
 1781              		.loc 1 105 0
 1782 012c 10301BE5 		ldr	r3, [fp, #-16]
 1783 0130 3F20A0E3 		mov	r2, #63
 1784 0134 1020C3E5 		strb	r2, [r3, #16]
 106:../os_core/os_mbox.c ****         pevent->OSEventName[1] = OS_ASCII_NUL;
 1785              		.loc 1 106 0
 1786 0138 10301BE5 		ldr	r3, [fp, #-16]
 1787 013c 0020A0E3 		mov	r2, #0
 1788 0140 1120C3E5 		strb	r2, [r3, #17]
 107:../os_core/os_mbox.c **** #endif
 108:../os_core/os_mbox.c ****         OS_EventWaitListInit(pevent);
 1789              		.loc 1 108 0
 1790 0144 10001BE5 		ldr	r0, [fp, #-16]
 1791 0148 FEFFFFEB 		bl	OS_EventWaitListInit
 1792              	.L9:
 109:../os_core/os_mbox.c ****     }
 110:../os_core/os_mbox.c ****     return (pevent);                             /* Return pointer to event control block          
 1793              		.loc 1 110 0
 1794 014c 10301BE5 		ldr	r3, [fp, #-16]
 1795              	.L7:
 111:../os_core/os_mbox.c **** }
 1796              		.loc 1 111 0
 1797 0150 0300A0E1 		mov	r0, r3
 1798 0154 0CD04BE2 		sub	sp, fp, #12
 1799 0158 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1800 015c 1EFF2FE1 		bx	lr
 1801              	.L11:
 1802              		.align	2
 1803              	.L10:
 1804 0160 00000000 		.word	OSIntNesting
 1805 0164 00000000 		.word	OSEventFreeList
 1806              		.cfi_endproc
 1807              	.LFE1:
 1809              		.align	2
 1810              		.global	OSMboxDel
 1812              	OSMboxDel:
 1813              	.LFB2:
 112:../os_core/os_mbox.c **** /*$PAGE*/
 113:../os_core/os_mbox.c **** /*
 114:../os_core/os_mbox.c **** ***************************************************************************************************
 115:../os_core/os_mbox.c **** *                                         DELETE A MAIBOX
 116:../os_core/os_mbox.c **** *
 117:../os_core/os_mbox.c **** * Description: This function deletes a mailbox and readies all tasks pending on the mailbox.
 118:../os_core/os_mbox.c **** *
 119:../os_core/os_mbox.c **** * Arguments  : pevent        is a pointer to the event control block associated with the desired
 120:../os_core/os_mbox.c **** *                            mailbox.
 121:../os_core/os_mbox.c **** *
 122:../os_core/os_mbox.c **** *              opt           determines delete options as follows:
 123:../os_core/os_mbox.c **** *                            opt == OS_DEL_NO_PEND   Delete the mailbox ONLY if no task pending
 124:../os_core/os_mbox.c **** *                            opt == OS_DEL_ALWAYS    Deletes the mailbox even if tasks are waiting.
 125:../os_core/os_mbox.c **** *                                                    In this case, all the tasks pending will be re
 126:../os_core/os_mbox.c **** *
 127:../os_core/os_mbox.c **** *              err           is a pointer to an error code that can contain one of the following va
 128:../os_core/os_mbox.c **** *                            OS_NO_ERR               The call was successful and the mailbox was de
 129:../os_core/os_mbox.c **** *                            OS_ERR_DEL_ISR          If you attempted to delete the mailbox from an
 130:../os_core/os_mbox.c **** *                            OS_ERR_INVALID_OPT      An invalid option was specified
 131:../os_core/os_mbox.c **** *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the mailbox
 132:../os_core/os_mbox.c **** *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mailbox
 133:../os_core/os_mbox.c **** *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
 134:../os_core/os_mbox.c **** *
 135:../os_core/os_mbox.c **** * Returns    : pevent        upon error
 136:../os_core/os_mbox.c **** *              (OS_EVENT *)0 if the mailbox was successfully deleted.
 137:../os_core/os_mbox.c **** *
 138:../os_core/os_mbox.c **** * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the prese
 139:../os_core/os_mbox.c **** *                 the mailbox MUST check the return code of OSMboxPend().
 140:../os_core/os_mbox.c **** *              2) OSMboxAccept() callers will not know that the intended mailbox has been deleted!
 141:../os_core/os_mbox.c **** *              3) This call can potentially disable interrupts for a long time.  The interrupt disa
 142:../os_core/os_mbox.c **** *                 time is directly proportional to the number of tasks waiting on the mailbox.
 143:../os_core/os_mbox.c **** *              4) Because ALL tasks pending on the mailbox will be readied, you MUST be careful in
 144:../os_core/os_mbox.c **** *                 applications where the mailbox is used for mutual exclusion because the resource(
 145:../os_core/os_mbox.c **** *                 will no longer be guarded by the mailbox.
 146:../os_core/os_mbox.c **** ***************************************************************************************************
 147:../os_core/os_mbox.c **** */
 148:../os_core/os_mbox.c **** 
 149:../os_core/os_mbox.c **** #if OS_MBOX_DEL_EN > 0
 150:../os_core/os_mbox.c **** OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *err)
 151:../os_core/os_mbox.c **** {
 1814              		.loc 1 151 0
 1815              		.cfi_startproc
 1816              		@ Function supports interworking.
 1817              		@ args = 0, pretend = 0, frame = 24
 1818              		@ frame_needed = 1, uses_anonymous_args = 0
 1819 0168 0DC0A0E1 		mov	ip, sp
 1820              	.LCFI4:
 1821              		.cfi_def_cfa_register 12
 1822 016c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1823 0170 04B04CE2 		sub	fp, ip, #4
 1824              		.cfi_offset 14, -8
 1825              		.cfi_offset 13, -12
 1826              		.cfi_offset 11, -16
 1827              	.LCFI5:
 1828              		.cfi_def_cfa 11, 4
 1829 0174 18D04DE2 		sub	sp, sp, #24
 1830 0178 18000BE5 		str	r0, [fp, #-24]
 1831 017c 0130A0E1 		mov	r3, r1
 1832 0180 20200BE5 		str	r2, [fp, #-32]
 1833 0184 19304BE5 		strb	r3, [fp, #-25]
 152:../os_core/os_mbox.c ****     BOOLEAN    tasks_waiting;
 153:../os_core/os_mbox.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 154:../os_core/os_mbox.c ****     OS_CPU_SR  cpu_sr;
 155:../os_core/os_mbox.c **** 
 156:../os_core/os_mbox.c **** 
 157:../os_core/os_mbox.c **** 
 158:../os_core/os_mbox.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 159:../os_core/os_mbox.c **** #endif    
 160:../os_core/os_mbox.c ****     if (OSIntNesting > 0) {                                /* See if called from ISR ...           
 1834              		.loc 1 160 0
 1835 0188 04329FE5 		ldr	r3, .L28
 1836 018c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1837 0190 000053E3 		cmp	r3, #0
 1838 0194 0400000A 		beq	.L13
 161:../os_core/os_mbox.c ****         *err = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR         
 1839              		.loc 1 161 0
 1840 0198 20301BE5 		ldr	r3, [fp, #-32]
 1841 019c 7320E0E3 		mvn	r2, #115
 1842 01a0 0020C3E5 		strb	r2, [r3, #0]
 162:../os_core/os_mbox.c ****         return (pevent);
 1843              		.loc 1 162 0
 1844 01a4 18301BE5 		ldr	r3, [fp, #-24]
 1845 01a8 750000EA 		b	.L14
 1846              	.L13:
 163:../os_core/os_mbox.c ****     }
 164:../os_core/os_mbox.c **** #if OS_ARG_CHK_EN > 0
 165:../os_core/os_mbox.c ****     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                    
 1847              		.loc 1 165 0
 1848 01ac 18301BE5 		ldr	r3, [fp, #-24]
 1849 01b0 000053E3 		cmp	r3, #0
 1850 01b4 0400001A 		bne	.L15
 166:../os_core/os_mbox.c ****         *err = OS_ERR_PEVENT_NULL;
 1851              		.loc 1 166 0
 1852 01b8 20301BE5 		ldr	r3, [fp, #-32]
 1853 01bc 0420A0E3 		mov	r2, #4
 1854 01c0 0020C3E5 		strb	r2, [r3, #0]
 167:../os_core/os_mbox.c ****         return (pevent);
 1855              		.loc 1 167 0
 1856 01c4 18301BE5 		ldr	r3, [fp, #-24]
 1857 01c8 6D0000EA 		b	.L14
 1858              	.L15:
 168:../os_core/os_mbox.c ****     }
 169:../os_core/os_mbox.c **** #endif
 170:../os_core/os_mbox.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type            
 1859              		.loc 1 170 0
 1860 01cc 18301BE5 		ldr	r3, [fp, #-24]
 1861 01d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1862 01d4 010053E3 		cmp	r3, #1
 1863 01d8 0400000A 		beq	.L16
 171:../os_core/os_mbox.c ****         *err = OS_ERR_EVENT_TYPE;
 1864              		.loc 1 171 0
 1865 01dc 20301BE5 		ldr	r3, [fp, #-32]
 1866 01e0 0120A0E3 		mov	r2, #1
 1867 01e4 0020C3E5 		strb	r2, [r3, #0]
 172:../os_core/os_mbox.c ****         return (pevent);
 1868              		.loc 1 172 0
 1869 01e8 18301BE5 		ldr	r3, [fp, #-24]
 1870 01ec 640000EA 		b	.L14
 1871              	.L16:
 173:../os_core/os_mbox.c ****     }
 174:../os_core/os_mbox.c ****     OS_ENTER_CRITICAL();
 1872              		.loc 1 174 0
 1873              	@ 174 "../os_core/os_mbox.c" 1
 1874 01f0 00000FE1 		mrs   r0, cpsr              
 1875 01f4 04002DE5 	stmfd sp!, {r0}             
 1876 01f8 C00080E3 	orr   r0, r0, #0b11000000   
 1877 01fc 00F021E1 	msr   cpsr_c, r0              
 1878              	@ 0 "" 2
 175:../os_core/os_mbox.c ****     if (pevent->OSEventGrp != 0x00) {                      /* See if any tasks waiting on mailbox  
 1879              		.loc 1 175 0
 1880 0200 18301BE5 		ldr	r3, [fp, #-24]
 1881 0204 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1882 0208 000053E3 		cmp	r3, #0
 1883 020c 0200000A 		beq	.L17
 176:../os_core/os_mbox.c ****         tasks_waiting = TRUE;                              /* Yes                                  
 1884              		.loc 1 176 0
 1885 0210 0130A0E3 		mov	r3, #1
 1886 0214 0D304BE5 		strb	r3, [fp, #-13]
 1887 0218 010000EA 		b	.L18
 1888              	.L17:
 177:../os_core/os_mbox.c ****     } else {
 178:../os_core/os_mbox.c ****         tasks_waiting = FALSE;                             /* No                                   
 1889              		.loc 1 178 0
 1890 021c 0030A0E3 		mov	r3, #0
 1891 0220 0D304BE5 		strb	r3, [fp, #-13]
 1892              	.L18:
 179:../os_core/os_mbox.c ****     }
 180:../os_core/os_mbox.c ****     switch (opt) {
 1893              		.loc 1 180 0
 1894 0224 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1895 0228 000053E3 		cmp	r3, #0
 1896 022c 0200000A 		beq	.L20
 1897 0230 010053E3 		cmp	r3, #1
 1898 0234 2900000A 		beq	.L27
 1899 0238 4B0000EA 		b	.L26
 1900              	.L20:
 181:../os_core/os_mbox.c ****         case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waitin
 182:../os_core/os_mbox.c ****              if (tasks_waiting == FALSE) {
 1901              		.loc 1 182 0
 1902 023c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 1903 0240 000053E3 		cmp	r3, #0
 1904 0244 1900001A 		bne	.L22
 183:../os_core/os_mbox.c **** #if OS_EVENT_NAME_SIZE > 1
 184:../os_core/os_mbox.c ****                  pevent->OSEventName[0] = '?';             /* Unknown name                         
 1905              		.loc 1 184 0
 1906 0248 18301BE5 		ldr	r3, [fp, #-24]
 1907 024c 3F20A0E3 		mov	r2, #63
 1908 0250 1020C3E5 		strb	r2, [r3, #16]
 185:../os_core/os_mbox.c ****                  pevent->OSEventName[1] = OS_ASCII_NUL;
 1909              		.loc 1 185 0
 1910 0254 18301BE5 		ldr	r3, [fp, #-24]
 1911 0258 0020A0E3 		mov	r2, #0
 1912 025c 1120C3E5 		strb	r2, [r3, #17]
 186:../os_core/os_mbox.c **** #endif
 187:../os_core/os_mbox.c ****                  pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 1913              		.loc 1 187 0
 1914 0260 18301BE5 		ldr	r3, [fp, #-24]
 1915 0264 0020A0E3 		mov	r2, #0
 1916 0268 0020C3E5 		strb	r2, [r3, #0]
 188:../os_core/os_mbox.c ****                  pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free li
 1917              		.loc 1 188 0
 1918 026c 24319FE5 		ldr	r3, .L28+4
 1919 0270 002093E5 		ldr	r2, [r3, #0]
 1920 0274 18301BE5 		ldr	r3, [fp, #-24]
 1921 0278 042083E5 		str	r2, [r3, #4]
 189:../os_core/os_mbox.c ****                  pevent->OSEventCnt  = 0;
 1922              		.loc 1 189 0
 1923 027c 18301BE5 		ldr	r3, [fp, #-24]
 1924 0280 0020A0E3 		mov	r2, #0
 1925 0284 B220C3E1 		strh	r2, [r3, #2]	@ movhi
 190:../os_core/os_mbox.c ****                  OSEventFreeList     = pevent;             /* Get next free event control block    
 1926              		.loc 1 190 0
 1927 0288 08319FE5 		ldr	r3, .L28+4
 1928 028c 18201BE5 		ldr	r2, [fp, #-24]
 1929 0290 002083E5 		str	r2, [r3, #0]
 191:../os_core/os_mbox.c ****                  OS_EXIT_CRITICAL();
 1930              		.loc 1 191 0
 1931              	@ 191 "../os_core/os_mbox.c" 1
 1932 0294 04009DE4 		ldmfd sp!, {r0}             
 1933 0298 00F021E1 	msr   cpsr_c, r0              
 1934              	@ 0 "" 2
 192:../os_core/os_mbox.c ****                  *err                = OS_NO_ERR;
 1935              		.loc 1 192 0
 1936 029c 20301BE5 		ldr	r3, [fp, #-32]
 1937 02a0 0020A0E3 		mov	r2, #0
 1938 02a4 0020C3E5 		strb	r2, [r3, #0]
 193:../os_core/os_mbox.c ****                  return ((OS_EVENT *)0);                   /* Mailbox has been deleted             
 1939              		.loc 1 193 0
 1940 02a8 0030A0E3 		mov	r3, #0
 1941 02ac 340000EA 		b	.L14
 1942              	.L22:
 194:../os_core/os_mbox.c ****              } else {
 195:../os_core/os_mbox.c ****                  OS_EXIT_CRITICAL();
 1943              		.loc 1 195 0
 1944              	@ 195 "../os_core/os_mbox.c" 1
 1945 02b0 04009DE4 		ldmfd sp!, {r0}             
 1946 02b4 00F021E1 	msr   cpsr_c, r0              
 1947              	@ 0 "" 2
 196:../os_core/os_mbox.c ****                  *err                = OS_ERR_TASK_WAITING;
 1948              		.loc 1 196 0
 1949 02b8 20301BE5 		ldr	r3, [fp, #-32]
 1950 02bc 0820A0E3 		mov	r2, #8
 1951 02c0 0020C3E5 		strb	r2, [r3, #0]
 197:../os_core/os_mbox.c ****                  return (pevent);
 1952              		.loc 1 197 0
 1953 02c4 18301BE5 		ldr	r3, [fp, #-24]
 1954 02c8 2D0000EA 		b	.L14
 1955              	.L24:
 198:../os_core/os_mbox.c ****              }
 199:../os_core/os_mbox.c **** 
 200:../os_core/os_mbox.c ****         case OS_DEL_ALWAYS:                                /* Always delete the mailbox            
 201:../os_core/os_mbox.c ****              while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for mailbox  
 202:../os_core/os_mbox.c ****                  (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX);
 1956              		.loc 1 202 0
 1957 02cc 18001BE5 		ldr	r0, [fp, #-24]
 1958 02d0 0010A0E3 		mov	r1, #0
 1959 02d4 0220A0E3 		mov	r2, #2
 1960 02d8 FEFFFFEB 		bl	OS_EventTaskRdy
 1961 02dc 000000EA 		b	.L23
 1962              	.L27:
 201:../os_core/os_mbox.c ****              while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for mailbox  
 1963              		.loc 1 201 0
 1964 02e0 0000A0E1 		mov	r0, r0	@ nop
 1965              	.L23:
 201:../os_core/os_mbox.c ****              while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for mailbox  
 1966              		.loc 1 201 0 is_stmt 0 discriminator 1
 1967 02e4 18301BE5 		ldr	r3, [fp, #-24]
 1968 02e8 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1969 02ec 000053E3 		cmp	r3, #0
 1970 02f0 F5FFFF1A 		bne	.L24
 203:../os_core/os_mbox.c ****              }
 204:../os_core/os_mbox.c **** #if OS_EVENT_NAME_SIZE > 1
 205:../os_core/os_mbox.c ****              pevent->OSEventName[0] = '?';                 /* Unknown name                         
 1971              		.loc 1 205 0 is_stmt 1
 1972 02f4 18301BE5 		ldr	r3, [fp, #-24]
 1973 02f8 3F20A0E3 		mov	r2, #63
 1974 02fc 1020C3E5 		strb	r2, [r3, #16]
 206:../os_core/os_mbox.c ****              pevent->OSEventName[1] = OS_ASCII_NUL;
 1975              		.loc 1 206 0
 1976 0300 18301BE5 		ldr	r3, [fp, #-24]
 1977 0304 0020A0E3 		mov	r2, #0
 1978 0308 1120C3E5 		strb	r2, [r3, #17]
 207:../os_core/os_mbox.c **** #endif
 208:../os_core/os_mbox.c ****              pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1979              		.loc 1 208 0
 1980 030c 18301BE5 		ldr	r3, [fp, #-24]
 1981 0310 0020A0E3 		mov	r2, #0
 1982 0314 0020C3E5 		strb	r2, [r3, #0]
 209:../os_core/os_mbox.c ****              pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free li
 1983              		.loc 1 209 0
 1984 0318 78309FE5 		ldr	r3, .L28+4
 1985 031c 002093E5 		ldr	r2, [r3, #0]
 1986 0320 18301BE5 		ldr	r3, [fp, #-24]
 1987 0324 042083E5 		str	r2, [r3, #4]
 210:../os_core/os_mbox.c ****              pevent->OSEventCnt     = 0;
 1988              		.loc 1 210 0
 1989 0328 18301BE5 		ldr	r3, [fp, #-24]
 1990 032c 0020A0E3 		mov	r2, #0
 1991 0330 B220C3E1 		strh	r2, [r3, #2]	@ movhi
 211:../os_core/os_mbox.c ****              OSEventFreeList        = pevent;              /* Get next free event control block    
 1992              		.loc 1 211 0
 1993 0334 5C309FE5 		ldr	r3, .L28+4
 1994 0338 18201BE5 		ldr	r2, [fp, #-24]
 1995 033c 002083E5 		str	r2, [r3, #0]
 212:../os_core/os_mbox.c ****              OS_EXIT_CRITICAL();
 1996              		.loc 1 212 0
 1997              	@ 212 "../os_core/os_mbox.c" 1
 1998 0340 04009DE4 		ldmfd sp!, {r0}             
 1999 0344 00F021E1 	msr   cpsr_c, r0              
 2000              	@ 0 "" 2
 213:../os_core/os_mbox.c ****              if (tasks_waiting == TRUE) {                  /* Reschedule only if task(s) were waiti
 2001              		.loc 1 213 0
 2002 0348 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2003 034c 010053E3 		cmp	r3, #1
 2004 0350 0000001A 		bne	.L25
 214:../os_core/os_mbox.c ****                  OS_Sched();                               /* Find highest priority task ready to r
 2005              		.loc 1 214 0
 2006 0354 FEFFFFEB 		bl	OS_Sched
 2007              	.L25:
 215:../os_core/os_mbox.c ****              }
 216:../os_core/os_mbox.c ****              *err = OS_NO_ERR;
 2008              		.loc 1 216 0
 2009 0358 20301BE5 		ldr	r3, [fp, #-32]
 2010 035c 0020A0E3 		mov	r2, #0
 2011 0360 0020C3E5 		strb	r2, [r3, #0]
 217:../os_core/os_mbox.c ****              return ((OS_EVENT *)0);                       /* Mailbox has been deleted             
 2012              		.loc 1 217 0
 2013 0364 0030A0E3 		mov	r3, #0
 2014 0368 050000EA 		b	.L14
 2015              	.L26:
 218:../os_core/os_mbox.c **** 
 219:../os_core/os_mbox.c ****         default:
 220:../os_core/os_mbox.c ****              OS_EXIT_CRITICAL();
 2016              		.loc 1 220 0
 2017              	@ 220 "../os_core/os_mbox.c" 1
 2018 036c 04009DE4 		ldmfd sp!, {r0}             
 2019 0370 00F021E1 	msr   cpsr_c, r0              
 2020              	@ 0 "" 2
 221:../os_core/os_mbox.c ****              *err = OS_ERR_INVALID_OPT;
 2021              		.loc 1 221 0
 2022 0374 20301BE5 		ldr	r3, [fp, #-32]
 2023 0378 0720A0E3 		mov	r2, #7
 2024 037c 0020C3E5 		strb	r2, [r3, #0]
 222:../os_core/os_mbox.c ****              return (pevent);
 2025              		.loc 1 222 0
 2026 0380 18301BE5 		ldr	r3, [fp, #-24]
 2027              	.L14:
 223:../os_core/os_mbox.c ****     }
 224:../os_core/os_mbox.c **** }
 2028              		.loc 1 224 0
 2029 0384 0300A0E1 		mov	r0, r3
 2030 0388 0CD04BE2 		sub	sp, fp, #12
 2031 038c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2032 0390 1EFF2FE1 		bx	lr
 2033              	.L29:
 2034              		.align	2
 2035              	.L28:
 2036 0394 00000000 		.word	OSIntNesting
 2037 0398 00000000 		.word	OSEventFreeList
 2038              		.cfi_endproc
 2039              	.LFE2:
 2041              		.align	2
 2042              		.global	OSMboxPend
 2044              	OSMboxPend:
 2045              	.LFB3:
 225:../os_core/os_mbox.c **** #endif
 226:../os_core/os_mbox.c **** 
 227:../os_core/os_mbox.c **** /*$PAGE*/
 228:../os_core/os_mbox.c **** /*
 229:../os_core/os_mbox.c **** ***************************************************************************************************
 230:../os_core/os_mbox.c **** *                                      PEND ON MAILBOX FOR A MESSAGE
 231:../os_core/os_mbox.c **** *
 232:../os_core/os_mbox.c **** * Description: This function waits for a message to be sent to a mailbox
 233:../os_core/os_mbox.c **** *
 234:../os_core/os_mbox.c **** * Arguments  : pevent        is a pointer to the event control block associated with the desired ma
 235:../os_core/os_mbox.c **** *
 236:../os_core/os_mbox.c **** *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your tas
 237:../os_core/os_mbox.c **** *                            wait for a message to arrive at the mailbox up to the amount of time
 238:../os_core/os_mbox.c **** *                            specified by this argument.  If you specify 0, however, your task will
 239:../os_core/os_mbox.c **** *                            forever at the specified mailbox or, until a message arrives.
 240:../os_core/os_mbox.c **** *
 241:../os_core/os_mbox.c **** *              err           is a pointer to where an error message will be deposited.  Possible er
 242:../os_core/os_mbox.c **** *                            messages are:
 243:../os_core/os_mbox.c **** *
 244:../os_core/os_mbox.c **** *                            OS_NO_ERR           The call was successful and your task received a
 245:../os_core/os_mbox.c **** *                                                message.
 246:../os_core/os_mbox.c **** *                            OS_TIMEOUT          A message was not received within the specified ti
 247:../os_core/os_mbox.c **** *                            OS_ERR_EVENT_TYPE   Invalid event type
 248:../os_core/os_mbox.c **** *                            OS_ERR_PEND_ISR     If you called this function from an ISR and the re
 249:../os_core/os_mbox.c **** *                                                would lead to a suspension.
 250:../os_core/os_mbox.c **** *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
 251:../os_core/os_mbox.c **** *
 252:../os_core/os_mbox.c **** * Returns    : != (void *)0  is a pointer to the message received
 253:../os_core/os_mbox.c **** *              == (void *)0  if no message was received or,
 254:../os_core/os_mbox.c **** *                            if 'pevent' is a NULL pointer or,
 255:../os_core/os_mbox.c **** *                            if you didn't pass the proper pointer to the event control block.
 256:../os_core/os_mbox.c **** ***************************************************************************************************
 257:../os_core/os_mbox.c **** */
 258:../os_core/os_mbox.c **** 
 259:../os_core/os_mbox.c **** void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
 260:../os_core/os_mbox.c **** {
 2046              		.loc 1 260 0
 2047              		.cfi_startproc
 2048              		@ Function supports interworking.
 2049              		@ args = 0, pretend = 0, frame = 24
 2050              		@ frame_needed = 1, uses_anonymous_args = 0
 2051 039c 0DC0A0E1 		mov	ip, sp
 2052              	.LCFI6:
 2053              		.cfi_def_cfa_register 12
 2054 03a0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2055 03a4 04B04CE2 		sub	fp, ip, #4
 2056              		.cfi_offset 14, -8
 2057              		.cfi_offset 13, -12
 2058              		.cfi_offset 11, -16
 2059              	.LCFI7:
 2060              		.cfi_def_cfa 11, 4
 2061 03a8 18D04DE2 		sub	sp, sp, #24
 2062 03ac 18000BE5 		str	r0, [fp, #-24]
 2063 03b0 0130A0E1 		mov	r3, r1
 2064 03b4 20200BE5 		str	r2, [fp, #-32]
 2065 03b8 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 261:../os_core/os_mbox.c ****     void      *msg;
 262:../os_core/os_mbox.c **** #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register  
 263:../os_core/os_mbox.c ****     OS_CPU_SR  cpu_sr;
 264:../os_core/os_mbox.c **** 
 265:../os_core/os_mbox.c **** 
 266:../os_core/os_mbox.c **** 
 267:../os_core/os_mbox.c ****     cpu_sr = 0;                                       /* Prevent compiler warning                  
 268:../os_core/os_mbox.c **** #endif    
 269:../os_core/os_mbox.c ****     if (OSIntNesting > 0) {                           /* See if called from ISR ...                
 2066              		.loc 1 269 0
 2067 03bc B4319FE5 		ldr	r3, .L37
 2068 03c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2069 03c4 000053E3 		cmp	r3, #0
 2070 03c8 0400000A 		beq	.L31
 270:../os_core/os_mbox.c ****         *err = OS_ERR_PEND_ISR;                       /* ... can't PEND from an ISR                
 2071              		.loc 1 270 0
 2072 03cc 20301BE5 		ldr	r3, [fp, #-32]
 2073 03d0 0220A0E3 		mov	r2, #2
 2074 03d4 0020C3E5 		strb	r2, [r3, #0]
 271:../os_core/os_mbox.c ****         return ((void *)0);
 2075              		.loc 1 271 0
 2076 03d8 0030A0E3 		mov	r3, #0
 2077 03dc 610000EA 		b	.L32
 2078              	.L31:
 272:../os_core/os_mbox.c ****     }
 273:../os_core/os_mbox.c **** #if OS_ARG_CHK_EN > 0
 274:../os_core/os_mbox.c ****     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                         
 2079              		.loc 1 274 0
 2080 03e0 18301BE5 		ldr	r3, [fp, #-24]
 2081 03e4 000053E3 		cmp	r3, #0
 2082 03e8 0400001A 		bne	.L33
 275:../os_core/os_mbox.c ****         *err = OS_ERR_PEVENT_NULL;
 2083              		.loc 1 275 0
 2084 03ec 20301BE5 		ldr	r3, [fp, #-32]
 2085 03f0 0420A0E3 		mov	r2, #4
 2086 03f4 0020C3E5 		strb	r2, [r3, #0]
 276:../os_core/os_mbox.c ****         return ((void *)0);
 2087              		.loc 1 276 0
 2088 03f8 0030A0E3 		mov	r3, #0
 2089 03fc 590000EA 		b	.L32
 2090              	.L33:
 277:../os_core/os_mbox.c ****     }
 278:../os_core/os_mbox.c **** #endif
 279:../os_core/os_mbox.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                 
 2091              		.loc 1 279 0
 2092 0400 18301BE5 		ldr	r3, [fp, #-24]
 2093 0404 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2094 0408 010053E3 		cmp	r3, #1
 2095 040c 0400000A 		beq	.L34
 280:../os_core/os_mbox.c ****         *err = OS_ERR_EVENT_TYPE;
 2096              		.loc 1 280 0
 2097 0410 20301BE5 		ldr	r3, [fp, #-32]
 2098 0414 0120A0E3 		mov	r2, #1
 2099 0418 0020C3E5 		strb	r2, [r3, #0]
 281:../os_core/os_mbox.c ****         return ((void *)0);
 2100              		.loc 1 281 0
 2101 041c 0030A0E3 		mov	r3, #0
 2102 0420 500000EA 		b	.L32
 2103              	.L34:
 282:../os_core/os_mbox.c ****     }
 283:../os_core/os_mbox.c ****     OS_ENTER_CRITICAL();
 2104              		.loc 1 283 0
 2105              	@ 283 "../os_core/os_mbox.c" 1
 2106 0424 00000FE1 		mrs   r0, cpsr              
 2107 0428 04002DE5 	stmfd sp!, {r0}             
 2108 042c C00080E3 	orr   r0, r0, #0b11000000   
 2109 0430 00F021E1 	msr   cpsr_c, r0              
 2110              	@ 0 "" 2
 284:../os_core/os_mbox.c ****     msg = pevent->OSEventPtr;
 2111              		.loc 1 284 0
 2112 0434 18301BE5 		ldr	r3, [fp, #-24]
 2113 0438 043093E5 		ldr	r3, [r3, #4]
 2114 043c 10300BE5 		str	r3, [fp, #-16]
 285:../os_core/os_mbox.c ****     if (msg != (void *)0) {                           /* See if there is already a message         
 2115              		.loc 1 285 0
 2116 0440 10301BE5 		ldr	r3, [fp, #-16]
 2117 0444 000053E3 		cmp	r3, #0
 2118 0448 0900000A 		beq	.L35
 286:../os_core/os_mbox.c ****         pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                         
 2119              		.loc 1 286 0
 2120 044c 18301BE5 		ldr	r3, [fp, #-24]
 2121 0450 0020A0E3 		mov	r2, #0
 2122 0454 042083E5 		str	r2, [r3, #4]
 287:../os_core/os_mbox.c ****         OS_EXIT_CRITICAL();
 2123              		.loc 1 287 0
 2124              	@ 287 "../os_core/os_mbox.c" 1
 2125 0458 04009DE4 		ldmfd sp!, {r0}             
 2126 045c 00F021E1 	msr   cpsr_c, r0              
 2127              	@ 0 "" 2
 288:../os_core/os_mbox.c ****         *err = OS_NO_ERR;
 2128              		.loc 1 288 0
 2129 0460 20301BE5 		ldr	r3, [fp, #-32]
 2130 0464 0020A0E3 		mov	r2, #0
 2131 0468 0020C3E5 		strb	r2, [r3, #0]
 289:../os_core/os_mbox.c ****         return (msg);                                 /* Return the message received (or NULL)     
 2132              		.loc 1 289 0
 2133 046c 10301BE5 		ldr	r3, [fp, #-16]
 2134 0470 3C0000EA 		b	.L32
 2135              	.L35:
 290:../os_core/os_mbox.c ****     }
 291:../os_core/os_mbox.c ****     OSTCBCur->OSTCBStat  |= OS_STAT_MBOX;             /* Message not available, task will pend     
 2136              		.loc 1 291 0
 2137 0474 00319FE5 		ldr	r3, .L37+4
 2138 0478 003093E5 		ldr	r3, [r3, #0]
 2139 047c F8209FE5 		ldr	r2, .L37+4
 2140 0480 002092E5 		ldr	r2, [r2, #0]
 2141 0484 2C20D2E5 		ldrb	r2, [r2, #44]	@ zero_extendqisi2
 2142 0488 022082E3 		orr	r2, r2, #2
 2143 048c FF2002E2 		and	r2, r2, #255
 2144 0490 2C20C3E5 		strb	r2, [r3, #44]
 292:../os_core/os_mbox.c ****     OSTCBCur->OSTCBPendTO = FALSE;
 2145              		.loc 1 292 0
 2146 0494 E0309FE5 		ldr	r3, .L37+4
 2147 0498 003093E5 		ldr	r3, [r3, #0]
 2148 049c 0020A0E3 		mov	r2, #0
 2149 04a0 2D20C3E5 		strb	r2, [r3, #45]
 293:../os_core/os_mbox.c ****     OSTCBCur->OSTCBDly    = timeout;                  /* Load timeout in TCB                       
 2150              		.loc 1 293 0
 2151 04a4 D0309FE5 		ldr	r3, .L37+4
 2152 04a8 003093E5 		ldr	r3, [r3, #0]
 2153 04ac BA215BE1 		ldrh	r2, [fp, #-26]	@ movhi
 2154 04b0 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
 294:../os_core/os_mbox.c ****     OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs
 2155              		.loc 1 294 0
 2156 04b4 18001BE5 		ldr	r0, [fp, #-24]
 2157 04b8 FEFFFFEB 		bl	OS_EventTaskWait
 295:../os_core/os_mbox.c ****     OS_EXIT_CRITICAL();
 2158              		.loc 1 295 0
 2159              	@ 295 "../os_core/os_mbox.c" 1
 2160 04bc 04009DE4 		ldmfd sp!, {r0}             
 2161 04c0 00F021E1 	msr   cpsr_c, r0              
 2162              	@ 0 "" 2
 296:../os_core/os_mbox.c ****     OS_Sched();                                       /* Find next highest priority task ready to r
 2163              		.loc 1 296 0
 2164 04c4 FEFFFFEB 		bl	OS_Sched
 297:../os_core/os_mbox.c ****     OS_ENTER_CRITICAL();
 2165              		.loc 1 297 0
 2166              	@ 297 "../os_core/os_mbox.c" 1
 2167 04c8 00000FE1 		mrs   r0, cpsr              
 2168 04cc 04002DE5 	stmfd sp!, {r0}             
 2169 04d0 C00080E3 	orr   r0, r0, #0b11000000   
 2170 04d4 00F021E1 	msr   cpsr_c, r0              
 2171              	@ 0 "" 2
 298:../os_core/os_mbox.c ****     if (OSTCBCur->OSTCBPendTO == TRUE) {              /* See if we were given the message          
 2172              		.loc 1 298 0
 2173 04d8 9C309FE5 		ldr	r3, .L37+4
 2174 04dc 003093E5 		ldr	r3, [r3, #0]
 2175 04e0 2D30D3E5 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 2176 04e4 010053E3 		cmp	r3, #1
 2177 04e8 0800001A 		bne	.L36
 299:../os_core/os_mbox.c ****         OS_EventTO(pevent);                           /* Timed out, Make task ready                
 2178              		.loc 1 299 0
 2179 04ec 18001BE5 		ldr	r0, [fp, #-24]
 2180 04f0 FEFFFFEB 		bl	OS_EventTO
 300:../os_core/os_mbox.c ****         OS_EXIT_CRITICAL();
 2181              		.loc 1 300 0
 2182              	@ 300 "../os_core/os_mbox.c" 1
 2183 04f4 04009DE4 		ldmfd sp!, {r0}             
 2184 04f8 00F021E1 	msr   cpsr_c, r0              
 2185              	@ 0 "" 2
 301:../os_core/os_mbox.c ****         *err = OS_TIMEOUT;                            /* Indicate that a timeout occured           
 2186              		.loc 1 301 0
 2187 04fc 20301BE5 		ldr	r3, [fp, #-32]
 2188 0500 0A20A0E3 		mov	r2, #10
 2189 0504 0020C3E5 		strb	r2, [r3, #0]
 302:../os_core/os_mbox.c ****         return ((void *)0);                           /* Return a NULL message                     
 2190              		.loc 1 302 0
 2191 0508 0030A0E3 		mov	r3, #0
 2192 050c 150000EA 		b	.L32
 2193              	.L36:
 303:../os_core/os_mbox.c ****     }
 304:../os_core/os_mbox.c ****     msg                     = OSTCBCur->OSTCBMsg;
 2194              		.loc 1 304 0
 2195 0510 64309FE5 		ldr	r3, .L37+4
 2196 0514 003093E5 		ldr	r3, [r3, #0]
 2197 0518 203093E5 		ldr	r3, [r3, #32]
 2198 051c 10300BE5 		str	r3, [fp, #-16]
 305:../os_core/os_mbox.c ****     OSTCBCur->OSTCBMsg      = (void *)0;              /* Yes, clear message received               
 2199              		.loc 1 305 0
 2200 0520 54309FE5 		ldr	r3, .L37+4
 2201 0524 003093E5 		ldr	r3, [r3, #0]
 2202 0528 0020A0E3 		mov	r2, #0
 2203 052c 202083E5 		str	r2, [r3, #32]
 306:../os_core/os_mbox.c ****     OSTCBCur->OSTCBStat     = OS_STAT_RDY;
 2204              		.loc 1 306 0
 2205 0530 44309FE5 		ldr	r3, .L37+4
 2206 0534 003093E5 		ldr	r3, [r3, #0]
 2207 0538 0020A0E3 		mov	r2, #0
 2208 053c 2C20C3E5 		strb	r2, [r3, #44]
 307:../os_core/os_mbox.c ****     OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;          /* No longer waiting for event               
 2209              		.loc 1 307 0
 2210 0540 34309FE5 		ldr	r3, .L37+4
 2211 0544 003093E5 		ldr	r3, [r3, #0]
 2212 0548 0020A0E3 		mov	r2, #0
 2213 054c 1C2083E5 		str	r2, [r3, #28]
 308:../os_core/os_mbox.c ****     OS_EXIT_CRITICAL();
 2214              		.loc 1 308 0
 2215              	@ 308 "../os_core/os_mbox.c" 1
 2216 0550 04009DE4 		ldmfd sp!, {r0}             
 2217 0554 00F021E1 	msr   cpsr_c, r0              
 2218              	@ 0 "" 2
 309:../os_core/os_mbox.c ****     *err                    = OS_NO_ERR;
 2219              		.loc 1 309 0
 2220 0558 20301BE5 		ldr	r3, [fp, #-32]
 2221 055c 0020A0E3 		mov	r2, #0
 2222 0560 0020C3E5 		strb	r2, [r3, #0]
 310:../os_core/os_mbox.c ****     return (msg);                                     /* Return the message received               
 2223              		.loc 1 310 0
 2224 0564 10301BE5 		ldr	r3, [fp, #-16]
 2225              	.L32:
 311:../os_core/os_mbox.c **** }
 2226              		.loc 1 311 0
 2227 0568 0300A0E1 		mov	r0, r3
 2228 056c 0CD04BE2 		sub	sp, fp, #12
 2229 0570 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2230 0574 1EFF2FE1 		bx	lr
 2231              	.L38:
 2232              		.align	2
 2233              	.L37:
 2234 0578 00000000 		.word	OSIntNesting
 2235 057c 00000000 		.word	OSTCBCur
 2236              		.cfi_endproc
 2237              	.LFE3:
 2239              		.align	2
 2240              		.global	OSMboxPost
 2242              	OSMboxPost:
 2243              	.LFB4:
 312:../os_core/os_mbox.c **** /*$PAGE*/
 313:../os_core/os_mbox.c **** /*
 314:../os_core/os_mbox.c **** ***************************************************************************************************
 315:../os_core/os_mbox.c **** *                                       POST MESSAGE TO A MAILBOX
 316:../os_core/os_mbox.c **** *
 317:../os_core/os_mbox.c **** * Description: This function sends a message to a mailbox
 318:../os_core/os_mbox.c **** *
 319:../os_core/os_mbox.c **** * Arguments  : pevent        is a pointer to the event control block associated with the desired ma
 320:../os_core/os_mbox.c **** *
 321:../os_core/os_mbox.c **** *              msg           is a pointer to the message to send.  You MUST NOT send a NULL pointer
 322:../os_core/os_mbox.c **** *
 323:../os_core/os_mbox.c **** * Returns    : OS_NO_ERR            The call was successful and the message was sent
 324:../os_core/os_mbox.c **** *              OS_MBOX_FULL         If the mailbox already contains a message.  You can can only se
 325:../os_core/os_mbox.c **** *                                   message at a time and thus, the message MUST be consumed before
 326:../os_core/os_mbox.c **** *                                   are allowed to send another one.
 327:../os_core/os_mbox.c **** *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
 328:../os_core/os_mbox.c **** *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
 329:../os_core/os_mbox.c **** *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
 330:../os_core/os_mbox.c **** *
 331:../os_core/os_mbox.c **** * Note(s)    : 1) HPT means Highest Priority Task
 332:../os_core/os_mbox.c **** ***************************************************************************************************
 333:../os_core/os_mbox.c **** */
 334:../os_core/os_mbox.c **** 
 335:../os_core/os_mbox.c **** #if OS_MBOX_POST_EN > 0
 336:../os_core/os_mbox.c **** INT8U  OSMboxPost (OS_EVENT *pevent, void *msg)
 337:../os_core/os_mbox.c **** {
 2244              		.loc 1 337 0
 2245              		.cfi_startproc
 2246              		@ Function supports interworking.
 2247              		@ args = 0, pretend = 0, frame = 8
 2248              		@ frame_needed = 1, uses_anonymous_args = 0
 2249 0580 0DC0A0E1 		mov	ip, sp
 2250              	.LCFI8:
 2251              		.cfi_def_cfa_register 12
 2252 0584 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2253 0588 04B04CE2 		sub	fp, ip, #4
 2254              		.cfi_offset 14, -8
 2255              		.cfi_offset 13, -12
 2256              		.cfi_offset 11, -16
 2257              	.LCFI9:
 2258              		.cfi_def_cfa 11, 4
 2259 058c 08D04DE2 		sub	sp, sp, #8
 2260 0590 10000BE5 		str	r0, [fp, #-16]
 2261 0594 14100BE5 		str	r1, [fp, #-20]
 338:../os_core/os_mbox.c **** #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register  
 339:../os_core/os_mbox.c ****     OS_CPU_SR  cpu_sr;
 340:../os_core/os_mbox.c ****     
 341:../os_core/os_mbox.c **** 
 342:../os_core/os_mbox.c ****     
 343:../os_core/os_mbox.c ****     cpu_sr = 0;                                       /* Prevent compiler warning                  
 344:../os_core/os_mbox.c **** #endif    
 345:../os_core/os_mbox.c **** #if OS_ARG_CHK_EN > 0
 346:../os_core/os_mbox.c ****     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                         
 2262              		.loc 1 346 0
 2263 0598 10301BE5 		ldr	r3, [fp, #-16]
 2264 059c 000053E3 		cmp	r3, #0
 2265 05a0 0100001A 		bne	.L40
 347:../os_core/os_mbox.c ****         return (OS_ERR_PEVENT_NULL);
 2266              		.loc 1 347 0
 2267 05a4 0430A0E3 		mov	r3, #4
 2268 05a8 290000EA 		b	.L41
 2269              	.L40:
 348:../os_core/os_mbox.c ****     }
 349:../os_core/os_mbox.c ****     if (msg == (void *)0) {                           /* Make sure we are not posting a NULL pointe
 2270              		.loc 1 349 0
 2271 05ac 14301BE5 		ldr	r3, [fp, #-20]
 2272 05b0 000053E3 		cmp	r3, #0
 2273 05b4 0100001A 		bne	.L42
 350:../os_core/os_mbox.c ****         return (OS_ERR_POST_NULL_PTR);
 2274              		.loc 1 350 0
 2275 05b8 0330A0E3 		mov	r3, #3
 2276 05bc 240000EA 		b	.L41
 2277              	.L42:
 351:../os_core/os_mbox.c ****     }
 352:../os_core/os_mbox.c **** #endif
 353:../os_core/os_mbox.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                 
 2278              		.loc 1 353 0
 2279 05c0 10301BE5 		ldr	r3, [fp, #-16]
 2280 05c4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2281 05c8 010053E3 		cmp	r3, #1
 2282 05cc 0100000A 		beq	.L43
 354:../os_core/os_mbox.c ****         return (OS_ERR_EVENT_TYPE);
 2283              		.loc 1 354 0
 2284 05d0 0130A0E3 		mov	r3, #1
 2285 05d4 1E0000EA 		b	.L41
 2286              	.L43:
 355:../os_core/os_mbox.c ****     }
 356:../os_core/os_mbox.c ****     OS_ENTER_CRITICAL();
 2287              		.loc 1 356 0
 2288              	@ 356 "../os_core/os_mbox.c" 1
 2289 05d8 00000FE1 		mrs   r0, cpsr              
 2290 05dc 04002DE5 	stmfd sp!, {r0}             
 2291 05e0 C00080E3 	orr   r0, r0, #0b11000000   
 2292 05e4 00F021E1 	msr   cpsr_c, r0              
 2293              	@ 0 "" 2
 357:../os_core/os_mbox.c ****     if (pevent->OSEventGrp != 0x00) {                     /* See if any task pending on mailbox    
 2294              		.loc 1 357 0
 2295 05e8 10301BE5 		ldr	r3, [fp, #-16]
 2296 05ec 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2297 05f0 000053E3 		cmp	r3, #0
 2298 05f4 0800000A 		beq	.L44
 358:../os_core/os_mbox.c ****         (void)OS_EventTaskRdy(pevent, msg, OS_STAT_MBOX); /* Ready HPT waiting on event            
 2299              		.loc 1 358 0
 2300 05f8 10001BE5 		ldr	r0, [fp, #-16]
 2301 05fc 14101BE5 		ldr	r1, [fp, #-20]
 2302 0600 0220A0E3 		mov	r2, #2
 2303 0604 FEFFFFEB 		bl	OS_EventTaskRdy
 359:../os_core/os_mbox.c ****         OS_EXIT_CRITICAL();
 2304              		.loc 1 359 0
 2305              	@ 359 "../os_core/os_mbox.c" 1
 2306 0608 04009DE4 		ldmfd sp!, {r0}             
 2307 060c 00F021E1 	msr   cpsr_c, r0              
 2308              	@ 0 "" 2
 360:../os_core/os_mbox.c ****         OS_Sched();                                   /* Find highest priority task ready to run   
 2309              		.loc 1 360 0
 2310 0610 FEFFFFEB 		bl	OS_Sched
 361:../os_core/os_mbox.c ****         return (OS_NO_ERR);
 2311              		.loc 1 361 0
 2312 0614 0030A0E3 		mov	r3, #0
 2313 0618 0D0000EA 		b	.L41
 2314              	.L44:
 362:../os_core/os_mbox.c ****     }
 363:../os_core/os_mbox.c ****     if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a m
 2315              		.loc 1 363 0
 2316 061c 10301BE5 		ldr	r3, [fp, #-16]
 2317 0620 043093E5 		ldr	r3, [r3, #4]
 2318 0624 000053E3 		cmp	r3, #0
 2319 0628 0300000A 		beq	.L45
 364:../os_core/os_mbox.c ****         OS_EXIT_CRITICAL();
 2320              		.loc 1 364 0
 2321              	@ 364 "../os_core/os_mbox.c" 1
 2322 062c 04009DE4 		ldmfd sp!, {r0}             
 2323 0630 00F021E1 	msr   cpsr_c, r0              
 2324              	@ 0 "" 2
 365:../os_core/os_mbox.c ****         return (OS_MBOX_FULL);
 2325              		.loc 1 365 0
 2326 0634 1430A0E3 		mov	r3, #20
 2327 0638 050000EA 		b	.L41
 2328              	.L45:
 366:../os_core/os_mbox.c ****     }
 367:../os_core/os_mbox.c ****     pevent->OSEventPtr = msg;                         /* Place message in mailbox                  
 2329              		.loc 1 367 0
 2330 063c 10301BE5 		ldr	r3, [fp, #-16]
 2331 0640 14201BE5 		ldr	r2, [fp, #-20]
 2332 0644 042083E5 		str	r2, [r3, #4]
 368:../os_core/os_mbox.c ****     OS_EXIT_CRITICAL();
 2333              		.loc 1 368 0
 2334              	@ 368 "../os_core/os_mbox.c" 1
 2335 0648 04009DE4 		ldmfd sp!, {r0}             
 2336 064c 00F021E1 	msr   cpsr_c, r0              
 2337              	@ 0 "" 2
 369:../os_core/os_mbox.c ****     return (OS_NO_ERR);
 2338              		.loc 1 369 0
 2339 0650 0030A0E3 		mov	r3, #0
 2340              	.L41:
 370:../os_core/os_mbox.c **** }
 2341              		.loc 1 370 0
 2342 0654 0300A0E1 		mov	r0, r3
 2343 0658 0CD04BE2 		sub	sp, fp, #12
 2344 065c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2345 0660 1EFF2FE1 		bx	lr
 2346              		.cfi_endproc
 2347              	.LFE4:
 2349              		.align	2
 2350              		.global	OSMboxPostOpt
 2352              	OSMboxPostOpt:
 2353              	.LFB5:
 371:../os_core/os_mbox.c **** #endif
 372:../os_core/os_mbox.c **** 
 373:../os_core/os_mbox.c **** /*$PAGE*/
 374:../os_core/os_mbox.c **** /*
 375:../os_core/os_mbox.c **** ***************************************************************************************************
 376:../os_core/os_mbox.c **** *                                       POST MESSAGE TO A MAILBOX
 377:../os_core/os_mbox.c **** *
 378:../os_core/os_mbox.c **** * Description: This function sends a message to a mailbox
 379:../os_core/os_mbox.c **** *
 380:../os_core/os_mbox.c **** * Arguments  : pevent        is a pointer to the event control block associated with the desired ma
 381:../os_core/os_mbox.c **** *
 382:../os_core/os_mbox.c **** *              msg           is a pointer to the message to send.  You MUST NOT send a NULL pointer
 383:../os_core/os_mbox.c **** *
 384:../os_core/os_mbox.c **** *              opt           determines the type of POST performed:
 385:../os_core/os_mbox.c **** *                            OS_POST_OPT_NONE         POST to a single waiting task 
 386:../os_core/os_mbox.c **** *                                                     (Identical to OSMboxPost())
 387:../os_core/os_mbox.c **** *                            OS_POST_OPT_BROADCAST    POST to ALL tasks that are waiting on the mai
 388:../os_core/os_mbox.c **** *
 389:../os_core/os_mbox.c **** * Returns    : OS_NO_ERR            The call was successful and the message was sent
 390:../os_core/os_mbox.c **** *              OS_MBOX_FULL         If the mailbox already contains a message.  You can can only se
 391:../os_core/os_mbox.c **** *                                   message at a time and thus, the message MUST be consumed before
 392:../os_core/os_mbox.c **** *                                   are allowed to send another one.
 393:../os_core/os_mbox.c **** *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
 394:../os_core/os_mbox.c **** *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
 395:../os_core/os_mbox.c **** *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
 396:../os_core/os_mbox.c **** *
 397:../os_core/os_mbox.c **** * Note(s)    : 1) HPT means Highest Priority Task
 398:../os_core/os_mbox.c **** *
 399:../os_core/os_mbox.c **** * Warning    : Interrupts can be disabled for a long time if you do a 'broadcast'.  In fact, the 
 400:../os_core/os_mbox.c **** *              interrupt disable time is proportional to the number of tasks waiting on the mailbox
 401:../os_core/os_mbox.c **** ***************************************************************************************************
 402:../os_core/os_mbox.c **** */
 403:../os_core/os_mbox.c **** 
 404:../os_core/os_mbox.c **** #if OS_MBOX_POST_OPT_EN > 0
 405:../os_core/os_mbox.c **** INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *msg, INT8U opt)
 406:../os_core/os_mbox.c **** {
 2354              		.loc 1 406 0
 2355              		.cfi_startproc
 2356              		@ Function supports interworking.
 2357              		@ args = 0, pretend = 0, frame = 16
 2358              		@ frame_needed = 1, uses_anonymous_args = 0
 2359 0664 0DC0A0E1 		mov	ip, sp
 2360              	.LCFI10:
 2361              		.cfi_def_cfa_register 12
 2362 0668 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2363 066c 04B04CE2 		sub	fp, ip, #4
 2364              		.cfi_offset 14, -8
 2365              		.cfi_offset 13, -12
 2366              		.cfi_offset 11, -16
 2367              	.LCFI11:
 2368              		.cfi_def_cfa 11, 4
 2369 0670 10D04DE2 		sub	sp, sp, #16
 2370 0674 10000BE5 		str	r0, [fp, #-16]
 2371 0678 14100BE5 		str	r1, [fp, #-20]
 2372 067c 0230A0E1 		mov	r3, r2
 2373 0680 15304BE5 		strb	r3, [fp, #-21]
 407:../os_core/os_mbox.c **** #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register  
 408:../os_core/os_mbox.c ****     OS_CPU_SR  cpu_sr;
 409:../os_core/os_mbox.c ****     
 410:../os_core/os_mbox.c ****     
 411:../os_core/os_mbox.c **** 
 412:../os_core/os_mbox.c ****     cpu_sr = 0;                                       /* Prevent compiler warning                  
 413:../os_core/os_mbox.c **** #endif    
 414:../os_core/os_mbox.c **** #if OS_ARG_CHK_EN > 0
 415:../os_core/os_mbox.c ****     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                         
 2374              		.loc 1 415 0
 2375 0684 10301BE5 		ldr	r3, [fp, #-16]
 2376 0688 000053E3 		cmp	r3, #0
 2377 068c 0100001A 		bne	.L47
 416:../os_core/os_mbox.c ****         return (OS_ERR_PEVENT_NULL);
 2378              		.loc 1 416 0
 2379 0690 0430A0E3 		mov	r3, #4
 2380 0694 380000EA 		b	.L48
 2381              	.L47:
 417:../os_core/os_mbox.c ****     }
 418:../os_core/os_mbox.c ****     if (msg == (void *)0) {                           /* Make sure we are not posting a NULL pointe
 2382              		.loc 1 418 0
 2383 0698 14301BE5 		ldr	r3, [fp, #-20]
 2384 069c 000053E3 		cmp	r3, #0
 2385 06a0 0100001A 		bne	.L49
 419:../os_core/os_mbox.c ****         return (OS_ERR_POST_NULL_PTR);
 2386              		.loc 1 419 0
 2387 06a4 0330A0E3 		mov	r3, #3
 2388 06a8 330000EA 		b	.L48
 2389              	.L49:
 420:../os_core/os_mbox.c ****     }
 421:../os_core/os_mbox.c **** #endif
 422:../os_core/os_mbox.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                 
 2390              		.loc 1 422 0
 2391 06ac 10301BE5 		ldr	r3, [fp, #-16]
 2392 06b0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2393 06b4 010053E3 		cmp	r3, #1
 2394 06b8 0100000A 		beq	.L50
 423:../os_core/os_mbox.c ****         return (OS_ERR_EVENT_TYPE);
 2395              		.loc 1 423 0
 2396 06bc 0130A0E3 		mov	r3, #1
 2397 06c0 2D0000EA 		b	.L48
 2398              	.L50:
 424:../os_core/os_mbox.c ****     }
 425:../os_core/os_mbox.c ****     OS_ENTER_CRITICAL();
 2399              		.loc 1 425 0
 2400              	@ 425 "../os_core/os_mbox.c" 1
 2401 06c4 00000FE1 		mrs   r0, cpsr              
 2402 06c8 04002DE5 	stmfd sp!, {r0}             
 2403 06cc C00080E3 	orr   r0, r0, #0b11000000   
 2404 06d0 00F021E1 	msr   cpsr_c, r0              
 2405              	@ 0 "" 2
 426:../os_core/os_mbox.c ****     if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on mailbox        
 2406              		.loc 1 426 0
 2407 06d4 10301BE5 		ldr	r3, [fp, #-16]
 2408 06d8 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2409 06dc 000053E3 		cmp	r3, #0
 2410 06e0 1700000A 		beq	.L51
 427:../os_core/os_mbox.c ****         if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting task
 2411              		.loc 1 427 0
 2412 06e4 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2413 06e8 013003E2 		and	r3, r3, #1
 2414 06ec FF3003E2 		and	r3, r3, #255
 2415 06f0 000053E3 		cmp	r3, #0
 2416 06f4 0900000A 		beq	.L52
 428:../os_core/os_mbox.c ****             while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on mailbox 
 2417              		.loc 1 428 0
 2418 06f8 030000EA 		b	.L53
 2419              	.L54:
 429:../os_core/os_mbox.c ****                 (void)OS_EventTaskRdy(pevent, msg, OS_STAT_MBOX);    
 2420              		.loc 1 429 0
 2421 06fc 10001BE5 		ldr	r0, [fp, #-16]
 2422 0700 14101BE5 		ldr	r1, [fp, #-20]
 2423 0704 0220A0E3 		mov	r2, #2
 2424 0708 FEFFFFEB 		bl	OS_EventTaskRdy
 2425              	.L53:
 428:../os_core/os_mbox.c ****             while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on mailbox 
 2426              		.loc 1 428 0 discriminator 1
 2427 070c 10301BE5 		ldr	r3, [fp, #-16]
 2428 0710 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2429 0714 000053E3 		cmp	r3, #0
 2430 0718 F7FFFF1A 		bne	.L54
 428:../os_core/os_mbox.c ****             while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on mailbox 
 2431              		.loc 1 428 0 is_stmt 0
 2432 071c 030000EA 		b	.L55
 2433              	.L52:
 430:../os_core/os_mbox.c ****             }
 431:../os_core/os_mbox.c ****         } else {
 432:../os_core/os_mbox.c ****             (void)OS_EventTaskRdy(pevent, msg, OS_STAT_MBOX);  /* No,  Post to HPT waiting on mbox 
 2434              		.loc 1 432 0 is_stmt 1
 2435 0720 10001BE5 		ldr	r0, [fp, #-16]
 2436 0724 14101BE5 		ldr	r1, [fp, #-20]
 2437 0728 0220A0E3 		mov	r2, #2
 2438 072c FEFFFFEB 		bl	OS_EventTaskRdy
 2439              	.L55:
 433:../os_core/os_mbox.c ****         }
 434:../os_core/os_mbox.c ****         OS_EXIT_CRITICAL();
 2440              		.loc 1 434 0
 2441              	@ 434 "../os_core/os_mbox.c" 1
 2442 0730 04009DE4 		ldmfd sp!, {r0}             
 2443 0734 00F021E1 	msr   cpsr_c, r0              
 2444              	@ 0 "" 2
 435:../os_core/os_mbox.c ****         OS_Sched();                                            /* Find HPT ready to run            
 2445              		.loc 1 435 0
 2446 0738 FEFFFFEB 		bl	OS_Sched
 436:../os_core/os_mbox.c ****         return (OS_NO_ERR);
 2447              		.loc 1 436 0
 2448 073c 0030A0E3 		mov	r3, #0
 2449 0740 0D0000EA 		b	.L48
 2450              	.L51:
 437:../os_core/os_mbox.c ****     }
 438:../os_core/os_mbox.c ****     if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a m
 2451              		.loc 1 438 0
 2452 0744 10301BE5 		ldr	r3, [fp, #-16]
 2453 0748 043093E5 		ldr	r3, [r3, #4]
 2454 074c 000053E3 		cmp	r3, #0
 2455 0750 0300000A 		beq	.L56
 439:../os_core/os_mbox.c ****         OS_EXIT_CRITICAL();
 2456              		.loc 1 439 0
 2457              	@ 439 "../os_core/os_mbox.c" 1
 2458 0754 04009DE4 		ldmfd sp!, {r0}             
 2459 0758 00F021E1 	msr   cpsr_c, r0              
 2460              	@ 0 "" 2
 440:../os_core/os_mbox.c ****         return (OS_MBOX_FULL);
 2461              		.loc 1 440 0
 2462 075c 1430A0E3 		mov	r3, #20
 2463 0760 050000EA 		b	.L48
 2464              	.L56:
 441:../os_core/os_mbox.c ****     }
 442:../os_core/os_mbox.c ****     pevent->OSEventPtr = msg;                         /* Place message in mailbox                  
 2465              		.loc 1 442 0
 2466 0764 10301BE5 		ldr	r3, [fp, #-16]
 2467 0768 14201BE5 		ldr	r2, [fp, #-20]
 2468 076c 042083E5 		str	r2, [r3, #4]
 443:../os_core/os_mbox.c ****     OS_EXIT_CRITICAL();
 2469              		.loc 1 443 0
 2470              	@ 443 "../os_core/os_mbox.c" 1
 2471 0770 04009DE4 		ldmfd sp!, {r0}             
 2472 0774 00F021E1 	msr   cpsr_c, r0              
 2473              	@ 0 "" 2
 444:../os_core/os_mbox.c ****     return (OS_NO_ERR);
 2474              		.loc 1 444 0
 2475 0778 0030A0E3 		mov	r3, #0
 2476              	.L48:
 445:../os_core/os_mbox.c **** }
 2477              		.loc 1 445 0
 2478 077c 0300A0E1 		mov	r0, r3
 2479 0780 0CD04BE2 		sub	sp, fp, #12
 2480 0784 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2481 0788 1EFF2FE1 		bx	lr
 2482              		.cfi_endproc
 2483              	.LFE5:
 2485              		.align	2
 2486              		.global	OSMboxQuery
 2488              	OSMboxQuery:
 2489              	.LFB6:
 446:../os_core/os_mbox.c **** #endif
 447:../os_core/os_mbox.c **** 
 448:../os_core/os_mbox.c **** /*$PAGE*/
 449:../os_core/os_mbox.c **** /*
 450:../os_core/os_mbox.c **** ***************************************************************************************************
 451:../os_core/os_mbox.c **** *                                        QUERY A MESSAGE MAILBOX
 452:../os_core/os_mbox.c **** *
 453:../os_core/os_mbox.c **** * Description: This function obtains information about a message mailbox.
 454:../os_core/os_mbox.c **** *
 455:../os_core/os_mbox.c **** * Arguments  : pevent        is a pointer to the event control block associated with the desired ma
 456:../os_core/os_mbox.c **** *
 457:../os_core/os_mbox.c **** *              p_mbox_data   is a pointer to a structure that will contain information about the me
 458:../os_core/os_mbox.c **** *                            mailbox.
 459:../os_core/os_mbox.c **** *
 460:../os_core/os_mbox.c **** * Returns    : OS_NO_ERR           The call was successful and the message was sent
 461:../os_core/os_mbox.c **** *              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non mailbox.
 462:../os_core/os_mbox.c **** *              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
 463:../os_core/os_mbox.c **** ***************************************************************************************************
 464:../os_core/os_mbox.c **** */
 465:../os_core/os_mbox.c **** 
 466:../os_core/os_mbox.c **** #if OS_MBOX_QUERY_EN > 0
 467:../os_core/os_mbox.c **** INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
 468:../os_core/os_mbox.c **** {
 2490              		.loc 1 468 0
 2491              		.cfi_startproc
 2492              		@ Function supports interworking.
 2493              		@ args = 0, pretend = 0, frame = 16
 2494              		@ frame_needed = 1, uses_anonymous_args = 0
 2495 078c 0DC0A0E1 		mov	ip, sp
 2496              	.LCFI12:
 2497              		.cfi_def_cfa_register 12
 2498 0790 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2499 0794 04B04CE2 		sub	fp, ip, #4
 2500              		.cfi_offset 14, -8
 2501              		.cfi_offset 13, -12
 2502              		.cfi_offset 11, -16
 2503              	.LCFI13:
 2504              		.cfi_def_cfa 11, 4
 2505 0798 10D04DE2 		sub	sp, sp, #16
 2506 079c 18000BE5 		str	r0, [fp, #-24]
 2507 07a0 1C100BE5 		str	r1, [fp, #-28]
 469:../os_core/os_mbox.c ****     INT8U     *psrc;
 470:../os_core/os_mbox.c ****     INT8U     *pdest;
 471:../os_core/os_mbox.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 472:../os_core/os_mbox.c ****     OS_CPU_SR  cpu_sr;
 473:../os_core/os_mbox.c **** 
 474:../os_core/os_mbox.c **** 
 475:../os_core/os_mbox.c **** 
 476:../os_core/os_mbox.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 477:../os_core/os_mbox.c **** #endif    
 478:../os_core/os_mbox.c **** #if OS_ARG_CHK_EN > 0
 479:../os_core/os_mbox.c ****     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                    
 2508              		.loc 1 479 0
 2509 07a4 18301BE5 		ldr	r3, [fp, #-24]
 2510 07a8 000053E3 		cmp	r3, #0
 2511 07ac 0100001A 		bne	.L58
 480:../os_core/os_mbox.c ****         return (OS_ERR_PEVENT_NULL);
 2512              		.loc 1 480 0
 2513 07b0 0430A0E3 		mov	r3, #4
 2514 07b4 640000EA 		b	.L59
 2515              	.L58:
 481:../os_core/os_mbox.c ****     }
 482:../os_core/os_mbox.c **** #endif
 483:../os_core/os_mbox.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type            
 2516              		.loc 1 483 0
 2517 07b8 18301BE5 		ldr	r3, [fp, #-24]
 2518 07bc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2519 07c0 010053E3 		cmp	r3, #1
 2520 07c4 0100000A 		beq	.L60
 484:../os_core/os_mbox.c ****         return (OS_ERR_EVENT_TYPE);
 2521              		.loc 1 484 0
 2522 07c8 0130A0E3 		mov	r3, #1
 2523 07cc 5E0000EA 		b	.L59
 2524              	.L60:
 485:../os_core/os_mbox.c ****     }
 486:../os_core/os_mbox.c ****     OS_ENTER_CRITICAL();
 2525              		.loc 1 486 0
 2526              	@ 486 "../os_core/os_mbox.c" 1
 2527 07d0 00000FE1 		mrs   r0, cpsr              
 2528 07d4 04002DE5 	stmfd sp!, {r0}             
 2529 07d8 C00080E3 	orr   r0, r0, #0b11000000   
 2530 07dc 00F021E1 	msr   cpsr_c, r0              
 2531              	@ 0 "" 2
 487:../os_core/os_mbox.c ****     p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list       
 2532              		.loc 1 487 0
 2533 07e0 18301BE5 		ldr	r3, [fp, #-24]
 2534 07e4 0120D3E5 		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2535 07e8 1C301BE5 		ldr	r3, [fp, #-28]
 2536 07ec 0C20C3E5 		strb	r2, [r3, #12]
 488:../os_core/os_mbox.c ****     psrc                    = &pevent->OSEventTbl[0];
 2537              		.loc 1 488 0
 2538 07f0 18301BE5 		ldr	r3, [fp, #-24]
 2539 07f4 083083E2 		add	r3, r3, #8
 2540 07f8 10300BE5 		str	r3, [fp, #-16]
 489:../os_core/os_mbox.c ****     pdest                   = &p_mbox_data->OSEventTbl[0];
 2541              		.loc 1 489 0
 2542 07fc 1C301BE5 		ldr	r3, [fp, #-28]
 2543 0800 043083E2 		add	r3, r3, #4
 2544 0804 14300BE5 		str	r3, [fp, #-20]
 490:../os_core/os_mbox.c **** 
 491:../os_core/os_mbox.c **** #if OS_EVENT_TBL_SIZE > 0
 492:../os_core/os_mbox.c ****     *pdest++ = *psrc++;
 2545              		.loc 1 492 0
 2546 0808 10301BE5 		ldr	r3, [fp, #-16]
 2547 080c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2548 0810 14301BE5 		ldr	r3, [fp, #-20]
 2549 0814 0020C3E5 		strb	r2, [r3, #0]
 2550 0818 14301BE5 		ldr	r3, [fp, #-20]
 2551 081c 013083E2 		add	r3, r3, #1
 2552 0820 14300BE5 		str	r3, [fp, #-20]
 2553 0824 10301BE5 		ldr	r3, [fp, #-16]
 2554 0828 013083E2 		add	r3, r3, #1
 2555 082c 10300BE5 		str	r3, [fp, #-16]
 493:../os_core/os_mbox.c **** #endif
 494:../os_core/os_mbox.c **** 
 495:../os_core/os_mbox.c **** #if OS_EVENT_TBL_SIZE > 1
 496:../os_core/os_mbox.c ****     *pdest++ = *psrc++;
 2556              		.loc 1 496 0
 2557 0830 10301BE5 		ldr	r3, [fp, #-16]
 2558 0834 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2559 0838 14301BE5 		ldr	r3, [fp, #-20]
 2560 083c 0020C3E5 		strb	r2, [r3, #0]
 2561 0840 14301BE5 		ldr	r3, [fp, #-20]
 2562 0844 013083E2 		add	r3, r3, #1
 2563 0848 14300BE5 		str	r3, [fp, #-20]
 2564 084c 10301BE5 		ldr	r3, [fp, #-16]
 2565 0850 013083E2 		add	r3, r3, #1
 2566 0854 10300BE5 		str	r3, [fp, #-16]
 497:../os_core/os_mbox.c **** #endif
 498:../os_core/os_mbox.c **** 
 499:../os_core/os_mbox.c **** #if OS_EVENT_TBL_SIZE > 2
 500:../os_core/os_mbox.c ****     *pdest++ = *psrc++;
 2567              		.loc 1 500 0
 2568 0858 10301BE5 		ldr	r3, [fp, #-16]
 2569 085c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2570 0860 14301BE5 		ldr	r3, [fp, #-20]
 2571 0864 0020C3E5 		strb	r2, [r3, #0]
 2572 0868 14301BE5 		ldr	r3, [fp, #-20]
 2573 086c 013083E2 		add	r3, r3, #1
 2574 0870 14300BE5 		str	r3, [fp, #-20]
 2575 0874 10301BE5 		ldr	r3, [fp, #-16]
 2576 0878 013083E2 		add	r3, r3, #1
 2577 087c 10300BE5 		str	r3, [fp, #-16]
 501:../os_core/os_mbox.c **** #endif
 502:../os_core/os_mbox.c **** 
 503:../os_core/os_mbox.c **** #if OS_EVENT_TBL_SIZE > 3
 504:../os_core/os_mbox.c ****     *pdest++ = *psrc++;
 2578              		.loc 1 504 0
 2579 0880 10301BE5 		ldr	r3, [fp, #-16]
 2580 0884 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2581 0888 14301BE5 		ldr	r3, [fp, #-20]
 2582 088c 0020C3E5 		strb	r2, [r3, #0]
 2583 0890 14301BE5 		ldr	r3, [fp, #-20]
 2584 0894 013083E2 		add	r3, r3, #1
 2585 0898 14300BE5 		str	r3, [fp, #-20]
 2586 089c 10301BE5 		ldr	r3, [fp, #-16]
 2587 08a0 013083E2 		add	r3, r3, #1
 2588 08a4 10300BE5 		str	r3, [fp, #-16]
 505:../os_core/os_mbox.c **** #endif
 506:../os_core/os_mbox.c **** 
 507:../os_core/os_mbox.c **** #if OS_EVENT_TBL_SIZE > 4
 508:../os_core/os_mbox.c ****     *pdest++ = *psrc++;
 2589              		.loc 1 508 0
 2590 08a8 10301BE5 		ldr	r3, [fp, #-16]
 2591 08ac 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2592 08b0 14301BE5 		ldr	r3, [fp, #-20]
 2593 08b4 0020C3E5 		strb	r2, [r3, #0]
 2594 08b8 14301BE5 		ldr	r3, [fp, #-20]
 2595 08bc 013083E2 		add	r3, r3, #1
 2596 08c0 14300BE5 		str	r3, [fp, #-20]
 2597 08c4 10301BE5 		ldr	r3, [fp, #-16]
 2598 08c8 013083E2 		add	r3, r3, #1
 2599 08cc 10300BE5 		str	r3, [fp, #-16]
 509:../os_core/os_mbox.c **** #endif
 510:../os_core/os_mbox.c **** 
 511:../os_core/os_mbox.c **** #if OS_EVENT_TBL_SIZE > 5
 512:../os_core/os_mbox.c ****     *pdest++ = *psrc++;
 2600              		.loc 1 512 0
 2601 08d0 10301BE5 		ldr	r3, [fp, #-16]
 2602 08d4 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2603 08d8 14301BE5 		ldr	r3, [fp, #-20]
 2604 08dc 0020C3E5 		strb	r2, [r3, #0]
 2605 08e0 14301BE5 		ldr	r3, [fp, #-20]
 2606 08e4 013083E2 		add	r3, r3, #1
 2607 08e8 14300BE5 		str	r3, [fp, #-20]
 2608 08ec 10301BE5 		ldr	r3, [fp, #-16]
 2609 08f0 013083E2 		add	r3, r3, #1
 2610 08f4 10300BE5 		str	r3, [fp, #-16]
 513:../os_core/os_mbox.c **** #endif
 514:../os_core/os_mbox.c **** 
 515:../os_core/os_mbox.c **** #if OS_EVENT_TBL_SIZE > 6
 516:../os_core/os_mbox.c ****     *pdest++ = *psrc++;
 2611              		.loc 1 516 0
 2612 08f8 10301BE5 		ldr	r3, [fp, #-16]
 2613 08fc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2614 0900 14301BE5 		ldr	r3, [fp, #-20]
 2615 0904 0020C3E5 		strb	r2, [r3, #0]
 2616 0908 14301BE5 		ldr	r3, [fp, #-20]
 2617 090c 013083E2 		add	r3, r3, #1
 2618 0910 14300BE5 		str	r3, [fp, #-20]
 2619 0914 10301BE5 		ldr	r3, [fp, #-16]
 2620 0918 013083E2 		add	r3, r3, #1
 2621 091c 10300BE5 		str	r3, [fp, #-16]
 517:../os_core/os_mbox.c **** #endif
 518:../os_core/os_mbox.c **** 
 519:../os_core/os_mbox.c **** #if OS_EVENT_TBL_SIZE > 7
 520:../os_core/os_mbox.c ****     *pdest   = *psrc;
 2622              		.loc 1 520 0
 2623 0920 10301BE5 		ldr	r3, [fp, #-16]
 2624 0924 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2625 0928 14301BE5 		ldr	r3, [fp, #-20]
 2626 092c 0020C3E5 		strb	r2, [r3, #0]
 521:../os_core/os_mbox.c **** #endif
 522:../os_core/os_mbox.c ****     p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox             
 2627              		.loc 1 522 0
 2628 0930 18301BE5 		ldr	r3, [fp, #-24]
 2629 0934 042093E5 		ldr	r2, [r3, #4]
 2630 0938 1C301BE5 		ldr	r3, [fp, #-28]
 2631 093c 002083E5 		str	r2, [r3, #0]
 523:../os_core/os_mbox.c ****     OS_EXIT_CRITICAL();
 2632              		.loc 1 523 0
 2633              	@ 523 "../os_core/os_mbox.c" 1
 2634 0940 04009DE4 		ldmfd sp!, {r0}             
 2635 0944 00F021E1 	msr   cpsr_c, r0              
 2636              	@ 0 "" 2
 524:../os_core/os_mbox.c ****     return (OS_NO_ERR);
 2637              		.loc 1 524 0
 2638 0948 0030A0E3 		mov	r3, #0
 2639              	.L59:
 525:../os_core/os_mbox.c **** }
 2640              		.loc 1 525 0
 2641 094c 0300A0E1 		mov	r0, r3
 2642 0950 0CD04BE2 		sub	sp, fp, #12
 2643 0954 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2644 0958 1EFF2FE1 		bx	lr
 2645              		.cfi_endproc
 2646              	.LFE6:
 2648              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 os_mbox.c
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:1635   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:1638   .text:00000000 OSMboxAccept
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:1708   .text:00000084 OSMboxCreate
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:1804   .text:00000160 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:1809   .text:00000168 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:1812   .text:00000168 OSMboxDel
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:2036   .text:00000394 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:2041   .text:0000039c $a
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:2044   .text:0000039c OSMboxPend
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:2234   .text:00000578 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:2239   .text:00000580 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:2242   .text:00000580 OSMboxPost
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:2352   .text:00000664 OSMboxPostOpt
C:\Users\USUARI~1\AppData\Local\Temp\ccgP8oCf.s:2488   .text:0000078c OSMboxQuery
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
OS_EventWaitListInit
OSIntNesting
OSEventFreeList
OS_EventTaskRdy
OS_Sched
OS_EventTaskWait
OS_EventTO
OSTCBCur
